{"version":3,"file":"js/exposed-./RemediationButton.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/Utilities/http.js","webpack:///./src/api/index.js","webpack:///./src/config.js","webpack:///./src/constants.js","webpack:///./src/modules/RemediationsModal/validate/validator.js","webpack:///./src/modules/RemediationsButton.js","webpack:///./src/modules/RemediationsModal/NoDataModal.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () =>\n  window.location.pathname\n    .split('/')\n    .filter((s) => s !== 'preview' && s.length > 0)\n    .shift();\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'preview' ? 'preview/' : '';\n};\n\nexport const getBaseUri = () =>\n  `${document.baseURI.replace('preview/', '')}${getEnvUrl()}`;\n\nexport const remediationUrl = (id) =>\n  `${getBaseUri()}${getGroup()}/remediations${id ? `/${id}` : ''}`;\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>Required</div>\n            ) : (\n              <div>Not required</div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              allSystemsNamed: allSystemsNamed.filter((system) =>\n                curr.systems.includes(system.id)\n              ),\n              allSystems: curr.systems,\n              cells: [\n                {\n                  title: (\n                    <Bullseye>\n                      <Spinner />\n                    </Bullseye>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nconst buildSystemRow = (allSystemsNamed = [], allSystems = []) => (\n  <SystemsTableWithContext\n    allSystemsNamed={allSystemsNamed}\n    allSystems={allSystems}\n    disabledColumns={['updated']}\n  />\n);\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  temp[rowKey + 1].cells = [\n    {\n      title: buildSystemRow(\n        rows[rowKey + 1].allSystemsNamed,\n        rows[rowKey + 1].allSystems\n      ),\n    },\n  ];\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id: existing_id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        existing_id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK].trim(),\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    // watch out, id is only returned from createRemediation endpoint,\n    // not patchRemediation, thus we use existing_id as well\n    .then(({ id }) => {\n      setState({ id: id ?? existing_id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(\n            id ?? existing_id,\n            formValues[SELECT_PLAYBOOK],\n            !isUpdate\n          ),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems, sortBy) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n  return {\n    ...state,\n    selected,\n    rows: sortByAttr(\n      state.rows.map(({ id, ...row }) => ({\n        id,\n        ...row,\n        selected: !!selected?.includes(id),\n      })),\n      'display_name',\n      sortBy?.direction || 'asc'\n    ),\n    sortBy,\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const sortByAttr = (systems, attribute, direction) =>\n  Array.isArray(systems)\n    ? systems.sort(\n        (a, b) =>\n          ((a[attribute] > b[attribute] && 1) || -1) *\n          (direction === 'asc' ? 1 : -1)\n      )\n    : [];\n\nexport const fetchSystemsInfo = async (\n  config,\n  sortableColumns = [],\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const isSortingValid = sortableColumns.includes(config.orderBy);\n  config.orderBy = isSortingValid ? config.orderBy : undefined;\n  config.orderDirection = isSortingValid\n    ? config.orderDirection?.toLowerCase()\n    : undefined;\n  allSystemsNamed = sortByAttr(allSystemsNamed, 'name', config.orderDirection);\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ? [curr.id] : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(\n          sliced,\n          {\n            ...config,\n            fields: { system_profile: ['operating_system', 'bootc_status'] },\n            hasItems: true,\n            page: 1,\n          },\n          true\n        )\n      : {};\n  return {\n    ...{\n      ...data,\n      results: sortByAttr(data.results, 'display_name', config.orderDirection),\n    },\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n    orderBy: config.orderBy,\n    orderDirection: config.orderDirection,\n    sortBy: { key: config.orderBy, direction: config.orderDirection },\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state, { payload }) =>\n      loadEntitiesFulfilled(state, allSystems, {\n        key: payload.orderBy,\n        direction: payload.orderDirection,\n      }),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), ...systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n\nexport const matchPermissions = (permissionA, permissionB) => {\n  const segmentsA = permissionA.split(':');\n  const segmentsB = permissionB.split(':');\n\n  if (segmentsA.length !== segmentsB.length) {\n    return false;\n  }\n\n  return segmentsA.every(\n    (segmentA, index) =>\n      segmentA === segmentsB[index] ||\n      segmentA === '*' ||\n      segmentsB[index] === '*'\n  );\n};\n\nexport const getResolvedSystems = (issue) => {\n  let count = 0;\n  issue.systems.map((system) => {\n    if (system.resolved) {\n      count++;\n    }\n  });\n  return count;\n};\n","const HEADERS = {\n  'Content-Type': 'application/json; charset=utf-8',\n};\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function checkResponse(r) {\n  if (r.ok) {\n    return r;\n  }\n\n  if (r.headers.get('content-type').includes('application/json')) {\n    // let's try to extract some more info\n    let data = false;\n    try {\n      data = await r.json();\n    } catch (e) {} // eslint-disable-line no-empty\n\n    if (data.errors && data.errors.length) {\n      const error = data.errors[0];\n\n      if (error.details && error.details.name) {\n        throw new HttpError(`${error.title} (${error.details.name})`);\n      }\n\n      throw new HttpError(error.title);\n    }\n  }\n\n  throw new HttpError(`Unexpected response code ${r.status}`);\n}\n\nasync function json(r) {\n  if (!r) {\n    return;\n  }\n\n  const type = r.headers.get('content-type');\n  if (!type.includes('application/json')) {\n    throw new HttpError(`Unexpected response type (${type}) returned`);\n  }\n\n  return r.json();\n}\n\nfunction doFetch(\n  uri,\n  method = 'GET',\n  data = false,\n  headers = false,\n  options = {}\n) {\n  const opts = {\n    credentials: 'same-origin',\n    method,\n    ...options,\n  };\n\n  if (headers) {\n    opts.headers = headers;\n  }\n\n  if (data) {\n    opts.body = JSON.stringify(data);\n  }\n\n  return fetch(uri, opts);\n}\n\nexport function doGet(uri) {\n  return doFetch(uri.toString()).then(checkResponse).then(json);\n}\n\nexport function doPost(uri, data) {\n  return doFetch(uri, 'POST', data, HEADERS).then(checkResponse).then(json);\n}\n\nexport function doPatch(uri, data) {\n  return doFetch(uri, 'PATCH', data, HEADERS).then(checkResponse);\n}\n\nexport function doDelete(uri) {\n  return doFetch(uri, 'DELETE').then(checkResponse);\n}\n","import { API_BASE, SOURCES_BASE } from '../config';\n\nimport axios from 'axios';\nimport {\n  RemediationsApi,\n  ResolutionsApi,\n  RemediationsApiAxiosParamCreator,\n} from '@redhat-cloud-services/remediations-client';\nimport { DefaultApi } from '@redhat-cloud-services/sources-client';\n\n/*\n * TODO: replace these with generated clients\n */\nimport { doGet } from '../Utilities/http';\nimport urijs from 'urijs';\n\nfunction url(...args) {\n  const url = urijs(API_BASE).segment('remediations');\n  args.forEach((segment) => url.segment(segment));\n  return url;\n}\n\nexport const getRemediationStatus = (id) => doGet(url(id, 'status'));\nexport function getHosts() {\n  return doGet('/api/inventory/v1/hosts');\n}\n/*\n * end of TODO\n */\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function authInterceptor(config) {\n  return config;\n}\n\nfunction responseDataInterceptor(response) {\n  if (response.data) {\n    return { ...response.data, etag: response.headers.etag };\n  }\n\n  return response;\n}\n\nfunction interceptor401(err) {\n  if (!err) {\n    return;\n  }\n\n  if (err.response && err.response.status === 401) {\n    return false;\n  }\n\n  throw err;\n}\n\nfunction errorInterceptor(err) {\n  if (!err) {\n    return;\n  }\n\n  if (\n    err.response &&\n    err.response.data &&\n    err.response.data.errors &&\n    err.response.data.errors.length\n  ) {\n    const error = err.response.data.errors[0];\n\n    if (error.details && error.details.name) {\n      throw new HttpError(`${error.title} (${error.details.name})`);\n    }\n\n    throw new HttpError(error.title);\n  }\n\n  throw err;\n}\n\nconst instance = axios.create();\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport const remediations = new RemediationsApi(undefined, API_BASE, instance);\nexport const resolutions = new ResolutionsApi(undefined, API_BASE, instance);\nexport const sources = new DefaultApi(undefined, SOURCES_BASE, instance);\n\nexport function downloadPlaybook(selectedIds) {\n  return new Promise((resolve, reject) => {\n    const tab =\n      selectedIds.length > 1\n        ? new RemediationsApiAxiosParamCreator()\n            .downloadPlaybooks(selectedIds)\n            .then((value) => window.location.assign(API_BASE + value.url))\n        : new RemediationsApiAxiosParamCreator()\n            .getRemediationPlaybook(selectedIds[0])\n            .then((value) => window.location.assign(API_BASE + value.url));\n\n    if (!tab) {\n      return reject();\n    }\n\n    const handle = setInterval(() => {\n      if (tab.closed) {\n        clearInterval(handle);\n        resolve();\n      }\n    }, 500);\n  });\n}\n\nexport function getIsReceptorConfigured() {\n  return doGet(\n    `${window.location.origin}/api/sources/v2.0/endpoints?filter[receptor_node][not_nil]`\n  );\n}\n\nexport function deleteSystemsFromRemediation(systems, remediation) {\n  return Promise.all(\n    systems.flatMap((system) =>\n      system.issues.map((issue) =>\n        remediations.deleteRemediationIssueSystem(\n          remediation.id,\n          issue.id,\n          system.id\n        )\n      )\n    )\n  );\n}\n\nfunction checkResponse(r) {\n  if (!r.ok) {\n    const error = new Error(`Unexpected response code ${r.status}`);\n    error.statusCode = r.status;\n    throw error;\n  }\n\n  return r;\n}\n\nfunction json(r) {\n  checkResponse(r);\n  return r.json();\n}\n\nconst headers = Object.freeze({\n  'Content-Type': 'application/json; charset=utf-8',\n});\n\nexport function createRemediation(data) {\n  const uri = new urijs(API_BASE).segment('remediations').toString();\n  return fetch(uri, {\n    headers,\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify(data),\n  }).then(json);\n}\n\nexport function patchRemediation(id, data) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  }).then(checkResponse);\n}\n\nexport function getRemediations() {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .query({ limit: 200 })\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getRemediation(id) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getResolutionsBatch(issues) {\n  const uri = new urijs(API_BASE).segment('resolutions').toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'POST',\n    body: JSON.stringify({ issues }),\n  }).then(json);\n}\n","export const API_BASE = '/api/remediations/v1';\nexport const SOURCES_BASE = '/api/sources/v2.0';\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst asyncActions = flatMap(\n  [\n    'LOAD_REMEDIATIONS',\n    'CREATE_REMEDIATIONS',\n    'LOAD_REMEDIATION',\n    'LOAD_REMEDIATION_STATUS',\n    'REFRESH_REMEDIATION',\n    'PATCH_REMEDIATION',\n    'DELETE_REMEDIATION',\n    'DELETE_REMEDIATION_ISSUE',\n    'DELETE_REMEDIATION_ISSUE_SYSTEM',\n    'PATCH_REMEDIATION_ISSUE',\n    'GET_RESOLUTIONS',\n    'GET_CONNECTION_STATUS',\n    'RUN_REMEDIATION',\n    'EXECUTE_PLAYBOOK_BANNER',\n    'RUN_REMEDIATION',\n    'GET_PLAYBOOK_RUNS',\n    'GET_PLAYBOOK_RUN',\n    'GET_PLAYBOOK_RUN_SYSTEMS',\n    'GET_PLAYBOOK_RUN_SYSTEM_DETAILS',\n    'CANCEL_PLAYBOOK_RUNS',\n    'GET_ENDPOINT',\n    'CHECK_EXECUTABLE',\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nconst actions = ['SET_ETAG', 'EXPAND_INVENTORY_TABLE', 'SELECT_ENTITY'];\nexport const ACTION_TYPES = keyBy([...asyncActions, ...actions], (k) => k);\n\nexport const SEARCH_DEBOUNCE_DELAY = 500;\n\nexport const FETCH_SELECTED_HOSTS = 'FETCH_SELECTED_HOSTS';\nexport const FETCH_RESOLUTIONS = 'FETCH_RESOLUTIONS';\n","function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport propTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport validate from './RemediationsModal/validate';\n\nimport { CAN_REMEDIATE, matchPermissions } from '../Utilities/utils';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport RemediationWizard from './RemediationsModal';\nimport NoDataModal from './RemediationsModal/NoDataModal';\n\nconst RemediationButton = ({\n  isDisabled,\n  children,\n  dataProvider,\n  onRemediationCreated,\n  buttonProps,\n  patchNoAdvisoryText,\n}) => {\n  const [hasPermissions, setHasPermissions] = useState(false);\n  const [remediationsData, setRemediationsData] = useState();\n  const [isNoDataModalOpen, setNoDataModalOpen] = useState(false);\n  const chrome = useChrome();\n\n  useEffect(() => {\n    chrome.getUserPermissions('remediations').then((permissions) => {\n      setHasPermissions(\n        permissions.some(({ permission }) => {\n          return matchPermissions(permission, CAN_REMEDIATE);\n        })\n      );\n    });\n  }, []);\n\n  if (!hasPermissions) {\n    return (\n      <Tooltip content=\"You do not have correct permissions to remediate this entity.\">\n        <span>\n          <Button\n            isDisabled\n            {...buttonProps}\n            data-testid=\"remediationButton-no-permissions\"\n          >\n            {children}\n          </Button>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Button\n        isDisabled={isDisabled}\n        data-testid=\"remediationButton-with-permissions\"\n        onClick={() => {\n          Promise.resolve(dataProvider()).then((data) => {\n            if (!data) {\n              setNoDataModalOpen(true);\n              return;\n            }\n\n            validate(data);\n            setRemediationsData(data);\n          });\n        }}\n        {...buttonProps}\n      >\n        {children}\n      </Button>\n      <NoDataModal\n        isOpen={isNoDataModalOpen}\n        setOpen={setNoDataModalOpen}\n        patchNoAdvisoryText={patchNoAdvisoryText}\n      />\n      {remediationsData && (\n        <RemediationWizard\n          setOpen={(isOpen) =>\n            setRemediationsData((prevData) =>\n              isOpen === false ? null : prevData\n            )\n          }\n          data={{\n            onRemediationCreated,\n            ...(remediationsData || {}),\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nRemediationButton.propTypes = {\n  isDisabled: propTypes.bool,\n  dataProvider: propTypes.func.isRequired,\n  onRemediationCreated: propTypes.func,\n  children: propTypes.node,\n  buttonProps: propTypes.shape({\n    [propTypes.string]: propTypes.any,\n  }),\n  patchNoAdvisoryText: propTypes.string,\n};\n\nRemediationButton.defaultProps = {\n  isDisabled: false,\n  onRemediationCreated: (f) => f,\n  children: 'Remediate with Ansible',\n};\n\nexport default RemediationButton;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nexport const NoDataModal = ({ isOpen, setOpen, patchNoAdvisoryText }) => {\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Remediate with Ansible\"\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={() => setOpen(false)}>\n          Back to Insights\n        </Button>,\n      ]}\n    >\n      {patchNoAdvisoryText ? (\n        patchNoAdvisoryText\n      ) : (\n        <>\n          None of the selected issues can be remediated with Ansible.\n          <br />\n          <br />\n          To remediate these issues, review the manual remediation steps\n          associated with each.\n        </>\n      )}\n    </Modal>\n  );\n};\n\nNoDataModal.propTypes = {\n  isOpen: propTypes.bool,\n  setOpen: propTypes.func,\n  patchNoAdvisoryText: propTypes.string,\n};\n\nexport default NoDataModal;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n  const sortableColumns = ['display_name'];\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.reduce(\n          (acc, curr) => [\n            ...acc,\n            ...(!disabledColumns.includes(curr.key)\n              ? [\n                  {\n                    ...curr,\n                    props: {\n                      ...(curr.props || {}),\n                      isStatic: !sortableColumns.includes(curr.key),\n                    },\n                  },\n                ]\n              : []),\n          ],\n          []\n        )\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(\n          config,\n          sortableColumns,\n          allSystemsNamed,\n          defaultGetEntities\n        )\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"names":["capitalize","string","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","document","baseURI","replace","filter","s","length","shift","dedupeArray","array","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","isOpen","cells","title","action","Fragment","resolution","alternate","needsReboot","systems","props","parent","fullWidth","system","includes","allSystems","Bullseye","Spinner","colSpan","className","buildSystemRow","disabledColumns","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","issueResolutions","find","r","resolutions","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","playbookSystems","issue","interval","setInterval","add","existing_id","isUpdate","auto_reboot","name","trim","then","onRemediationCreated","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","catch","failed","finally","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","sortByAttr","attribute","Array","isArray","fetchSystemsInfo","async","config","sortableColumns","getEntities","isSortingValid","orderBy","undefined","orderDirection","toLowerCase","hostnameOrId","filters","sliced","page","per_page","fields","system_profile","hasItems","results","total","sortBy","splitArray","inputArray","perChunk","Math","ceil","_item","inventoryEntitiesReducer","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","rowsIds","item","entitySelected","loadEntitiesFulfilled","shortenIssueId","getIssuesMultiple","needs_reboot","record","matchPermissions","permissionA","permissionB","segmentsA","segmentsB","every","segmentA","getResolvedSystems","resolved","HttpError","Error","constructor","super","this","checkResponse","ok","headers","get","json","e","errors","error","details","status","type","doGet","uri","method","options","opts","credentials","body","JSON","stringify","fetch","doFetch","toString","getRemediationStatus","args","url","API_BASE","segment","forEach","getHosts","instance","interceptors","request","use","response","etag","err","remediations","RemediationsApi","ResolutionsApi","sources","DefaultApi","SOURCES_BASE","downloadPlaybook","selectedIds","Promise","resolve","reject","tab","RemediationsApiAxiosParamCreator","downloadPlaybooks","value","assign","getRemediationPlaybook","handle","closed","getIsReceptorConfigured","origin","deleteSystemsFromRemediation","all","flatMap","deleteRemediationIssueSystem","statusCode","freeze","createRemediation","patchRemediation","getRemediations","query","limit","getRemediation","getResolutionsBatch","asyncActions","ACTION_TYPES","k","SEARCH_DEBOUNCE_DELAY","FETCH_SELECTED_HOSTS","FETCH_RESOLUTIONS","assert","test","msg","TypeError","checkAllowedKeys","reference","checkRequiredKeys","prototype","hasOwnProperty","call","checkSystems","RemediationButton","isDisabled","children","dataProvider","buttonProps","patchNoAdvisoryText","hasPermissions","setHasPermissions","useState","remediationsData","setRemediationsData","isNoDataModalOpen","setNoDataModalOpen","chrome","useChrome","useEffect","getUserPermissions","permissions","some","permission","Button","onClick","validate","NoDataModal","setOpen","prevData","Tooltip","content","propTypes","isRequired","defaultProps","f","Modal","ModalVariant","small","onClose","actions","SystemsTable","registry","hasCheckbox","bulkSelect","inventory","useRef","hideFilters","tags","registeredWith","stale","columns","isStatic","noDetail","showTags","ref","_i","defaultGetEntities","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","register","tableProps","canSelectAll","SystemsTableWithContext","setRegistry","store","Provider"],"sourceRoot":""}