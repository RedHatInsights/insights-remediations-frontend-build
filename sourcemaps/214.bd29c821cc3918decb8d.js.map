{"version":3,"sources":["webpack:///./src/modules/RemediationsModal/validate/validator.js"],"names":["assert","test","msg","TypeError","checkAllowedKeys","reference","keys","Object","forEach","key","includes","checkRequiredKeys","prototype","hasOwnProperty","call","checkSystems","systems","Array","isArray","length","system","validate","data","issues","issue","id"],"mappings":"gLAAA,SAASA,EAAOC,EAAMC,GACpB,IAAKD,EACH,MAAM,IAAIE,UAAUD,GAIxB,SAASE,EAAiBC,GAAoB,2BAANC,EAAM,iCAANA,EAAM,kBAC5CC,OAAOD,KAAKD,GAAWG,SAAQ,SAACC,GAAD,OAC7BT,EACEM,EAAKI,SAASD,GADV,0BAEeA,EAFf,6BAEuCH,OAKjD,SAASK,EAAkBN,GAAoB,2BAANC,EAAM,iCAANA,EAAM,kBAC7CA,EAAKE,SAAQ,SAACC,GAAD,OACXT,EACEO,OAAOK,UAAUC,eAAeC,KAAKT,EAAWI,GAD5C,gCAEqBA,OAK/B,SAASM,EAAaC,GACpBhB,EAAOiB,MAAMC,QAAQF,GAAU,4BAC/BhB,EAAOgB,EAAQG,OAAQ,mCACvBH,EAAQR,SAAQ,SAACY,GAAD,OACdpB,EAAyB,iBAAXoB,EAAqB,oCAIxB,SAASC,EAASC,GAC/BtB,EAAuB,YAAhB,OAAOsB,IAA8B,OAATA,GACnClB,EAAiBkB,EAAM,SAAU,UAAW,wBAC5CX,EAAkBW,EAAM,UAExBtB,EAAOiB,MAAMC,QAAQI,EAAKC,QAAS,2BACnCvB,EAAOsB,EAAKC,OAAOJ,OAAQ,kCAC3BG,EAAKC,OAAOf,SAAQ,SAACgB,GACnBxB,EACmB,YAAjB,OAAOwB,IAAgC,OAAVA,EAC7B,2BAEFpB,EAAiBoB,EAAO,KAAM,cAAe,WAC7Cb,EAAkBa,EAAO,KAAM,eAC/BjB,OAAOK,UAAUC,eAAeC,KAAKU,EAAO,YAC1CT,EAAaS,EAAMR,SACrBhB,EACEO,OAAOK,UAAUC,eAAeC,KAAKU,EAAO,YAC1CjB,OAAOK,UAAUC,eAAeC,KAAKQ,EAAM,WAFzC,iCAGsBE,EAAMC,QAIpClB,OAAOK,UAAUC,eAAeC,KAAKQ,EAAM,YACzCP,EAAaO,EAAKN","file":"js/214.b968c051c9bf18dd9693.js","sourcesContent":["function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n"],"sourceRoot":""}