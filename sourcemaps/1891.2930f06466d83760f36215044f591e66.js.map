{"version":3,"file":"js/1891.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Utilities/useRemediationsList.js","webpack:///./src/api/inventory.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/common/helpers.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/common/ExistingPlaybookTypeahead.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/store/actions/host-actions.js"],"sourcesContent":["import { useAxiosWithPlatformInterceptors } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst { API_BASE } = require('../config');\nimport { useState, useEffect, useRef } from 'react';\n\nexport const useRemediationsList = (remediation) => {\n  const axios = useAxiosWithPlatformInterceptors();\n  const [remediationsList, setRemediationsList] = useState();\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    mounted.current = true;\n    const fetchData = async () => {\n      try {\n        const nameList = await axios.get(\n          `${API_BASE}/remediations/?fields[data]=name`\n        );\n        mounted.current && setRemediationsList(nameList.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted.current = false;\n    };\n  }, [remediation]);\n\n  return remediationsList;\n};\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","export const verifyName = (val, remediationsList) => {\n  const compareData = () => {\n    const trimmedVal = val.trim();\n    const dataHashmap = {};\n    remediationsList &&\n      remediationsList.forEach((item) => {\n        dataHashmap[item.name] = true;\n      });\n\n    if (dataHashmap[trimmedVal]) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return compareData();\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\nimport { verifyName } from './common/helpers';\n\nexport const selectPlaybookFields = (remediationsList) => [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n      (value, formValues) => {\n        const isPlaybookSelected = formValues[EXISTING_PLAYBOOK_SELECTED];\n        if (!isPlaybookSelected && value) {\n          return verifyName(value, remediationsList)\n            ? 'A playbook with the same name already exists within your organization. Try a different name.'\n            : undefined;\n        }\n        return undefined;\n      },\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues, remediationsList) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields(remediationsList),\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.sm}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateHeader\n        titleText=\"Unexpected error\"\n        icon={<EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />}\n        headingLevel=\"h4\"\n      />\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Select,\n  SelectOption,\n  SelectList,\n  MenuToggle,\n  TextInputGroup,\n  TextInputGroupMain,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { EXISTING_PLAYBOOK } from '../../../Utilities/utils';\nimport { getRemediation } from '../../../api';\n\nconst ExistingPlaybookTypeahead = ({\n  selectedPlaybook,\n  setIsLoadingRemediation,\n  setSelectedPlaybook,\n  existingPlaybookSelected,\n  existingRemediations,\n  input,\n  formOptions,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState(selectedPlaybook?.name);\n  const [filterValue, setFilterValue] = useState('');\n  const [selectOptions, setSelectOptions] = useState(existingRemediations);\n  const [focusedItemIndex, setFocusedItemIndex] = useState(null);\n  const [activeItem, setActiveItem] = useState(null);\n  const textInputRef = useRef();\n\n  useEffect(() => {\n    let newSelectOptions = existingRemediations;\n    if (filterValue) {\n      newSelectOptions = existingRemediations.filter((menuItem) =>\n        String(menuItem.name).toLowerCase().includes(filterValue.toLowerCase())\n      );\n\n      if (!newSelectOptions.length) {\n        newSelectOptions = [\n          {\n            name: `No results found for \"${filterValue}\"`,\n          },\n        ];\n      }\n\n      if (!isOpen) {\n        setIsOpen(true);\n      }\n    }\n\n    setSelectOptions(newSelectOptions);\n    setActiveItem(null);\n    setFocusedItemIndex(null);\n  }, [filterValue]);\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (_event, value) => {\n    setIsLoadingRemediation(true);\n    getRemediation(value).then((remediation) => {\n      setSelectedPlaybook(remediation);\n      setIsLoadingRemediation(false);\n      if (existingPlaybookSelected) {\n        setInputValue(remediation.name);\n        setFilterValue('');\n        input.onChange(remediation.name);\n        formOptions.change(EXISTING_PLAYBOOK, remediation);\n      }\n    });\n  };\n\n  const onTextInputChange = (_event, value) => {\n    setFilterValue(value);\n    setInputValue(value);\n  };\n\n  const handleMenuArrowKeys = (key) => {\n    let indexToFocus;\n\n    if (isOpen) {\n      if (key === 'ArrowUp') {\n        if (focusedItemIndex === null || focusedItemIndex === 0) {\n          indexToFocus = selectOptions.length - 1;\n        } else {\n          indexToFocus = focusedItemIndex - 1;\n        }\n      }\n\n      if (key === 'ArrowDown') {\n        if (\n          focusedItemIndex === null ||\n          focusedItemIndex === selectOptions.length - 1\n        ) {\n          indexToFocus = 0;\n        } else {\n          indexToFocus = focusedItemIndex + 1;\n        }\n      }\n\n      setFocusedItemIndex(indexToFocus);\n      const focusedItem = selectOptions.filter((option) => !option.isDisabled)[\n        indexToFocus\n      ];\n\n      setActiveItem(`select-typeahead-${focusedItem.name.replace(' ', '-')}`);\n    }\n  };\n\n  const onInputKeyDown = (event) => {\n    const enabledMenuItems = selectOptions.filter(\n      (option) => !option.isDisabled\n    );\n    const [firstMenuItem] = enabledMenuItems;\n    const focusedItem = focusedItemIndex\n      ? enabledMenuItems[focusedItemIndex]\n      : firstMenuItem;\n    switch (event.key) {\n      case 'Enter':\n        if (isOpen && !focusedItem.name.includes('No results found for')) {\n          onSelect(null, focusedItem.id);\n        }\n        setIsOpen((prevIsOpen) => !prevIsOpen);\n        setFocusedItemIndex(null);\n        setActiveItem(null);\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        event.preventDefault();\n        handleMenuArrowKeys(event.key);\n        break;\n    }\n  };\n\n  const toggle = (toggleRef) => (\n    <MenuToggle\n      ref={toggleRef}\n      variant=\"typeahead\"\n      aria-label=\"Typeahead menu toggle\"\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n    >\n      <TextInputGroup isPlain>\n        <TextInputGroupMain\n          value={inputValue}\n          onClick={onToggleClick}\n          onChange={onTextInputChange}\n          onKeyDown={onInputKeyDown}\n          id=\"typeahead-select-input\"\n          autoComplete=\"off\"\n          innerRef={textInputRef}\n          placeholder=\"Select playbook\"\n          {...(activeItem && {\n            'aria-activedescendant': activeItem,\n          })}\n          role=\"combobox\"\n          isExpanded={isOpen}\n          aria-controls=\"select-typeahead-listbox\"\n        />\n      </TextInputGroup>\n    </MenuToggle>\n  );\n\n  return (\n    <Select\n      id=\"typeahead-select-existing-playbook\"\n      isOpen={isOpen}\n      selected={selectedPlaybook?.name}\n      onSelect={onSelect}\n      onOpenChange={() => {\n        setIsOpen(false);\n      }}\n      toggle={toggle}\n      isScrollable\n    >\n      <SelectList id=\"select-typeahead-listbox\">\n        {selectOptions.map((remediation, index) => {\n          return (\n            <SelectOption\n              key={remediation.id}\n              value={remediation.id}\n              isFocused={focusedItemIndex === index}\n              id={remediation.id}\n            >\n              {remediation.name}\n            </SelectOption>\n          );\n        })}\n      </SelectList>\n    </Select>\n  );\n};\n\nExistingPlaybookTypeahead.propTypes = {\n  selectedPlaybook: propTypes.object,\n  setIsLoadingRemediation: propTypes.func,\n  setSelectedPlaybook: propTypes.func,\n  existingPlaybookSelected: propTypes.bool,\n  existingRemediations: propTypes.array,\n  input: propTypes.object,\n  formOptions: propTypes.object,\n};\n\nexport default ExistingPlaybookTypeahead;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport ExistingPlaybookTypeahead from '../common/ExistingPlaybookTypeahead';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems, remediationsList } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  //cannot use hook here, as it needs to be called in the OnChange function\n  const verifyName = (val) => {\n    setNewPlaybookName(val);\n    existingPlaybookSelected || input.onChange(val);\n    const trimmedVal = val.trim();\n    const compareData = () => {\n      const dataHashmap = {};\n      remediationsList &&\n        remediationsList.forEach((item) => {\n          dataHashmap[item.name] = true;\n        });\n\n      if (dataHashmap[trimmedVal]) {\n        setIsDisabled(true);\n      } else {\n        setIsDisabled(false);\n      }\n    };\n    return compareData();\n  };\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <ExistingPlaybookTypeahead\n                selectedPlaybook={selectedPlaybook}\n                setIsLoadingRemediation={setIsLoadingRemediation}\n                setSelectedPlaybook={setSelectedPlaybook}\n                existingPlaybookSelected={existingPlaybookSelected}\n                existingRemediations={existingRemediations}\n                input={input}\n                formOptions={formOptions}\n              />\n            ) : (\n              <Skeleton size={SkeletonSize.lg} data-testid=\"skeleton-loader\" />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(_event, val) => {\n                  verifyName(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n                validated={\n                  isDisabled &&\n                  !existingPlaybookSelected &&\n                  ValidatedOptions.error\n                }\n              />\n\n              {isDisabled && !existingPlaybookSelected && (\n                <p className=\"pf-v5-u-font-size-sm pf-v5-u-danger-color-100\">\n                  A playbook with the same name already exists within your\n                  organization. Try a different name.\n                </p>\n              )}\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  remediationsList: propTypes.array,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { dedupeArray, TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n  const [bootcError, setBootcError] = useState(null);\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const bootcIds = useSelector(\n    ({ entities }) =>\n      entities?.rows\n        ?.filter((r) => r.system_profile?.bootc_status?.booted?.image)\n        .map((r) => r.id) || []\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const hasBootc = selected.some((s) => bootcIds.includes(s));\n    const isAdvisor = issues?.some((i) => i?.id?.startsWith('advisor'));\n\n    if (hasBootc && !isAdvisor) {\n      setBootcError(\n        'Image mode systems cannot be added to a remediation playbook.'\n      );\n      return input.onChange({});\n    }\n    setBootcError(null);\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = dedupeArray([\n        ...systems,\n        ...(curr.systems || []),\n      ]).filter((id) => selected?.includes(id));\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack\n      hasGutter\n      data-component-ouia-id=\"wizard-review-systems\"\n      data-testid=\"wizard-review-systems\"\n    >\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <SystemsTable\n          registry={registry}\n          allSystemsNamed={allSystemsNamed}\n          allSystems={allSystems}\n          hasCheckbox={true}\n          bulkSelect={{\n            id: 'select-systems',\n            count: selected.length,\n            items: [\n              {\n                title: 'Select none (0)',\n                onClick: () => onSelectRows(false),\n              },\n              ...(loaded && rowsLength > 0\n                ? [\n                    {\n                      title: `Select page (${rowsLength})`,\n                      onClick: () => onSelectRows(true),\n                    },\n                  ]\n                : []),\n            ],\n            checked: selected.length > 0,\n            onSelect: (value) => onSelectRows(value),\n          }}\n          onSelectRows\n        />\n      </StackItem>\n      {(bootcError || error) && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">\n            {bootcError || error}\n          </span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TableVariant, sortable, expandable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack\n      hasGutter\n      data-component-ouia-id=\"wizard-review-actions\"\n      data-testid=\"wizard-review-actions\"\n    >\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"rem-c-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"rem-c-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div className=\"ins-c-resolution-option\" key={resolution.id}>\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TableVariant, sortable, expandable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Switch,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack\n      hasGutter\n      data-component-ouia-id=\"wizard-review\"\n      data-testid=\"wizard-review\"\n    >\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Switch\n          data-testid=\"autoreboot-switch\"\n          label=\"Turn off autoreboot\"\n          labelOff=\"Turn on autoreboot\"\n          isChecked={input.value}\n          onChange={() => input.onChange(!input.value)}\n        />\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      data-testid={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateActions,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.lg}\n      data-testid=\"wizard-progress\"\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateHeader\n        titleText={\n          <>\n            {failed\n              ? 'Error: Unable to add items to playbook'\n              : percent === 100\n              ? 'Items added to playbook'\n              : 'Adding items to the playbook'}\n          </>\n        }\n        icon={\n          <EmptyStateIcon\n            className=\"pf-u-mb-lg pf-u-mt-sm\"\n            color={\n              failed\n                ? 'var(--pf-global--danger-color--100)'\n                : percent === 100\n                ? 'var(--pf-global--success-color--100)'\n                : undefined\n            }\n            icon={\n              failed\n                ? ExclamationCircleIcon\n                : percent === 100\n                ? CheckCircleIcon\n                : InProgressIcon\n            }\n          />\n        }\n        headingLevel=\"h1\"\n      />\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      <EmptyStateFooter>\n        {(failed || percent === 100) && (\n          <EmptyStateBody className=\"pf-c-progress-message\">\n            {failed ? (\n              'Please try again.'\n            ) : (\n              <div>\n                {`${issues.length} ${pluralize(\n                  issues.length,\n                  'action'\n                )} affecting \n                        ${systems.length} ${pluralize(\n                  systems.length,\n                  'system'\n                )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n                <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n              </div>\n            )}\n          </EmptyStateBody>\n        )}\n        {percent === 100 && (\n          <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n            You can remediate these systems directly from Insights by enabling\n            <Button\n              className=\"pf-u-py-0 pf-u-px-xs\"\n              variant=\"link\"\n              ouiaId=\"CloudConnectorButton\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n              size=\"sm\"\n              onClick={() =>\n                (window.location.href = `${\n                  window.location.origin\n                }/${getEnvUrl()}settings/connector`)\n              }\n            >\n              Cloud Connector\n            </Button>\n            on eligible systems.\n          </EmptyStateBody>\n        )}\n        {failed && (\n          <Button\n            className=\"pf-u-mt-md pf-u-mb-sm\"\n            variant=\"primary\"\n            ouiaId=\"TryAgainButton\"\n            data-testid={'TryAgainButton'}\n            onClick={() => {\n              setState({ failed: false, percent: 0 });\n              submitRemediation(false);\n            }}\n          >\n            Try again\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            className=\"pf-u-mt-md pf-u-mb-sm\"\n            variant=\"primary\"\n            ouiaId=\"ReturnToAppButton\"\n            onClick={() => {\n              onClose();\n              setOpen(false);\n            }}\n          >\n            Return to application\n          </Button>\n        )}\n        <EmptyStateActions>\n          {failed && (\n            <Button\n              variant=\"secondary\"\n              ouiaId=\"BackToWizardButton\"\n              data-testid={'BackToWizardButton'}\n              onClick={() => {\n                onClose();\n              }}\n            >\n              Go back to the wizard\n            </Button>\n          )}\n          {percent === 100 && (\n            <Button\n              variant=\"link\"\n              component=\"a\"\n              ouiaId=\"OpenPlaybookButton\"\n              data-testid={'OpenPlaybookButton'}\n              href={remediationUrl(playbook.id)}\n              onClick={() => {\n                onClose();\n                setOpen(false);\n              }}\n            >\n              Open playbook {playbook.name}\n            </Button>\n          )}\n        </EmptyStateActions>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal } from '@patternfly/react-core';\nimport { Wizard } from '@patternfly/react-core/deprecated';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\nimport { useRemediationsList } from '../../Utilities/useRemediationsList';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...(data.systems || [])]\n      )\n    )\n  );\n  const remediationsList = useRemediationsList();\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    remediationsList &&\n      setState({\n        type: 'schema',\n        payload: schemaBuilder(data.issues, remediationsList),\n      });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, [remediationsList]);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n      remediationsList: remediationsList,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems || [],\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== 'undefined')\n        .length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n  remediationsList: propTypes.array,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n"],"names":["API_BASE","useRemediationsList","remediation","axios","remediationsList","setRemediationsList","useState","mounted","useRef","useEffect","current","async","nameList","get","data","error","console","fetchData","hosts","HostsApi","undefined","getHostsById","systems","page","perPage","apiHostGetHostById","batchResolutions","issues","result","api","map","i","id","resolutions","warnings","errors","value","key","push","e","hostsInitialState","isLoading","state","payload","results","selectPlaybookFields","name","component","validate","type","PATTERN","pattern","REQUIRED","formValues","val","trimmedVal","trim","dataHashmap","forEach","item","compareData","verifyName","TEXT_FIELD","hideField","reviewActionsFields","fields","WIZARD","isDynamic","inModal","showTitles","title","description","nextStep","values","filter","issue","some","Object","keys","includes","length","reviewSystemsNextStep","filteredIssues","reviewActionsNextStep","showTitle","slice","findIndex","issueResolutionNextStep","substepOf","FetchError","props","resolutionsCount","input","valid","EmptyState","variant","EmptyStateVariant","sm","EmptyStateHeader","titleText","icon","EmptyStateIcon","color","headingLevel","EmptyStateBody","propTypes","ExistingPlaybookTypeahead","selectedPlaybook","setIsLoadingRemediation","setSelectedPlaybook","existingPlaybookSelected","existingRemediations","formOptions","isOpen","setIsOpen","inputValue","setInputValue","filterValue","setFilterValue","selectOptions","setSelectOptions","focusedItemIndex","setFocusedItemIndex","activeItem","setActiveItem","textInputRef","newSelectOptions","menuItem","String","toLowerCase","onToggleClick","onSelect","_event","then","onChange","change","onTextInputChange","onInputKeyDown","event","enabledMenuItems","option","isDisabled","firstMenuItem","focusedItem","prevIsOpen","preventDefault","indexToFocus","replace","handleMenuArrowKeys","Select","selected","onOpenChange","toggle","toggleRef","MenuToggle","ref","onClick","isExpanded","TextInputGroup","isPlain","TextInputGroupMain","onKeyDown","autoComplete","innerRef","placeholder","role","isScrollable","SelectList","index","SelectOption","isFocused","SelectPlaybook","allSystems","getState","setIsDisabled","setExistingRemediations","setExistingPlaybookSelected","newPlaybookName","setNewPlaybookName","isLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","Stack","hasGutter","StackItem","Alert","isInline","Text","Popover","bodyContent","Fragment","warning","Button","TextContent","Grid","GridItem","md","lg","Radio","label","defaultChecked","Skeleton","size","FormGroup","fieldId","TextInput","autoFocus","validated","ValidatedOptions","className","isRequired","ReviewSystems","registry","dispatch","useDispatch","bootcError","setBootcError","rowsLength","entities","rows","bootcIds","r","system_profile","bootc_status","booted","image","loaded","allSystemsNamed","hostReducer","host","display_name","hasBootc","s","isAdvisor","startsWith","reduce","acc","curr","tempSystems","onSelectRows","SystemsTable","hasCheckbox","bulkSelect","count","items","checked","ReducerRegistry","ReviewActions","sortByState","setSortByState","direction","multiples","record","setRows","isChecked","Table","compact","onCollapse","rowKey","cells","transforms","sortable","cellFormatters","onSort","sortBy","noWrap","IssueResolution","issueResolutions","find","uniqueResolutions","removedResolutions","Title","resolution","action","Tile","isSelected","split","needs_reboot","alternate","Review","issuesById","records","needsReboot","auto_reboot","Switch","labelOff","onRemediationCreated","resolutionsInitialState","ProgressBar","percent","failed","Progress","ProgressVariant","success","danger","info","onClose","setOpen","submitRemediation","setState","playbook","flat","EmptyStateFooter","href","ouiaId","iconPosition","window","location","origin","EmptyStateActions","initialState","submitted","reducer","schema","Error","RemediationWizard","basePath","useReducer","register","applyReducerHash","fetchResolutions","chunk","options","fetchHostsById","fetchHostNames","mapperExtension","review","validatorMapper","subscription","FormTemplate","showFormControls","initialValues","componentMapper","onSubmit","onCancel","Modal","ModalVariant","large","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","store","Provider"],"sourceRoot":""}