{"version":3,"file":"js/RemediationDetails.1672943454753.3e350a0d8674f6e8d2d0.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/components/ResolutionModal/ResolutionStep.js","webpack:///./src/components/ResolutionEditButton.js","webpack:///./src/containers/ConnectedComponents.js","webpack:///./src/components/DeleteButton.js","webpack:///./src/containers/DeleteButtons.js","webpack:///./src/components/RemediationDetailsSystemDropdown.js","webpack:///./src/components/Layouts/IconInline.js","webpack:///./src/components/Modals/SystemsStatusModal.js","webpack:///./src/components/SystemForActionButton.js","webpack:///./src/Utilities/debug.js","webpack:///./src/components/EmptyStates/EmptyActions.js","webpack:///./src/components/RemediationDetailsTable.js","webpack:///./src/components/SystemsTable/RemoveSystemModal.js","webpack:///./src/components/SystemsTable/RebootColumn.js","webpack:///./src/components/SystemsTable/IssuesColumn.js","webpack:///./src/components/SystemsTable/Columns.js","webpack:///./src/components/SystemsTable/SystemsTable.js","webpack:///./src/components/RemediationActivityTable.js","webpack:///./src/components/Dialogs/TextInputDialog.js","webpack:///./src/components/RemediationDetailsDropdown.js","webpack:///./src/components/ExecuteButton.js","webpack:///./src/containers/ExecuteButtons.js","webpack:///./src/components/Alerts/UpsellBanner.js","webpack:///./src/components/EmptyStates/ActivityTabUpsell.js","webpack:///./src/skeletons/SkeletonTableToolbar.js","webpack:///./src/skeletons/SkeletonTabs.js","webpack:///./src/skeletons/RemediationDetailsSkeleton.js","webpack:///./src/components/EmptyStates/EmptyActivityTable.js","webpack:///./src/components/RemediationSummary.js","webpack:///./src/routes/RemediationDetails.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'beta') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns = (defaultColumns = [], customColumns = []) => {\n  return customColumns.map((column) => {\n    const inventoryColumn = defaultColumns.find(\n      (invColumn) => invColumn.key === column.key\n    );\n\n    return inventoryColumn || column;\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Form,\n  Label,\n  Radio,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nimport { Reboot } from '@redhat-cloud-services/frontend-components/Reboot';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport './ChooseResolutionModal.scss';\n\nclass ResolutionStep extends Component {\n  constructor(props) {\n    super(props);\n    this.issue = props.issue;\n    this.state = {\n      selected: props.issue.resolution,\n      resolutions: false,\n    };\n  }\n\n  onRadioChange = (resolution) => {\n    this.setState({ selected: resolution });\n  };\n\n  async componentDidMount() {\n    const resolutions = await this.props.getResolutions(this.issue.id);\n    this.setState({ resolutions: resolutions.value });\n  }\n\n  getSelectedResolution = () => {\n    return this.state.selected;\n  };\n\n  render() {\n    const { resolutions, selected } = this.state;\n    let resolutionsDisplay;\n\n    if (resolutions) {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Form>\n              {resolutions.resolutions.map((resolution) => (\n                <div className=\"ins-c-resolution-option\" key={resolution.id}>\n                  <Radio\n                    label={\n                      <Stack className=\"ins-c-resolution-choice__details\">\n                        <StackItem>{resolution.description}</StackItem>\n                        {/*\n                                                    <StackItem>\n                                                        <Battery label=\"Resolution risk\" severity={ resolution.resolution_risk } />\n                                                    </StackItem>\n                                                    */}\n                        {resolution.needs_reboot && (\n                          <StackItem>\n                            <Reboot red />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    }\n                    aria-label={resolution.description}\n                    id={resolution.id}\n                    name=\"radio\"\n                    defaultChecked={resolution.id === selected.id}\n                    onChange={() => this.onRadioChange(resolution)}\n                  />\n                </div>\n              ))}\n            </Form>\n          </StackItem>\n        </React.Fragment>\n      );\n    } else {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Stack hasGutter>\n        <StackItem>\n          <div>Select resolution for this action.</div>\n        </StackItem>\n        <StackItem>\n          <Split hasGutter>\n            <SplitItem>\n              <Label>Action</Label>\n            </SplitItem>\n            <SplitItem isFilled>\n              <h1 className=\"ins-m-text__bold\">{this.issue.description}</h1>\n            </SplitItem>\n          </Split>\n        </StackItem>\n\n        {resolutionsDisplay}\n      </Stack>\n    );\n  }\n}\n\nResolutionStep.propTypes = {\n  issue: PropTypes.object.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionStep;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport ResolutionStep from './ResolutionModal/ResolutionStep';\n\nconst ResolutionEditButton = ({\n  remediation,\n  issue,\n  onResolutionSelected,\n  getResolutions,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const resolutionStep = useRef();\n\n  const onModalClose = (result) => {\n    setIsOpen(false);\n    const resolution = resolutionStep.current?.getSelectedResolution();\n\n    if (result && issue.resolution.id !== resolution.id) {\n      onResolutionSelected(remediation.id, issue.id, resolution.id);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setIsOpen(true)}>Edit</a>\n      {isOpen && (\n        <Modal\n          variant={ModalVariant.medium}\n          className=\"rem-c-resolution-modal\"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Edit resolution\"\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={onModalClose}>\n              Save\n            </Button>,\n            <Button\n              key=\"cancel\"\n              variant=\"secondary\"\n              onClick={() => setIsOpen(false)}\n            >\n              Cancel\n            </Button>,\n          ]}\n        >\n          <ResolutionStep\n            key=\"ResolutionStep\"\n            issue={issue}\n            ref={resolutionStep}\n            getResolutions={getResolutions}\n          />\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nResolutionEditButton.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  onResolutionSelected: PropTypes.func.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionEditButton;\n","import {\n  refreshRemediation,\n  patchRemediationIssue,\n  getResolutions,\n} from '../actions';\nimport { connect } from 'react-redux';\n\nimport ResolutionEditButton from '../components/ResolutionEditButton';\n\nexport const ConnectResolutionEditButton = connect(\n  (f) => f,\n  (dispatch) => ({\n    onResolutionSelected: async (remediation, issue, resolution) => {\n      await dispatch(patchRemediationIssue(remediation, issue, resolution));\n      dispatch(refreshRemediation(remediation));\n    },\n    getResolutions: (ruleId) => dispatch(getResolutions(ruleId)),\n  })\n)(ResolutionEditButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\n\nimport './DeleteButton.scss';\n\nclass DeleteButton extends Component {\n  state = {\n    dialogOpen: false,\n  };\n\n  onButtonClicked = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  onDialogClose = (result) => {\n    this.setState({ dialogOpen: false });\n    result && this.props.onDelete();\n  };\n\n  render() {\n    const { dialogOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button\n          onClick={this.onButtonClicked}\n          isDisabled={this.props.isDisabled}\n          variant={this.props.variant}\n        >\n          {this.props.label}\n        </Button>\n        {dialogOpen && (\n          <ConfirmationDialog\n            title={this.props.dialogTitle}\n            confirmText={this.props.dialogConfirmationText}\n            text={this.props.dialogMessage}\n            onClose={this.onDialogClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nDeleteButton.propTypes = {\n  label: PropTypes.string,\n  dialogTitle: PropTypes.string,\n  dialogMessage: PropTypes.string,\n  dialogConfirmationText: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  onDelete: PropTypes.func.isRequired,\n  variant: PropTypes.string,\n};\n\nDeleteButton.defaultProps = {\n  label: 'Delete',\n  variant: 'link',\n};\n\nexport default DeleteButton;\n","import { deleteRemediation, loadRemediationStatus } from '../actions';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { loadRemediations, deleteRemediationIssue } from '../actions';\nimport { isBeta } from '../config';\n\nimport DeleteButton from '../components/DeleteButton';\n\nexport const DeleteRemediationsButton = withRouter(\n  connect(\n    (state, { remediations }) => ({\n      dialogMessage: `You will not be able to recover ${\n        remediations.length > 1 ? 'these remediations' : 'this remediation'\n      }`,\n    }),\n    (dispatch, { remediations }) => ({\n      onDelete: async () => {\n        await Promise.all(\n          remediations.map((r) => dispatch(deleteRemediation(r)))\n        );\n        dispatch(loadRemediations());\n      },\n    })\n  )(DeleteButton)\n);\n\nexport const DeleteActionsButton = withRouter(\n  connect(\n    (state, { issues }) => ({\n      label: `Remove action${issues.length > 1 ? 's' : ''}`,\n      dialogTitle: `Remove action${issues.length > 1 ? 's' : ''}`,\n      dialogConfirmationText: `Remove action${issues.length > 1 ? 's' : ''}`,\n    }),\n    (dispatch, { remediation, issues, afterDelete }) => ({\n      onDelete: async () => {\n        await Promise.all(\n          issues.map((issueId) =>\n            dispatch(deleteRemediationIssue(remediation.id, issueId))\n          )\n        );\n        if (isBeta) {\n          dispatch(loadRemediationStatus(remediation.id));\n        }\n\n        afterDelete();\n      },\n    })\n  )(DeleteButton)\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { getSystemName } from '../Utilities/model';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\n\nfunction RemediationDetailsSystemDropdown({\n  remediation,\n  issue,\n  system,\n  onDelete,\n  setActiveAlert,\n}) {\n  const [open, setOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`This playbook will not address ${\n          issue.description\n        } on ${getSystemName(system)}`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n          setActiveAlert({\n            key: generateUniqueId(),\n            title: `Removed systems from ${remediation.name}`,\n            description: '',\n            variant: 'success',\n          });\n        }}\n      />\n\n      <Dropdown\n        onSelect={(f) => f}\n        toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n        isOpen={open}\n        position={DropdownPosition.right}\n        isPlain\n      >\n        <Button onClick={() => setDeleteDialogOpen(true)} variant=\"link\">\n          Remove system\n        </Button>\n      </Dropdown>\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsSystemDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  system: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nconst connected = withRouter(\n  connect(null, (dispatch) => ({\n    onDelete: (id, issue, system) =>\n      dispatch(deleteRemediationIssueSystem(id, issue, system)),\n  }))(RemediationDetailsSystemDropdown)\n);\n\nexport default connected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconInline.scss';\n\nexport const IconInline = ({ icon, text }) => {\n  return (\n    <div className=\"rem-c-icon-inline\">\n      {icon}\n      <span className=\"rem-c-icon-inline__text\">{text}</span>\n    </div>\n  );\n};\n\nIconInline.propTypes = {\n  icon: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\n\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n  ToolbarGroup,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\nimport reducers from '../../store/reducers';\nimport RemediationDetailsSystemDropdown from '../RemediationDetailsSystemDropdown';\nimport ConfirmationDialog from '../ConfirmationDialog';\nimport { getSystemName } from '../../Utilities/model';\nimport { IconInline } from '../Layouts/IconInline';\n\nexport const SystemsStatusModal = ({\n  isOpen,\n  onClose,\n  issue,\n  remediation,\n  onDelete,\n}) => {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [system, setSystem] = useState({});\n  const [systemStatuses, setSystemStatuses] = useState({});\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [filterText, setFilterText] = useState('');\n  const inventory = useRef(null);\n  const { current: urlBuilder } = useRef(inventoryUrlBuilder(issue));\n\n  useEffect(() => {\n    const statuses = {};\n    issue.systems.map((system) => {\n      statuses[system.id] =\n        system.resolved === true ? (\n          <IconInline icon={<CheckIcon />} text=\"Remediated\" />\n        ) : (\n          <IconInline icon={<TimesIcon />} text=\"Not remediated\" />\n        );\n    });\n    setSystemStatuses(statuses);\n  }, []);\n\n  // eslint-disable-next-line react/display-name\n  const detailDropdown = (remediation, issue) => (system) =>\n    (\n      <RemediationDetailsSystemDropdown\n        remediation={remediation}\n        issue={issue}\n        system={system}\n      />\n    );\n\n  const generateStatus = (id) => {\n    return systemStatuses[id];\n  };\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Modal\n        className=\"remediations\"\n        variant={ModalVariant.large}\n        title={`System${issue.systems.length > 1 ? 's' : ''} for action ${\n          issue.description\n        }`}\n        isOpen={isOpen}\n        onClose={onClose}\n        isFooterLeftAligned\n      >\n        <div className=\"rem-c-toolbar__filter\">\n          <InventoryTable\n            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) =>\n              getRegistry().register({\n                ...mergeWithEntities(\n                  reducers.inventoryEntitiesReducer({\n                    INVENTORY_ACTION_TYPES,\n                    detailDropdown: detailDropdown(remediation, issue),\n                    urlBuilder,\n                    generateStatus,\n                  })()\n                ),\n              })\n            }\n            ref={inventory}\n            items={orderBy(\n              issue.systems.filter((s) =>\n                getSystemName(s).includes(filterText)\n              ),\n              [(s) => getSystemName(s), (s) => s.id]\n            )}\n            onRefresh={onRefresh}\n            page={page}\n            total={issue.systems.length}\n            perPage={pageSize}\n            hasCheckbox={false}\n            actions={[\n              {\n                title: ' Remove system',\n                onClick: (event, rowId, rowData) => {\n                  setSystem(rowData);\n                  setDeleteDialogOpen(true);\n                },\n              },\n            ]}\n          >\n            <TableToolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <ConditionalFilter\n                    items={[\n                      {\n                        value: 'display_name',\n                        label: 'Name',\n                        filterValues: {\n                          placeholder: 'Search by name',\n                          type: conditionalFilterType.text,\n                          value: filterText,\n                          onChange: (e, selected) => setFilterText(selected),\n                        },\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </TableToolbar>\n          </InventoryTable>\n        </div>\n      </Modal>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`Removing the system ${getSystemName(system)} from the action ${\n          issue.description\n        }\n                    will remove this system’s remediation from the playbook.`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nSystemsStatusModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  issue: PropTypes.object,\n  remediation: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { SystemsStatusModal } from './Modals/SystemsStatusModal';\nimport './SystemForActionButton.scss';\n\nexport const SystemForActionButton = ({ issue, remediation, title }) => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setOpen(true)}>{title}</a>\n      <SystemsStatusModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        issue={issue}\n        remediation={remediation}\n        onDelete={(id, issue, system) =>\n          dispatch(deleteRemediationIssueSystem(id, issue, system))\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nSystemForActionButton.propTypes = {\n  issue: PropTypes.object.isRequired,\n  remediation: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","const debug = localStorage.getItem('remediations:debug') === 'true';\n\nexport const pagination = debug\n  ? {\n      perPageOptions: [1, 2, 3, 4, 5, 10, 15, 20, 25, 50, 100, 200].map(\n        (i) => ({ title: `${i}`, value: i })\n      ),\n    }\n  : {};\n","import React from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { appUrl } from '../../Utilities/urls';\n\nexport const EmptyActions = (filtered) => {\n  return (\n    <Bullseye className=\"pf-u-pt-2xl\">\n      <EmptyState>\n        {filtered.filtered === true ? (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            No actions found\n          </Title>\n        ) : (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            This playbook is empty\n          </Title>\n        )}\n        <EmptyStateBody>\n          To add an action, select issues identified in\n          <br />\n          <a href={appUrl('advisor').toString()}>Recommendations</a>,&nbsp;\n          <a href={appUrl('compliance').toString()}>Compliance</a> or&nbsp;\n          <a href={appUrl('vulnerabilities').toString()}>Vulnerability</a>&nbsp;\n          and select\n          <br />\n          <strong>Remediate with Ansible.</strong>\n        </EmptyStateBody>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyActions.propTypes = {\n  filtered: PropTypes.bool.isRequired,\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport flatMap from 'lodash/flatMap';\nimport orderBy from 'lodash/orderBy';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport {\n  sortable,\n  TableHeader,\n  Table,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\n\nimport { getIssueApplication, includesIgnoreCase } from '../Utilities/model';\nimport { buildIssueUrl } from '../Utilities/urls';\nimport './RemediationTable.scss';\n\nimport { ConnectResolutionEditButton } from '../containers/ConnectedComponents';\nimport { DeleteActionsButton } from '../containers/DeleteButtons';\nimport { SystemForActionButton } from './SystemForActionButton';\n\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport * as debug from '../Utilities/debug';\n\nimport './RemediationDetailsTable.scss';\nimport { PermissionContext } from '../App';\nimport { EmptyActions } from './EmptyStates/EmptyActions';\n\nfunction resolutionDescriptionCell(remediation, issue) {\n  const url = buildIssueUrl(issue.id);\n\n  if (issue.resolutions_available <= 1) {\n    return url ? (\n      <React.Fragment>\n        <span>\n          <a href={url}>{issue.description}</a>\n          <br />\n          {issue.resolution.description}\n        </span>\n      </React.Fragment>\n    ) : (\n      issue.resolution.description\n    );\n  }\n\n  return url ? (\n    <React.Fragment>\n      <span>\n        <a href={url}>{issue.description}</a>\n        <br />\n        {issue.resolution.description}\n        <br />\n        <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n      </span>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      {issue.resolution.description}\n      <br />\n      <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n    </React.Fragment>\n  );\n}\n\nfunction needsRebootCell(needsReboot) {\n  return <span>{needsReboot ? 'Required' : 'Not required'}</span>;\n}\n\nfunction systemsForAction(issue, remediation, title) {\n  return (\n    <SystemForActionButton\n      key={issue.id}\n      remediation={remediation}\n      issue={issue}\n      title={title}\n    />\n  );\n}\n\nfunction getResolvedSystems(issue) {\n  let count = 0;\n  issue.systems.map((system) => {\n    if (system.resolved) {\n      count++;\n    }\n  });\n  return count;\n}\n\nconst SORTING_ITERATEES = [\n  null, // checkboxes\n  (i) => i.description,\n  null, // resolution steps\n  (i) => i.resolution.needs_reboot,\n  (i) => i.systems.length,\n  (i) => getIssueApplication(i),\n];\n\nconst buildRow = (remediation) => (issue) => {\n  const row = [\n    {\n      isOpen: false,\n      id: issue.id,\n      cells: [\n        {\n          title: resolutionDescriptionCell(remediation, issue),\n        },\n        {\n          title: needsRebootCell(issue.resolution.needs_reboot),\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${issue.systems.length}`\n          ),\n        },\n        {\n          title: getIssueApplication(issue),\n          props: { className: 'rem-m-nowrap' },\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${getResolvedSystems(issue)}/${issue.systems.length} remediated`\n          ),\n        },\n      ],\n    },\n  ];\n\n  return row;\n};\n\nfunction RemediationDetailsTable(props) {\n  const pagination = usePagination();\n  const sorter = useSorter(1, 'asc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const { setActiveAlert } = props;\n  const permission = useContext(PermissionContext);\n  const [filterText, setFilterText] = useState('');\n  const [prevRemediationsCount, setPrevRemediationsCount] = useState(0); // eslint-disable-line\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  sorter.onChange(pagination.reset);\n  filter.onChange(pagination.reset);\n\n  const filtered = props.remediation.issues.filter((i) =>\n    includesIgnoreCase(i.description, filter.value.trim())\n  );\n  const sorted = orderBy(\n    filtered,\n    [SORTING_ITERATEES[sorter.sortBy]],\n    [sorter.sortDir]\n  );\n  const paged = sorted.slice(\n    pagination.offset,\n    pagination.offset + pagination.pageSize\n  );\n\n  const rows = flatMap(paged, buildRow(props.remediation));\n\n  selector.register(rows);\n  const selectedIds = selector.getSelectedIds();\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Action', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"test\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: [\n            {\n              label: 'Search actions',\n              type: 'text',\n              filterValues: {\n                id: 'filter-by-string',\n                key: 'filter-by-string',\n                placeholder: 'Search',\n                value: filterText,\n                onChange: (_e, value) => {\n                  setFilterText(value);\n                },\n              },\n            },\n          ],\n        }}\n        bulkSelect={{\n          items: [\n            {\n              title: 'Select all',\n              onClick: () => selector.props.onSelect('page', true, 0),\n            },\n            {\n              title: 'Select none',\n              onClick: () => selector.props.onSelect('none'),\n            },\n          ],\n          checked:\n            selectedIds.length && filtered.length > selectedIds.length\n              ? null\n              : selectedIds.length,\n          count: selectedIds.length,\n          onSelect: (isSelected, e) =>\n            selector.props.onSelect(e, isSelected, -1),\n        }}\n        actionsConfig={{\n          actions: [\n            <DeleteActionsButton\n              key={props.remediation.id}\n              variant=\"secondary\"\n              isDisabled={!selectedIds.length}\n              remediation={props.remediation}\n              issues={selectedIds}\n              afterDelete={() => {\n                setActiveAlert({\n                  key: generateUniqueId(),\n                  title: `Removed ${selectedIds.length} actions from ${props.remediation.name}`,\n                  description: '',\n                  variant: 'success',\n                });\n                selector.reset;\n              }}\n            />,\n          ],\n        }}\n        pagination={{ ...pagination.props, itemCount: filtered.length }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {rows.length > 0 ? (\n        <Table\n          variant={TableVariant.compact}\n          aria-label=\"Actions\"\n          canSelectAll={false}\n          className=\"ins-c-remediation-details-table\"\n          cells={[\n            {\n              title: 'Actions',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable],\n            },\n            {\n              title: 'Systems',\n              transforms: [sortable],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable],\n            },\n          ]}\n          rows={rows}\n          {...sorter.props}\n          {...(permission.permissions.write && { ...selector.props })}\n        >\n          <TableHeader />\n          <TableBody {...selector.tbodyProps} />\n        </Table>\n      ) : filter.value ? (\n        <EmptyActions filtered={true} />\n      ) : (\n        <EmptyActions filtered={false} />\n      )}\n      {rows.length > 0 && (\n        <TableToolbar isFooter>\n          <Pagination\n            variant=\"bottom\"\n            dropDirection=\"up\"\n            itemCount={filtered.length}\n            {...pagination.props}\n            {...debug.pagination}\n          />\n        </TableToolbar>\n      )}\n    </div>\n  );\n}\n\nRemediationDetailsTable.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  status: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default RemediationDetailsTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { pluralize } from '../statusHelper';\n\nconst RemoveSystemModal = ({\n  isOpen,\n  selected,\n  onConfirm,\n  onClose,\n  remediationName,\n}) => (\n  <Modal\n    variant={ModalVariant.medium}\n    title={`Remove selected systems from ${remediationName}`}\n    isOpen={isOpen}\n    onClose={onClose}\n    appendTo={document.getElementsByClassName('remediations')[0]}\n    actions={[\n      <Button\n        key=\"remove-confirm\"\n        variant=\"danger\"\n        onClick={onConfirm}\n        ouiaId=\"confirm-delete\"\n      >\n        Remove\n      </Button>,\n      <Button key=\"remove-cancel\" variant=\"link\" onClick={onClose}>\n        Cancel\n      </Button>,\n    ]}\n  >\n    <Split hasGutter>\n      <SplitItem>\n        <ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" />\n      </SplitItem>\n      <SplitItem isFilled>\n        <Stack hasGutter>\n          <StackItem>\n            This action will remove{' '}\n            {selected.length === 1 ? (\n              <span>\n                <b> {selected[0]?.display_name} </b> system\n              </span>\n            ) : (\n              <span>\n                <b> {selected.length} </b> systems\n              </span>\n            )}{' '}\n            from <b>{remediationName}</b> Remediation.\n          </StackItem>\n          <StackItem>\n            Removing {pluralize(selected.length, 'system')} from this\n            Remediation will remove it from all associated issues in{' '}\n            <b>{remediationName}</b> Remediation. Be careful as you can end up\n            with Remediation without any systems.\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  </Modal>\n);\n\nRemoveSystemModal.propTypes = {\n  selected: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      display_name: PropTypes.string,\n    })\n  ).isRequired,\n  remediationName: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default RemoveSystemModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\nconst RebootColumn = ({ rebootRequired }) => {\n  return (\n    <Fragment>\n      <span>{rebootRequired ? 'Required' : 'Not required'}</span>\n    </Fragment>\n  );\n};\n\nRebootColumn.propTypes = {\n  rebootRequired: PropTypes.bool,\n};\n\nexport default RebootColumn;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport RebootColumn from './RebootColumn';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\nimport { buildIssueUrl } from '../../Utilities/urls';\nimport sortBy from 'lodash/sortBy';\n\nconst issueType = {\n  advisor: 'Advisor recommendation',\n  vulnerabilities: 'Vulnerability',\n  'patch-advisory': 'Patch advisory',\n};\n\nconst sortByIndex = (issue) => [\n  issue.description,\n  issue.resolution.needs_reboot,\n  issueType?.[issue.id.split(':')[0]],\n  issue.resolved,\n];\n\nconst IssuesColumn = ({ issues, status, display_name }) => {\n  const [sortByConfig, setSortByConfig] = useState({\n    index: 0,\n    direction: 'asc',\n  });\n  const [isOpen, setIsOpen] = useState();\n  const StatusIcon = status ? CheckIcon : TimesIcon;\n  const sortedIssues = sortBy(\n    issues,\n    (sortIssue) => sortByIndex(sortIssue)[sortByConfig.index]\n  );\n  return (\n    <Fragment>\n      <Button variant=\"link\" isInline onClick={() => setIsOpen(true)}>\n        {issues.length}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        title={`Actions for system ${display_name}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Table\n          variant=\"compact\"\n          aria-label={`Issues table for ${display_name}`}\n          rows={(sortByConfig.direction === 'asc'\n            ? sortedIssues\n            : sortedIssues.reverse()\n          ).map((issue) => [\n            {\n              title: (\n                <Fragment>\n                  <div>\n                    <a variant=\"link\" isInline href={buildIssueUrl(issue.id)}>\n                      {issue.description}\n                    </a>\n                  </div>\n                  <div>{issue.resolution.description}</div>\n                </Fragment>\n              ),\n            },\n            {\n              title: (\n                <Fragment>\n                  <RebootColumn\n                    rebootRequired={issue.resolution.needs_reboot}\n                  />\n                </Fragment>\n              ),\n            },\n            issueType?.[issue.id.split(':')[0]] || 'Unknown',\n            {\n              title: (\n                <Fragment>\n                  <StatusIcon />{' '}\n                  {issue.resolved ? 'Remediated' : 'Not remediated'}\n                </Fragment>\n              ),\n            },\n          ])}\n          cells={[\n            {\n              title: 'Action',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable, cellWidth(20)],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable, cellWidth(15)],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable, cellWidth(20)],\n            },\n          ]}\n          sortBy={sortByConfig}\n          onSort={(_e, index, direction) =>\n            setSortByConfig({ index, direction })\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </Modal>\n    </Fragment>\n  );\n};\n\nIssuesColumn.propTypes = {\n  issues: PropTypes.arrayOf(PropTypes.shape()),\n  rebootRequired: PropTypes.bool,\n  status: PropTypes.bool,\n  display_name: PropTypes.string,\n};\n\nexport default IssuesColumn;\n","import React from 'react';\nimport IssuesColumn from './IssuesColumn';\nimport RebootColumn from './RebootColumn';\n\nexport default [\n  {\n    key: 'display_name',\n  },\n  {\n    key: 'tags',\n  },\n  {\n    key: 'system_profile',\n  },\n  {\n    key: 'issues',\n    title: 'Issues',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (issues, id, { display_name }) => (\n      <IssuesColumn issues={issues} id={id} display_name={display_name} />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n  {\n    key: 'rebootRequired',\n    title: 'Reboot required',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (rebootRequired) => (\n      <RebootColumn rebootRequired={rebootRequired} />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n];\n","import React, { useEffect, useRef, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { remediationSystems } from '../../store/reducers';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { deleteSystems, selectEntity, loadRemediation } from '../../actions';\nimport './SystemsTable.scss';\nimport RemoveSystemModal from './RemoveSystemModal';\nimport { generateUniqueId } from '../Alerts/PlaybookToastAlerts';\nimport {\n  calculateChecked,\n  calculateSystems,\n  fetchInventoryData,\n  mergedColumns,\n} from './helpers';\nimport systemsColumns from './Columns';\n\nconst SystemsTableWrapper = ({\n  remediation,\n  registry,\n  refreshRemediation,\n  setActiveAlert,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const systemsRef = useRef();\n  const getEntitiesRef = useRef(() => undefined);\n  const activeSystem = useRef(undefined);\n  const dispatch = useDispatch();\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n\n  const onConfirm = () => {\n    (async () => {\n      const selectedSystems =\n        selected.size > 0\n          ? Array.from(selected, ([, value]) => value)\n          : [\n              {\n                ...activeSystem.current,\n              },\n            ];\n      const action = deleteSystems(selectedSystems, remediation);\n      dispatch(action);\n      await action.payload;\n      refreshRemediation();\n    })();\n    activeSystem.current = undefined;\n    setActiveAlert({\n      key: generateUniqueId(),\n      title: `Removed ${selected.size} ${\n        selected.size > 1 ? 'systems' : 'system'\n      } from playbook`,\n      description: '',\n      variant: 'success',\n    });\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    systemsRef.current = calculateSystems(remediation);\n  }, [remediation.id]);\n\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      noDetail\n      hideFilters={{\n        all: true,\n        name: false,\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n      columns={(defaultColumns) =>\n        mergedColumns(defaultColumns, systemsColumns)\n      }\n      bulkSelect={{\n        count: selected ? selected.size : 0,\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: () => {\n              dispatch(selectEntity(-1, false));\n            },\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select page (${rows.length})`,\n                  onClick: () => {\n                    dispatch(selectEntity(0, true));\n                  },\n                }\n              : {}),\n          },\n        ],\n        checked: calculateChecked(rows, selected),\n        onSelect: (value) => {\n          dispatch(selectEntity(0, value));\n        },\n      }}\n      getEntities={async (_i, config) =>\n        fetchInventoryData(config, systemsRef.current, getEntitiesRef.current)\n      }\n      onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities, api }) => {\n        getEntitiesRef.current = api?.getEntities;\n        registry?.register?.({\n          ...mergeWithEntities(remediationSystems(INVENTORY_ACTION_TYPES)),\n        });\n      }}\n      actions={[\n        {\n          title: 'Remove system',\n          onClick: (_event, _index, { id, display_name }) => {\n            activeSystem.current = {\n              id,\n              display_name,\n              issues: remediation.issues.filter((issue) =>\n                issue.systems.find(({ id: systemId }) => systemId === id)\n              ),\n            };\n            setIsOpen(true);\n          },\n        },\n      ]}\n    >\n      {loaded && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsOpen(true)}\n          isDisabled={selected.size === 0}\n        >\n          Remove system\n        </Button>\n      )}\n      <RemoveSystemModal\n        isOpen={isOpen}\n        onConfirm={onConfirm}\n        selected={\n          selected.size > 0\n            ? Array.from(selected, ([, value]) => value)\n            : [activeSystem.current]\n        }\n        onClose={() => {\n          activeSystem.current = undefined;\n          setIsOpen(false);\n        }}\n        remediationName={remediation.name}\n      />\n    </InventoryTable>\n  );\n};\n\nconst SystemsTable = (props) => {\n  const dispatch = useDispatch();\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return registry ? (\n    <Provider store={registry.store}>\n      <SystemsTableWrapper\n        registry={registry}\n        refreshRemediation={() =>\n          dispatch(loadRemediation(props.remediation.id))\n        }\n        setActiveAlert={props.setActiveAlert}\n        {...props}\n      />\n    </Provider>\n  ) : (\n    <Fragment />\n  );\n};\n\nSystemsTable.propTypes = {\n  remediation: PropTypes.shape({\n    id: PropTypes.string,\n    issues: PropTypes.arrayOf(\n      PropTypes.shape({\n        systems: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string,\n            display_name: PropTypes.string,\n            resolved: PropTypes.bool,\n          })\n        ),\n      })\n    ),\n  }),\n};\n\nSystemsTableWrapper.propTypes = {\n  ...SystemsTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  refreshRemediation: PropTypes.func,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default SystemsTable;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  expandable,\n} from '@patternfly/react-table';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport { StatusSummary, normalizeStatus } from './statusHelper';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationActivityTable.scss';\n\nconst RemediationActivityTable = ({ remediation, playbookRuns }) => {\n  const [rows, setRows] = useState([]);\n  const permission = useContext(PermissionContext);\n\n  const generateRows = (playbookRuns) => {\n    return playbookRuns.reduce(\n      (acc, playbooks, i) => [\n        ...acc,\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: (\n                <Link to={`/${remediation.id}/${playbooks.id}`}>\n                  <DateFormat type=\"exact\" date={playbooks.created_at} />\n                </Link>\n              ),\n              cellFormatters: [expandable],\n            },\n            `${playbooks.created_by.first_name} ${playbooks.created_by.last_name}`,\n            {\n              title: (\n                <StatusSummary\n                  executorStatus={normalizeStatus(playbooks.status)}\n                  counts={playbooks.executors.reduce(\n                    (acc, ex) => ({\n                      pending: acc.pending + ex.counts.pending,\n                      running: acc.running + ex.counts.running,\n                      success: acc.success + ex.counts.success,\n                      failure: acc.failure + ex.counts.failure,\n                      canceled: acc.canceled + ex.counts.canceled,\n                      acked: acc.acked + ex.counts.acked,\n                    }),\n                    {\n                      pending: 0,\n                      running: 0,\n                      success: 0,\n                      failure: 0,\n                      canceled: 0,\n                      acked: 0,\n                    }\n                  )}\n                  hasCancel\n                  remediationName={remediation.name}\n                  remediationId={remediation.id}\n                  playbookId={playbooks.id}\n                  permission={permission}\n                />\n              ),\n            },\n          ],\n        },\n        {\n          parent: 2 * i,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <Table\n                  aria-label=\"Compact expandable table\"\n                  cells={['Connection', 'Systems', 'Playbook run status']}\n                  rows={playbooks.executors.map((e) => ({\n                    cells: [\n                      {\n                        title: (\n                          <Link\n                            to={`/${remediation.id}/${playbooks.id}/${e.executor_id}`}\n                          >\n                            {e.executor_name}\n                          </Link>\n                        ),\n                      },\n                      e.system_count,\n                      {\n                        title: (\n                          <StatusSummary\n                            executorStatus={normalizeStatus(e.status)}\n                            counts={e.counts}\n                            permission={permission}\n                          />\n                        ),\n                      },\n                    ],\n                  }))}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              ),\n            },\n          ],\n        },\n      ],\n      []\n    );\n  };\n\n  useEffect(() => {\n    if (playbookRuns && playbookRuns.length) {\n      setRows(() => generateRows(playbookRuns));\n    }\n  }, [playbookRuns]);\n\n  const handleOnCollapse = (event, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const columns = ['Run on', 'Run by', 'Status'];\n\n  return (\n    <Table\n      className=\"rem-c-activity-table\"\n      aria-label=\"Collapsible table\"\n      onCollapse={handleOnCollapse}\n      rows={rows}\n      cells={columns}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nRemediationActivityTable.propTypes = {\n  remediation: PropTypes.object,\n  playbookRuns: PropTypes.array,\n};\n\nexport default RemediationActivityTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  FormGroup,\n  Modal,\n  TextInput,\n  ModalVariant,\n} from '@patternfly/react-core';\n\nexport default function TextInputDialog(props) {\n  const [value, setValue] = useState(props.value || '');\n  const [valid, setValid] = useState(true);\n  const { title, onCancel, onSubmit, ariaLabel, className } = props;\n\n  function onChange(value) {\n    setValue(value);\n\n    if (props.pattern) {\n      setValid(props.pattern.test(value));\n    }\n  }\n\n  return (\n    <Modal\n      title={title}\n      isOpen={true}\n      onClose={(event) => onCancel(event)}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onSubmit(value)}\n          isDisabled={!valid}\n          ouiaId=\"save\"\n        >\n          Save\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"secondary\"\n          onClick={onCancel}\n          ouiaId=\"cancel\"\n        >\n          Cancel\n        </Button>,\n      ]}\n      variant={ModalVariant.small}\n      className={className}\n    >\n      <FormGroup\n        fieldId=\"remediation-name\"\n        helperTextInvalid=\"Playbook name has to contain alphanumeric characters\"\n        isValid={valid}\n      >\n        <TextInput\n          value={value}\n          type=\"text\"\n          onChange={onChange}\n          aria-label={ariaLabel || 'input text'}\n          autoFocus\n          isValid={valid}\n        />\n      </FormGroup>\n    </Modal>\n  );\n}\n\nTextInputDialog.propTypes = {\n  title: PropTypes.string.isRequired,\n  onCancel: PropTypes.func,\n  onSubmit: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n  pattern: PropTypes.instanceOf(RegExp),\n};\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport TextInputDialog from './Dialogs/TextInputDialog';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\nimport { deleteRemediation, patchRemediation } from '../actions';\n\nimport { PermissionContext } from '../App';\n\nconst playbookNamePattern = /^$|^.*[\\w\\d]+.*$/;\nconst EMPTY_NAME = 'Unnamed Playbook';\n\nfunction RemediationDetailsDropdown({\n  remediation,\n  onRename,\n  onDelete,\n  setActiveAlert,\n}) {\n  const [open, setOpen] = useState(false);\n  const [renameDialogOpen, setRenameDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const permission = useContext(PermissionContext);\n\n  return (\n    <React.Fragment>\n      {renameDialogOpen && (\n        <TextInputDialog\n          title=\"Edit playbook name\"\n          ariaLabel=\"Playbook name\"\n          value={remediation.name}\n          onCancel={() => setRenameDialogOpen(false)}\n          onSubmit={(name) => {\n            setRenameDialogOpen(false);\n            onRename(remediation.id, name);\n            setActiveAlert({\n              key: generateUniqueId(),\n              title: `Updated playbook name to ${name}`,\n              description: '',\n              variant: 'success',\n            });\n          }}\n          pattern={playbookNamePattern}\n        />\n      )}\n\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        title=\"Remove playbook?\"\n        text=\"You will not be able to recover this Playbook\"\n        confirmText=\"Remove playbook\"\n        onClose={(confirm) => {\n          setDeleteDialogOpen(false);\n          if (confirm) {\n            onDelete(remediation.id);\n            setActiveAlert({\n              key: generateUniqueId(),\n              title: `Deleted playbook ${remediation.name}`,\n              variant: 'success',\n            });\n          }\n        }}\n      />\n\n      {permission.permissions.write && (\n        <Dropdown\n          onSelect={(f) => f}\n          toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n          isOpen={open}\n          position={DropdownPosition.right}\n          isPlain\n        >\n          <Button onClick={() => setRenameDialogOpen(true)} variant=\"link\">\n            Rename\n          </Button>\n          <Button\n            className=\" rem-c-button__danger-link\"\n            onClick={() => setDeleteDialogOpen(true)}\n            variant=\"link\"\n          >\n            Delete\n          </Button>\n        </Dropdown>\n      )}\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  onRename: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nconst connected = withRouter(\n  connect(null, (dispatch, { history }) => ({\n    onRename: (id, name) => {\n      if (!name) {\n        name = EMPTY_NAME;\n      }\n\n      dispatch(patchRemediation(id, { name }));\n    },\n    onDelete: async (id) => {\n      await dispatch(deleteRemediation(id));\n      history.push('/');\n    },\n  }))(RemediationDetailsDropdown)\n);\n\nexport default connected;\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport './ExecuteButton.scss';\nimport './Status.scss';\n\nconst ExecuteButton = ({\n  isLoading,\n  isDisabled,\n  disabledStateText,\n  data,\n  getConnectionStatus,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  remediationStatus,\n  setEtag,\n  setActiveAlert,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n\n  const isEnabled = () =>\n    true || localStorage.getItem('remediations:fifi:debug') === 'true';\n\n  useEffect(() => {\n    if (remediationStatus === 'changed') {\n      getConnectionStatus(remediationId);\n      setShowRefreshMessage(true);\n    } else if (remediationStatus === 'fulfilled') {\n      setOpen(false);\n    }\n  }, [remediationStatus]);\n\n  const buttonWithTooltip = () => {\n    return isDisabled ? (\n      <Tooltip content={disabledStateText} position=\"auto\">\n        <Button isAriaDisabled>Execute playbook</Button>\n      </Tooltip>\n    ) : (\n      <Button\n        onClick={() => {\n          setOpen(true);\n          getConnectionStatus(remediationId);\n        }}\n      >\n        Execute playbook\n      </Button>\n    );\n  };\n\n  return isEnabled() ? (\n    <React.Fragment>\n      {buttonWithTooltip()}\n      {open && (\n        <ExecuteModal\n          isOpen={open}\n          onClose={() => {\n            setShowRefreshMessage(false);\n            setOpen(false);\n          }}\n          showRefresh={showRefreshMessage}\n          remediationId={remediationId}\n          remediationName={remediationName}\n          data={data}\n          etag={etag}\n          isLoading={isLoading}\n          issueCount={issueCount}\n          runRemediation={runRemediation}\n          setEtag={setEtag}\n          setActiveAlert={setActiveAlert}\n        />\n      )}\n    </React.Fragment>\n  ) : null;\n};\n\nExecuteButton.propTypes = {\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  getConnectionStatus: PropTypes.func,\n  runRemediation: PropTypes.func,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  remediationStatus: PropTypes.string,\n  issueCount: PropTypes.number,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  disabledStateText: PropTypes.string,\n  setActiveAlert: PropTypes.func,\n};\n\nExecuteButton.defaultProps = {\n  data: [],\n  isDisabled: false,\n};\n\nexport default ExecuteButton;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  getEndpoint,\n  checkExecutable,\n} from '../actions';\n\nimport ExecuteButton from '../components/ExecuteButton';\n\nexport const ExecutePlaybookButton = withRouter(\n  connect(\n    ({\n      connectionStatus: { data, status, etag },\n      selectedRemediation,\n      runRemediation,\n      sources,\n      executable,\n    }) => ({\n      data,\n      isLoading: status !== 'fulfilled',\n      issueCount: selectedRemediation.remediation.issues.length,\n      etag,\n      remediationStatus: runRemediation.status,\n      sources,\n      executable,\n    }),\n    (dispatch) => ({\n      getConnectionStatus: (id) => {\n        dispatch(getConnectionStatus(id));\n      },\n      runRemediation: (id, etag, exclude) => {\n        dispatch(runRemediation(id, etag, exclude)).then(() =>\n          dispatch(getPlaybookRuns(id))\n        );\n      },\n      setEtag: (etag) => {\n        dispatch(setEtag(etag));\n      },\n      getEndpoint: (id) => {\n        dispatch(getEndpoint(id));\n      },\n      checkExecutable: (id) => {\n        dispatch(checkExecutable(id));\n      },\n    })\n  )(ExecuteButton)\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst UpsellBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Put Insights into action\"\n      actionClose={<AlertActionCloseButton onClose={onClose} />}\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Enable push-button remediation across your hybrid cloud environment\n          with Red Hat Smart Management.\n        </StackItem>\n        <StackItem>\n          <a href=\"https://www.redhat.com/en/technologies/management/smart-management\">\n            Learn more\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default UpsellBanner;\n\nUpsellBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nUpsellBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React from 'react';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { CloudIcon } from '@patternfly/react-icons';\n\n// TODO: Fill Learn more link\n\nconst ActivityTabUpsell = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={CloudIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Get more with Find it Fix it capabilities\n      </Title>\n      <EmptyStateBody>\n        Upgrade to Red Hat Smart Management to remediate all your systems,\n        across regions and geographies directly from Red Hat Insights.\n      </EmptyStateBody>\n      <Button\n        variant=\"link\"\n        component=\"a\"\n        ouiaId=\"learn_more\"\n        href=\"https://www.redhat.com/en/technologies/management/smart-management\"\n      >\n        Learn more\n      </Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivityTabUpsell;\n","import React, { Fragment } from 'react';\nimport { Toolbar, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { Button, InputGroup, TextInput } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nconst SkeletonTableToolbar = () => {\n  const items = (\n    <Fragment>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <DropdownToggle\n              isDisabled\n              splitButtonItems={[\n                <DropdownToggleCheckbox\n                  id=\"skeleton-dropdown\"\n                  key=\"skeleton-dropdown\"\n                  aria-label=\"Loading Select all\"\n                />,\n              ]}\n              id=\"skeleton-dropdown-toggle\"\n            />\n          }\n        />\n      </ToolbarItem>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            value=\"Search\"\n            isDisabled\n            name=\"skeleton-search\"\n            id=\"skeleton-search\"\n            type=\"search\"\n            aria-label=\"search loading\"\n          />\n          <Button\n            isDisabled\n            variant=\"control\"\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button isDisabled variant=\"primary\">\n          Remove action\n        </Button>\n      </ToolbarItem>\n    </Fragment>\n  );\n\n  return (\n    <Toolbar id=\"skeleton-toolbar\">\n      <ToolbarContent> {items} </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default SkeletonTableToolbar;\n","import React from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst SkeletonTabs = () => {\n  return (\n    <Tabs activeKey={0} className=\"ins-s-tabs\">\n      <Tab eventKey={0} title={<TabTitleText>Actions</TabTitleText>} />\n      <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>} />\n      <Tab eventKey={2} title={<TabTitleText>Activity</TabTitleText>} />\n    </Tabs>\n  );\n};\n\nexport default SkeletonTabs;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport SkeletonTable from './SkeletonTable';\nimport SkeletonTableToolbar from './SkeletonTableToolbar';\nimport SkeletonTabs from './SkeletonTabs';\n\nimport {\n  Dropdown,\n  KebabToggle,\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst RemediationDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"rem-c-page-details__header\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to=\"/\"> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Level className=\"rem-l-level\">\n          <LevelItem>\n            <PageHeaderTitle\n              className=\"rem-s-page-header\"\n              title={\n                <React.Fragment>\n                  <Skeleton size=\"md\" />\n                </React.Fragment>\n              }\n            />\n          </LevelItem>\n          <LevelItem>\n            <Split hasGutter>\n              <SplitItem>\n                <Button isDisabled variant=\"link\">\n                  Download playbook\n                </Button>\n              </SplitItem>\n              <SplitItem>\n                <Dropdown\n                  toggle={<KebabToggle isDisabled={true} />}\n                  isOpen={false}\n                  isPlain\n                />\n              </SplitItem>\n            </Split>\n          </LevelItem>\n        </Level>\n        <RemediationSummarySkeleton />\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <StackItem className=\"ins-c-playbookSummary__tabs\">\n            <SkeletonTabs />\n            <SkeletonTableToolbar />\n            <SkeletonTable />\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default RemediationDetailsSkeleton;\n\nconst RemediationSummarySkeleton = () => {\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{ x: 'Resolved', y: 1 }}\n          labels={({ datum }) => (datum.x ? `${datum.x}: ${datum.y}%` : null)}\n          title={'Loading'}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Latest activity\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacer-lg' }}>\n                <DescriptionList title=\"Autoreboot\">\n                  <Skeleton size=\"md\" />\n                </DescriptionList>\n              </FlexItem>\n            </Flex>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n","import React from 'react';\n\nimport { EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nimport './EmptyActivityTable.scss';\n\nconst EmptyActivityTable = () => (\n  <Table\n    aria-label=\"No activity\"\n    cells={['Run on', 'Run by', 'Status']}\n    ouiaId=\"activity-table\"\n    rows={[\n      {\n        cells: [\n          {\n            title: (\n              <EmptyState className=\"rem-c-activity-table__empty\">\n                <Title headingLevel=\"h5\" size=\"lg\">\n                  No activity\n                </Title>\n                <EmptyStateBody>\n                  Execute this playbook to see a history and summary of the\n                  activity.\n                </EmptyStateBody>\n              </EmptyState>\n            ),\n            props: { colSpan: 3 },\n          },\n        ],\n      },\n    ]}\n  >\n    <TableHeader />\n    <TableBody />\n  </Table>\n);\n\nexport default EmptyActivityTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\nimport {\n  CheckCircleIcon,\n  OffIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport DescriptionList from '../components/Layouts/DescriptionList';\nimport classnames from 'classnames';\nimport { StatusSummary } from '../components/statusHelper';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport './RemediationSummary.scss';\n\nexport const RemediationSummary = ({\n  remediation,\n  playbookRuns,\n  switchAutoReboot,\n  context,\n}) => {\n  const handleRebootChange = (autoReboot) => {\n    switchAutoReboot(remediation.id, autoReboot);\n  };\n\n  const generateNumIssuesReboot = () => {\n    let count = 0;\n    for (const issue of remediation.issues) {\n      if (issue.resolution.needs_reboot) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  const generateNumRebootString = (num) => {\n    return `${num} issue${num === 1 ? '' : 's'} require${\n      num === 1 ? 's' : ''\n    } reboot to remediate`;\n  };\n\n  const pluralize = (number, str) =>\n    number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\n  const rebootEnabled = () => {\n    return (\n      <div>\n        <CheckCircleIcon className=\"rem-c-success\" />\n        <b className=\"ins-c-remediation-summary__reboot--enabled\"> Enabled </b>\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn off\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const rebootDisabled = (required) => {\n    return (\n      <div>\n        <OffIcon />\n        <b\n          className={`ins-c-remediation-summary__reboot--disabled${\n            required ? '--warning' : ''\n          }`}\n        >\n          Off\n        </b>\n        {required && (\n          <React.Fragment>\n            <ExclamationTriangleIcon className=\"ins-c-remediation-summary__reboot--required--icon\" />\n            <b className=\"ins-c-remediation-summary__reboot--required\">\n              {generateNumRebootString(generateNumIssuesReboot())}\n            </b>\n          </React.Fragment>\n        )}\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn on\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const generateAutoRebootStatus = (status, needsReboot) => {\n    return status ? rebootEnabled() : rebootDisabled(needsReboot);\n  };\n\n  const renderAutoReboot = (remediation) => {\n    return (\n      <DescriptionList\n        className=\"rem-c-playbookSummary__settings\"\n        title=\"Autoreboot\"\n      >\n        <Flex>\n          <FlexItem\n            className={classnames(\n              'ins-c-reboot-status',\n              {\n                'ins-c-reboot-status__enabled':\n                  remediation.auto_reboot && remediation.needs_reboot,\n              },\n              { 'ins-c-reboot-status__disabled': !remediation.auto_reboot }\n            )}\n            spacer={{ default: 'spacer-xl' }}\n          >\n            {generateAutoRebootStatus(\n              remediation.auto_reboot,\n              remediation.needs_reboot\n            )}\n          </FlexItem>\n        </Flex>\n      </DescriptionList>\n    );\n  };\n\n  const renderLatestActivity = (playbookRuns) => {\n    if (playbookRuns.length) {\n      const mostRecent = playbookRuns[0];\n      return (\n        <FlexItem spacer={{ default: 'spacer-xl' }}>\n          <DescriptionList\n            needsPointer\n            className=\"rem-c-description-list-latest-activity\"\n            title=\"Latest activity\"\n          >\n            <StatusSummary\n              executorStatus={mostRecent.status}\n              counts={mostRecent.executors.reduce(\n                (acc, ex) => ({\n                  pending: acc.pending + ex.counts.pending,\n                  running: acc.running + ex.counts.running,\n                  success: acc.success + ex.counts.success,\n                  failure: acc.failure + ex.counts.failure,\n                  canceled: acc.canceled + ex.counts.canceled,\n                  acked: acc.acked + ex.counts.acked,\n                }),\n                {\n                  pending: 0,\n                  running: 0,\n                  success: 0,\n                  failure: 0,\n                  canceled: 0,\n                  acked: 0,\n                }\n              )}\n              permission={{}}\n            />\n            <span className=\"rem-c-description-list-latest-activity__date\">\n              <DateFormat type=\"relative\" date={mostRecent.updated_at} />\n            </span>\n            <Link to={`/${mostRecent.remediation_id}/${mostRecent.id}`}>\n              View\n            </Link>\n          </DescriptionList>\n        </FlexItem>\n      );\n    }\n  };\n\n  const getResolvedCount = (issues) => {\n    let count = 0;\n    issues.map((i) => i.systems.every((s) => s.resolved) && count++);\n    return count;\n  };\n\n  const { stats } = remediation;\n\n  const totalSystems = stats.systemsWithReboot + stats.systemsWithoutReboot;\n\n  const resolvedCount = getResolvedCount(remediation.issues);\n\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{\n            x: 'Resolved',\n            y: (resolvedCount / remediation.issues.length) * 100,\n          }}\n          labels={({ data }) => (data.x ? `${data.x}: ${data.y}%` : null)}\n          title={`${resolvedCount}/${remediation.issues.length}`}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      {pluralize(totalSystems, 'system')}\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  {playbookRuns && renderLatestActivity(playbookRuns)}\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>{renderAutoReboot(remediation)}</StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRemediationSummary.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  playbookRuns: PropTypes.array,\n  switchAutoReboot: PropTypes.func.isRequired,\n  context: PropTypes.object.isRequired,\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\nimport RemediationDetailsTable from '../components/RemediationDetailsTable';\nimport SystemsTable from '../components/SystemsTable/SystemsTable';\nimport RemediationActivityTable from '../components/RemediationActivityTable';\nimport RemediationDetailsDropdown from '../components/RemediationDetailsDropdown';\nimport { normalizeStatus } from '../components/statusHelper';\nimport { isBeta } from '../config';\nimport { ExecutePlaybookButton } from '../containers/ExecuteButtons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport UpsellBanner from '../components/Alerts/UpsellBanner';\nimport ActivityTabUpsell from '../components/EmptyStates/ActivityTabUpsell';\nimport DeniedState from '../components/DeniedState';\nimport SkeletonTable from '../skeletons/SkeletonTable';\nimport PlaybookToastAlerts, {\n  generateUniqueId,\n} from '../components/Alerts/PlaybookToastAlerts';\nimport '../components/Status.scss';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Split,\n  SplitItem,\n  Tabs,\n  Tab,\n} from '@patternfly/react-core';\n\nimport RemediationDetailsSkeleton from '../skeletons/RemediationDetailsSkeleton';\nimport EmptyActivityTable from '../components/EmptyStates/EmptyActivityTable';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationDetails.scss';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport { RemediationSummary } from '../components/RemediationSummary';\n\nconst tabMapper = ['issues', 'systems', 'activity'];\n\nconst RemediationDetails = ({\n  match,\n  location,\n  selectedRemediation,\n  selectedRemediationStatus,\n  history,\n  loadRemediation,\n  loadRemediationStatus,\n  switchAutoReboot,\n  playbookRuns,\n  getPlaybookRuns,\n  checkExecutable,\n  executable,\n}) => {\n  const id = match.params.id;\n  const [upsellBannerVisible, setUpsellBannerVisible] = useState(\n    localStorage.getItem('remediations:bannerStatus') !== 'dismissed'\n  );\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const [activeTabKey, setActiveTabKey] = useState(0);\n  const [activeToastAlert, setActiveToastAlert] = useState({\n    key: '',\n    title: '',\n    description: '',\n    variant: '',\n  });\n\n  const context = useContext(PermissionContext);\n\n  const { isFedramp } = useChrome();\n  const handleUpsellToggle = () => {\n    setUpsellBannerVisible(false);\n    localStorage.setItem('remediations:bannerStatus', 'dismissed');\n  };\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n    history.push(`?${tabMapper[tabIndex]}`);\n  };\n\n  const getDisabledStateText = () => {\n    if (!context.permissions.execute) {\n      return 'You do not have the required execute permissions to perform this action.';\n    } else if (!executable) {\n      return 'Your account must be entitled to Smart Management to execute playbooks.';\n    }\n    return 'Unable to execute playbook.';\n  };\n\n  useEffect(() => {\n    loadRemediation(id).catch((e) => {\n      if (e && e.response && e.response.status === 404) {\n        history.push('/');\n        return;\n      }\n\n      throw e;\n    });\n\n    const tabIndex = tabMapper.findIndex(\n      (item) => item === location.search.split('?')[1]\n    );\n    setActiveTabKey(tabIndex !== -1 ? tabIndex : 0);\n    history.push(`?${tabMapper[tabIndex !== -1 ? tabIndex : 0]}`);\n\n    if (isBeta) {\n      loadRemediationStatus(id);\n    }\n    checkExecutable(id);\n  }, []);\n\n  useEffect(() => {\n    getPlaybookRuns(id);\n  }, [getPlaybookRuns]);\n\n  useEffect(() => {\n    playbookRuns;\n    if (\n      playbookRuns &&\n      playbookRuns.length &&\n      normalizeStatus(playbookRuns[0].status) === 'running'\n    ) {\n      const interval = setInterval(() => getPlaybookRuns(id), 10000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playbookRuns]);\n\n  const renderActivityState = (isEntitled, playbookRuns, remediation) => {\n    if (!isEntitled) {\n      return <ActivityTabUpsell />;\n    }\n\n    if (Array.isArray(playbookRuns) && playbookRuns.length) {\n      return (\n        <RemediationActivityTable\n          remediation={remediation}\n          playbookRuns={playbookRuns}\n        />\n      );\n    }\n\n    if (Array.isArray(playbookRuns) && !playbookRuns.length) {\n      return <EmptyActivityTable />;\n    }\n\n    return <SkeletonTable />;\n  };\n\n  const { status, remediation } = selectedRemediation;\n\n  if (remediation) {\n    document.title = `${remediation.name} | Remediations | Red Hat Insights`;\n  }\n\n  if (status !== 'fulfilled' && status !== 'rejected') {\n    return <RemediationDetailsSkeleton />;\n  }\n\n  if (status === 'rejected') {\n    return <InvalidObject />;\n  }\n\n  if (status === 'fulfilled') {\n    return context.permissions.read === false ? (\n      <DeniedState />\n    ) : (\n      <div className=\"page__remediation-details\">\n        <PageHeader>\n          {activeToastAlert.title && (\n            <PlaybookToastAlerts\n              key={activeToastAlert.key}\n              title={activeToastAlert.title}\n              description={activeToastAlert.description}\n              variant={activeToastAlert.variant}\n            />\n          )}\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to=\"/\"> Remediations </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive> {remediation.name} </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className=\"rem-l-level\">\n            <LevelItem>\n              <PageHeaderTitle title={remediation.name} />\n            </LevelItem>\n            <LevelItem>\n              <Split hasGutter>\n                <SplitItem>\n                  <ExecutePlaybookButton\n                    isDisabled={\n                      !context.permissions.execute || !executable || isFedramp\n                    }\n                    disabledStateText={getDisabledStateText()}\n                    remediationId={remediation.id}\n                    remediationName={remediation.name}\n                    setActiveAlert={setActiveToastAlert}\n                  ></ExecutePlaybookButton>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    isDisabled={!remediation.issues.length}\n                    variant=\"secondary\"\n                    onClick={() => {\n                      downloadPlaybook(remediation.id);\n                      setActiveToastAlert({\n                        key: generateUniqueId(),\n                        title: 'Preparing playbook for download.',\n                        description:\n                          'Once complete, your download will start automatically.',\n                        variant: 'info',\n                      });\n                    }}\n                  >\n                    Download playbook\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <RemediationDetailsDropdown\n                    remediation={remediation}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </SplitItem>\n              </Split>\n            </LevelItem>\n          </Level>\n          <RemediationSummary\n            remediation={remediation}\n            playbookRuns={playbookRuns}\n            switchAutoReboot={switchAutoReboot}\n            context={context}\n          />\n        </PageHeader>\n        <Main>\n          <Stack hasGutter>\n            {!executable && upsellBannerVisible && (\n              <StackItem>\n                <UpsellBanner onClose={() => handleUpsellToggle()} />\n              </StackItem>\n            )}\n            {executable && noReceptorBannerVisible && (\n              <StackItem>\n                <NoReceptorBanner onClose={() => handleNoReceptorToggle()} />\n              </StackItem>\n            )}\n            <StackItem className=\"ins-c-playbookSummary__tabs\">\n              <Tabs activeKey={activeTabKey} onSelect={handleTabClick}>\n                <Tab eventKey={0} title=\"Actions\">\n                  <RemediationDetailsTable\n                    remediation={remediation}\n                    status={selectedRemediationStatus}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </Tab>\n                <Tab eventKey={1} title=\"Systems\">\n                  <SystemsTable\n                    remediation={remediation}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </Tab>\n                <Tab eventKey={2} title=\"Activity\">\n                  {renderActivityState(executable, playbookRuns, remediation)}\n                </Tab>\n              </Tabs>\n            </StackItem>\n          </Stack>\n        </Main>\n      </div>\n    );\n  }\n};\n\nRemediationDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n  location: PropTypes.object,\n  selectedRemediation: PropTypes.object,\n  selectedRemediationStatus: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  loadRemediationStatus: PropTypes.func.isRequired,\n  switchAutoReboot: PropTypes.func.isRequired,\n  deleteRemediation: PropTypes.func.isRequired,\n  executePlaybookBanner: PropTypes.shape({\n    isVisible: PropTypes.bool,\n  }),\n  addNotification: PropTypes.func.isRequired,\n  playbookRuns: PropTypes.array,\n  getPlaybookRuns: PropTypes.func,\n  checkExecutable: PropTypes.func,\n};\n\nexport default withRouter(\n  connect(\n    ({\n      selectedRemediation,\n      selectedRemediationStatus,\n      executePlaybookBanner,\n      playbookRuns,\n      executable,\n    }) => ({\n      selectedRemediation,\n      selectedRemediationStatus,\n      executePlaybookBanner,\n      playbookRuns: playbookRuns.data,\n      remediation: selectedRemediation.remediation,\n      executable,\n    }),\n    (dispatch) => ({\n      loadRemediation: (id) => dispatch(actions.loadRemediation(id)),\n      loadRemediationStatus: (id) =>\n        dispatch(actions.loadRemediationStatus(id)),\n      // eslint-disable-next-line camelcase\n      switchAutoReboot: (id, auto_reboot) =>\n        dispatch(actions.patchRemediation(id, { auto_reboot })),\n      deleteRemediation: (id) => dispatch(actions.deleteRemediation(id)),\n      addNotification: (content) => dispatch(addNotification(content)),\n      getPlaybookRuns: (id) => dispatch(actions.getPlaybookRuns(id)),\n      checkExecutable: (id) => dispatch(actions.checkExecutable(id)),\n    })\n  )(RemediationDetails)\n);\n","import React, { Fragment } from 'react';\nimport { Table, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["getIssuePrefix","id","split","getIssueApplication","getSystemName","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","buildIssueUrl","parts","segment","app","urijs","document","baseURI","pathName","window","location","pathname","Error","DescriptionList","title","className","children","isBold","hasGutter","needsPointer","props","descriptionListClasses","classnames","mainClasses","propTypes","calculateChecked","rows","selected","every","has","length","some","calculateSystems","remediation","issues","reduce","acc","curr","systems","forEach","host","found","find","resolution","description","resolved","rebootRequired","needs_reboot","push","fetchInventoryData","getEntities","page","config","currSystems","filter","filters","hostnameOrId","slice","per_page","map","hasItems","data","results","total","mergedColumns","defaultColumns","customColumns","column","invColumn","key","ResolutionStep","setState","state","resolutions","this","getResolutions","value","resolutionsDisplay","StackItem","Form","Radio","label","Stack","Reboot","red","name","defaultChecked","onChange","onRadioChange","Skeleton","Split","SplitItem","Label","isFilled","Component","PropTypes","ResolutionEditButton","onResolutionSelected","useState","isOpen","setIsOpen","resolutionStep","useRef","onClick","Modal","variant","ModalVariant","onClose","actions","Button","result","current","getSelectedResolution","ref","ConnectResolutionEditButton","connect","f","dispatch","patchRemediationIssue","refreshRemediation","ruleId","DeleteButton","dialogOpen","onDelete","onButtonClicked","isDisabled","ConfirmationDialog","dialogTitle","confirmText","dialogConfirmationText","dialogMessage","onDialogClose","defaultProps","withRouter","remediations","Promise","all","r","deleteRemediation","loadRemediations","DeleteActionsButton","afterDelete","issueId","deleteRemediationIssue","isBeta","loadRemediationStatus","RemediationDetailsSystemDropdown","system","setActiveAlert","open","setOpen","deleteDialogOpen","setDeleteDialogOpen","generateUniqueId","Dropdown","onSelect","toggle","KebabToggle","onToggle","position","DropdownPosition","isPlain","deleteRemediationIssueSystem","IconInline","icon","SystemsStatusModal","setSystem","systemStatuses","setSystemStatuses","setPage","pageSize","setPageSize","filterText","setFilterText","inventory","urlBuilder","useEffect","statuses","CheckIcon","TimesIcon","detailDropdown","generateStatus","isFooterLeftAligned","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","reducers","items","orderBy","s","onRefresh","options","onRefreshData","perPage","hasCheckbox","event","rowId","rowData","TableToolbar","ToolbarGroup","ToolbarItem","ConditionalFilter","filterValues","placeholder","type","conditionalFilterType","e","SystemForActionButton","useDispatch","pagination","localStorage","getItem","perPageOptions","i","EmptyActions","filtered","Bullseye","EmptyState","Title","size","headingLevel","EmptyStateBody","href","resolutionDescriptionCell","url","resolutions_available","systemsForAction","getResolvedSystems","count","SORTING_ITERATEES","RemediationDetailsTable","usePagination","sorter","useSorter","useFilter","selector","useSelector","permission","useContext","PermissionContext","setValue","reset","trim","paged","sortBy","sortDir","offset","flatMap","needsReboot","cells","selectedIds","getSelectedIds","activeFiltersConfig","category","chips","PrimaryToolbar","filterConfig","_e","bulkSelect","checked","isSelected","actionsConfig","itemCount","Table","TableVariant","canSelectAll","transforms","sortable","permissions","write","TableHeader","TableBody","tbodyProps","isFooter","Pagination","dropDirection","debug","status","RemoveSystemModal","onConfirm","remediationName","appendTo","getElementsByClassName","ouiaId","ExclamationTriangleIcon","pluralize","isRequired","RebootColumn","Fragment","issueType","advisor","vulnerabilities","IssuesColumn","index","direction","sortByConfig","setSortByConfig","StatusIcon","sortedIssues","sortIssue","isInline","reverse","cellWidth","onSort","renderFunc","width","isStatic","SystemsTableWrapper","registry","systemsRef","getEntitiesRef","activeSystem","undefined","entities","Map","loaded","showTags","noDetail","hideFilters","tableProps","columns","systemsColumns","selectEntity","_i","api","remediationSystems","_event","_index","selectedSystems","Array","from","action","deleteSystems","payload","SystemsTable","setRegistry","ReducerRegistry","promiseMiddleware","Provider","store","loadRemediation","RemediationActivityTable","playbookRuns","setRows","playbooks","Link","to","DateFormat","date","created_at","cellFormatters","expandable","created_by","first_name","last_name","executorStatus","normalizeStatus","counts","executors","ex","pending","running","success","failure","canceled","acked","hasCancel","remediationId","playbookId","parent","fullWidth","executor_id","executor_name","system_count","generateRows","onCollapse","collapseRows","TextInputDialog","valid","setValid","onCancel","onSubmit","ariaLabel","FormGroup","fieldId","helperTextInvalid","isValid","TextInput","pattern","test","autoFocus","RegExp","playbookNamePattern","RemediationDetailsDropdown","onRename","renameDialogOpen","setRenameDialogOpen","confirm","history","patchRemediation","ExecuteButton","isLoading","disabledStateText","getConnectionStatus","issueCount","runRemediation","etag","remediationStatus","setEtag","showRefreshMessage","setShowRefreshMessage","Tooltip","content","isAriaDisabled","ExecuteModal","showRefresh","ExecutePlaybookButton","connectionStatus","selectedRemediation","sources","executable","exclude","then","getPlaybookRuns","getEndpoint","checkExecutable","UpsellBanner","Alert","actionClose","AlertActionCloseButton","EmptyStateIcon","CloudIcon","component","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","InputGroup","Toolbar","ToolbarContent","Tabs","activeKey","Tab","eventKey","TabTitleText","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Level","LevelItem","PageHeaderTitle","RemediationSummarySkeleton","Main","SkeletonTable","ChartDonutUtilization","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","subTitle","subTitleComponent","ChartLabel","thresholds","color","height","padding","bottom","left","right","top","Flex","FlexItem","spacer","default","colSpan","RemediationSummary","number","str","switchAutoReboot","context","handleRebootChange","autoReboot","rebootDisabled","required","OffIcon","num","generateNumIssuesReboot","auto_reboot","generateAutoRebootStatus","CheckCircleIcon","stats","totalSystems","systemsWithReboot","systemsWithoutReboot","resolvedCount","mostRecent","updated_at","remediation_id","renderLatestActivity","renderAutoReboot","tabMapper","RemediationDetails","match","selectedRemediationStatus","params","upsellBannerVisible","setUpsellBannerVisible","noReceptorBannerVisible","setNoReceptorBannerVisible","activeTabKey","setActiveTabKey","activeToastAlert","setActiveToastAlert","isFedramp","useChrome","response","tabIndex","findIndex","item","search","interval","setInterval","clearInterval","InvalidObject","read","DeniedState","PlaybookToastAlerts","execute","downloadPlaybook","setItem","NoReceptorBanner","isEntitled","isArray","renderActivityState","executePlaybookBanner","isVisible","addNotification","centered","React"],"sourceRoot":""}