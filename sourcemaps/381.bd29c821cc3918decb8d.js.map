{"version":3,"sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/Utilities/http.js","webpack:///./src/api/index.js","webpack:///./src/config.js","webpack:///./src/constants.js","webpack:///./src/api/inventory.js","webpack:///./src/store/actions/host-actions.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"names":["capitalize","string","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","document","baseURI","filter","s","length","shift","dedupeArray","array","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","isOpen","cells","title","action","Fragment","resolution","alternate","needsReboot","RedoIcon","className","CloseIcon","systems","props","parent","fullWidth","system","includes","allSystems","disabledColumns","colSpan","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","issueResolutions","find","r","resolutions","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","playbookSystems","issue","interval","setInterval","add","isUpdate","api","auto_reboot","name","then","onRemediationCreated","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","failed","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","sortByAttr","attribute","Array","isArray","fetchSystemsInfo","config","sortableColumns","getEntities","isSortingValid","orderBy","undefined","orderDirection","toLowerCase","hostnameOrId","filters","sliced","page","per_page","hasItems","results","total","sortBy","splitArray","inputArray","perChunk","Math","ceil","_item","inventoryEntitiesReducer","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","rowsIds","item","entitySelected","loadEntitiesFulfilled","shortenIssueId","getIssuesMultiple","needs_reboot","record","HttpError","Error","checkResponse","ok","status","insights","chrome","auth","logout","headers","get","json","errors","error","details","type","doGet","uri","opts","credentials","method","body","JSON","stringify","fetch","doFetch","toString","getRemediationStatus","url","urijs","API_BASE","segment","args","forEach","getHosts","getUser","instance","axios","interceptors","request","use","response","etag","err","remediations","RemediationsApi","ResolutionsApi","sources","DefaultApi","SOURCES_BASE","downloadPlaybook","selectedIds","Promise","resolve","reject","tab","RemediationsApiAxiosParamCreator","downloadPlaybooks","value","open","getRemediationPlaybook","handle","closed","getIsReceptorConfigured","origin","deleteSystemsFromRemediation","all","flatMap","deleteRemediationIssueSystem","statusCode","freeze","createRemediation","patchRemediation","getRemediations","query","limit","getRemediation","getResolutionsBatch","asyncActions","ACTION_TYPES","keyBy","k","SEARCH_DEBOUNCE_DELAY","FETCH_SELECTED_HOSTS","FETCH_RESOLUTIONS","hosts","HostsApi","getHostsById","perPage","apiHostGetHostById","fetchHostsById","options","HostHelper","batchResolutions","result","transform","push","warnings","hostsInitialState","isLoading","selectPlaybookFields","component","validate","validatorTypes","pattern","componentTypes","hideField","reviewActionsFields","FetchError","resolutionsCount","useFieldApi","input","valid","EmptyState","EmptyStateVariant","EmptyStateIcon","color","red","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","propTypes","SelectPlaybook","formOptions","useFormApi","values","getState","useState","existingRemediations","setExistingRemediations","existingPlaybookSelected","setExistingPlaybookSelected","newPlaybookName","setNewPlaybookName","selectedPlaybook","setSelectedPlaybook","isLoadingRemediation","setIsLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","useEffect","fetchData","differenceWith","isEqual","change","Stack","hasGutter","StackItem","Alert","isInline","Text","Popover","bodyContent","warning","Button","TextContent","Grid","GridItem","sm","md","lg","Radio","label","isDisabled","defaultChecked","onChange","FormSelect","val","FormSelectOption","Skeleton","SkeletonSize","FormGroup","fieldId","TextInput","autoFocus","isRequired","ReviewSystems","registry","dispatch","useDispatch","rowsLength","entities","loaded","hostReducer","host","display_name","tempSystems","onSelectRows","SystemsTable","hasCheckbox","bulkSelect","items","onClick","checked","onSelect","ReducerRegistry","ReviewActions","setSortByState","multiples","some","isChecked","Table","TableVariant","transforms","sortable","cellFormatters","expandable","onSort","TableHeader","noWrap","TableBody","IssueResolution","uniqueResolutions","uniqBy","removedResolutions","xl","Tile","isSelected","Review","issuesById","ExclamationTriangleIcon","resolutionsInitialState","ProgressBar","ProgressVariant","Progress","onClose","setOpen","flat","playbook","CheckCircleIcon","InProgressIcon","ouiaId","ExternalLinkAltIcon","iconPosition","isSmall","EmptyStateSecondaryActions","PropTypes","initialState","submitted","reducer","schema","RemediationWizard","useRef","useReducer","fields","isDynamic","inModal","showTitles","nextStep","filteredIssues","showTitle","findIndex","issueResolutionNextStep","substepOf","register","fetchResolutions","chunk","fetchHostNames","current","mapperExtension","review","validatorMapper","subscription","FormTemplate","showFormControls","initialValues","componentMapper","WizardMapper","TextField","onSubmit","onCancel","Modal","ModalVariant","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","promiseMiddleware","store","Provider","inventory","hideFilters","tags","registeredWith","stale","columns","isStatic","noDetail","showTags","onRefresh","onRefreshData","ref","_i","defaultGetEntities","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","entitiesReducer","tableProps","canSelectAll","defaultProps","SystemsTableWithContext"],"mappings":"knCAAO,SAASA,EAAWC,GACzB,gBAAUA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IAanD,IAAMC,EAAgB,iCAChBC,EAAc,cAEdC,EAAkB,kBAClBC,EAAuB,uBACvBC,EAAoB,oBACpBC,EAA6B,6BAC7BC,EAAoB,oBACpBC,EAAU,UACVC,EAAc,cACdC,EAAkB,kBAClBC,EAAqB,qBASrBC,EAAY,WAEvB,MAAuB,SADNC,OAAOC,SAASC,SAASC,MAAM,KAChC,GAAgB,QAAU,IAG/BC,EAAiB,SAACC,GAAD,gBACzBC,SAASC,SADgB,OAV5BP,OAAOC,SAASC,SACbC,MAAM,KACNK,QAAO,SAACC,GAAD,MAAa,SAANA,GAAgBA,EAAEC,OAAS,KACzCC,QAOyB,wBACoBN,EAAK,IAAH,OAAOA,GAAO,KAErDO,EAAc,SAACC,GAAD,cAAe,IAAIC,IAAID,KAErCE,EAAY,SAACC,EAAOC,EAAKC,GAAb,OACb,IAAVF,EAAcE,GAAYD,EAAM,IAAMA,GAW3BE,EAAY,SACvBC,EACAC,EACAC,EACAC,GAJuB,OATL,SAACH,EAASC,GAAV,OAClB,OAAID,GAASI,MAAK,SAACC,EAAGC,GACpB,IAAMC,EAAMC,OAAOC,KAAKJ,GAAGJ,EAAYS,MAAQ,GAC/C,OACGL,EAAEE,GAAOD,EAAEC,GAAO,EAAIF,EAAEE,GAAOD,EAAEC,IAAQ,EAAI,IACnB,SAA1BN,EAAYU,WAAwB,EAAI,MAU7CC,CAAYZ,EAASC,GAAaY,QAChC,SAACC,EAAKC,EAAML,GAAZ,gCACKI,GADL,CAEE,CACEE,QAAQ,EACRC,MAAO,CACL,CAAEC,MAAOH,EAAKI,QACd,CACED,MACE,kBAAC,EAAAE,SAAD,CAAUb,IAAG,UAAKG,EAAL,iBACX,uBAAGH,IAAG,UAAKG,EAAL,gBAA0BK,EAAKM,YACpCnB,GAAiBa,EAAKO,UAAY,GACjC,uBAAGf,IAAG,UAAKG,EAAL,eACHK,EAAKO,UADR,aAC6B,IAC1B3B,EAAUoB,EAAKO,UAAW,iBAMrC,CACEJ,MAAOH,EAAKQ,YACV,6BACE,kBAAC,EAAAC,SAAD,CAAUC,UAAU,eADtB,OAKA,6BACE,kBAAC,EAAAC,UAAD,CAAWD,UAAU,eADvB,OAMJ,CACEP,OAAO,UAAAH,EAAKY,eAAL,eAAcrC,SAAU,EAC/BsC,MAAO,CAAEZ,QAAQ,QAlCzB,QAsCM,UAAAD,EAAKY,eAAL,eAAcrC,QAAS,EACvB,CACE,CACEuC,OAAgB,EAARnB,EACRoB,WAAW,EACXb,MAAO,CACL,CACEC,MACE,kBAAC,gBAAD,KACE,kBAAC,IAAD,CACEf,gBAAiBA,EAAgBf,QAAO,SAAC2C,GAAD,OACtChB,EAAKY,QAAQK,SAASD,EAAO9C,OAE/BgD,WAAYlB,EAAKY,QACjBO,gBAAiB,CAAC,cAIxBN,MAAO,CAAEO,QAAS,EAAGV,UAAW,uBAKxC,OAEN,KAGSW,EAAa,SAACC,EAAOC,EAAQtB,EAAQuB,EAAMC,GACtD,IAAIC,GAAO,OAAIF,GACfA,EAAKD,GAAQtB,OAASA,EACtBwB,EAAQC,IAGGC,EAAgB,SAACC,EAASC,GAAe,MAC9CC,GACJ,UAAAD,EAAWpE,GAAasE,MAAK,SAACC,GAAD,OAAOA,EAAE9D,KAAO0D,YAA7C,eAAuDK,cAAe,GAExE,GACEJ,EAAWxE,IACXuE,KAAWC,EAAWzE,GAEtB,OAAO0E,EAAiBzD,QACtB,SAAC2D,GAAD,OAAOA,EAAE9D,KAAO2D,EAAWzE,GAAsBwE,MAIrD,GAAIC,EAAWvE,GAA6B,SACpC4E,EAAQ,UAAGL,EAAWtE,UAAd,iBAAG,EAA+B4E,cAAlC,aAAG,EAAuCJ,MACtD,SAACK,GAAD,OAAOA,EAAElE,KAAO0D,KAGlB,GAAIM,EACF,OAAOJ,EAAiBzD,QAAO,SAAC2D,GAAD,OAAOA,EAAE9D,KAAOgE,EAAS5B,WAAWpC,MAIvE,OAAO4D,GAiBIO,EAAoB,SAACR,EAAYS,EAAMC,EAAUC,GAC5D,IAAIC,EAAU,EACdD,EAAS,CAAEC,YAEX,IAAMN,EAASG,EAAKH,OACjBO,KAAI,YAAY,gBAATxE,EAAS,EAATA,GACAyE,GACJ,UAAAd,EAAWtE,UAAX,mBAA+B4E,cAA/B,mBACIJ,MAAK,SAACK,GAAD,OAAOA,EAAElE,KAAOA,YADzB,mBAEI0C,eAFJ,eAEa8B,KAAI,SAACpE,GAAD,OAAOA,EAAEJ,QAAO,GACnC,MAAO,CACLA,KACAoC,WAAU,UAAEqB,EAAczD,EAAI2D,UAApB,iBAAE,EAAgC,UAAlC,aAAE,EAAoC3D,GAChD0C,QAASnC,EAAY,GAAD,eACdoD,EAAWvE,GAA8B,GAAKqF,IADhC,OAEdd,EAAWrE,GAASU,IAAO,UAIpCG,QAAO,SAACuE,GAAD,OAAWA,EAAMhC,QAAQrC,OAAS,KAEtCsE,EAAWC,aAAY,WAC3BL,EAAU,IAAMD,EAAS,CAAEC,UAAWA,OACpCN,EAAO5D,OAASkB,OAAOC,KAAKmC,EAAWrE,IAAUe,QAAU,IAEzDwE,EAAM,CAAEZ,SAAQvB,QAAS,IAEvB1C,GAAO2D,EAAWtE,IAAsB,IAAxCW,GACF8E,EAAWnB,EAAWvE,IAGzB0F,GACCC,KACE/E,EACA,CAAE6E,MAAKG,YAAarB,EAAW3E,IAC/BqF,IAEJU,KACE,CACEE,KAAMtB,EAAW1E,GACjB4F,MACAG,YAAarB,EAAW3E,IAE1BqF,IAGDa,MAAK,YAAY,MAATlF,EAAS,EAATA,GACPsE,EAAS,CAAEtE,KAAIuE,QAAS,MACxBH,SAAA,UAAAA,EAAMe,4BAAN,cAAAf,EAA6B,CAC3BgB,YAAa,CAAEpF,KAAIiF,MACnBI,gBAAiB,kBAhElB,SAA4BrF,EAAIiF,EAAMK,GAC3C,IAAMC,EAAOD,EAAc,UAAY,UACvC,MAAO,CACLE,QAAS,UACTvD,MAAO,YAAF,OAAcsD,GACnBE,YACE,uDACyBF,EADzB,IAC+B,uBAAGG,KAAM3F,EAAeC,IAAMiF,GAD7D,KAIFU,aAAa,GAuDPC,CAAmB5F,EAAI2D,EAAW1E,IAAmB6F,SArB7D,OAwBS,WACLR,EAAS,CAAEuB,QAAQ,OAzBvB,SA2BW,kBAAMC,cAAcnB,OA+CpBoB,EAAmB,SAACC,EAAO9D,GACtC,IAAM+D,GAAkB/D,EAAOgE,QAQ/B,OAPKD,IACHD,EAAMG,SAAW5F,EAAY,GAAD,eACvByF,EAAMG,WADiB,OAEvBH,EAAM1C,KAAKkB,KAAI,SAAC4B,GAAD,OAASA,EAAIpG,UAInC,OACKgG,GADL,IAEEG,SAAUF,EAAiB,GAAKD,EAAMG,SACtC7C,KAAM0C,EAAM1C,KAAKkB,KAAI,wBACnBxE,GADmB,EAAGA,KAAH,iBAGnBmG,UAAWF,UAKJI,EAAa,SAAC3D,EAAS4D,EAAW5E,GAArB,OACxB6E,MAAMC,QAAQ9D,GACVA,EAAQvB,MACN,SAACC,EAAGC,GAAJ,OACID,EAAEkF,GAAajF,EAAEiF,GAAc,GAAO,IACzB,QAAd5E,EAAsB,GAAK,MAEhC,IAEO+E,EAAgB,mCAAG,WAC9BC,GAD8B,0GAE9BC,EAF8B,+BAEZ,GAClBzF,EAH8B,+BAGZ,GAClB0F,EAJ8B,uBAMxBC,EAAiBF,EAAgB5D,SAAS2D,EAAOI,SACvDJ,EAAOI,QAAUD,EAAiBH,EAAOI,aAAUC,EACnDL,EAAOM,eAAiBH,EAAc,UAClCH,EAAOM,sBAD2B,aAClC,EAAuBC,mBACvBF,EACJ7F,EAAkBmF,EAAWnF,EAAiB,OAAQwF,EAAOM,gBACvDE,EAAeR,SAZS,UAYTA,EAAQS,eAZC,iBAYT,EAAiBD,oBAZR,aAYT,EAA+BD,cAC9CvE,EAAUwE,EACZhG,EAAgBU,QACd,SAACC,EAAKC,GAAN,wBACKD,IADL,OAEMC,EAAKmD,KAAKgC,cAAclE,SAASmE,GAAgB,CAACpF,EAAK9B,IAAM,OAEnE,IAEFkB,EAAgBsD,KAAI,SAAC1B,GAAD,OAAYA,EAAO9C,SACrCoH,EAAS1E,EAAQ5D,OACpB4H,EAAOW,KAAO,GAAKX,EAAOY,SAC3BZ,EAAOW,KAAOX,EAAOY,WAGdjH,OAAS,GA3BY,kCA4BlBuG,EAAYQ,EAAD,OAAcV,GAAd,IAAsBa,UAAU,EAAMF,KAAM,KAAK,GA5B1C,iDA6BxB,GA7BwB,eA0BxBjD,EA1BwB,qCAgCvBA,GAhCuB,IAiC1BoD,QAASnB,EAAWjC,EAAKoD,QAAS,eAAgBd,EAAOM,mBAjC/B,IAmC5BS,MAAO/E,EAAQrC,OACfgH,KAAMX,EAAOW,KACbC,SAAUZ,EAAOY,SACjBR,QAASJ,EAAOI,QAChBE,eAAgBN,EAAOM,eACvBU,OAAQ,CAAEpG,IAAKoF,EAAOI,QAASpF,UAAWgF,EAAOM,mBAxCrB,4CAAH,sDA4ChBW,EAAa,SAACC,EAAYC,GAAb,OACxB,OAAI,IAAItB,MAAMuB,KAAKC,KAAKH,EAAWvH,OAASwH,KAAYrD,KAAI,SAACwD,EAAO1G,GAAR,OAC1DsG,EAAW9I,MAAMwC,EAAMuG,GAAWvG,EAAM,GAAKuG,OAoBpCI,EAA2B,SACtCjF,EADsC,SAEpCkF,EAFoC,EAEpCA,wBAFoC,OAItCC,SAAgB,GACdC,cAAe,SAACpC,EAAO9D,GAAR,OAhJW,SAAC8D,EAAD,GAAwB,IAAdE,EAAc,EAAdA,QAClCC,EAAWH,EAAMG,UAAY,GACjC,GAAID,EAAQC,SACVA,EAAW,GAAH,eACHA,IADG,OAEa,IAAfD,EAAQlG,GAAWgG,EAAM1C,KAAKkB,KAAI,SAAC4B,GAAD,OAASA,EAAIpG,MAAM,CAACkG,EAAQlG,WAGpE,GAAmB,IAAfkG,EAAQlG,GAAU,CACpB,IAAMqI,EAAUrC,EAAM1C,KAAKkB,KAAI,SAAC4B,GAAD,OAASA,EAAIpG,MAC5CmG,EAAWA,EAAShG,QAAO,SAACmI,GAAD,OAAWD,EAAQtF,SAASuF,WAEvDnC,GACkB,IAAhBD,EAAQlG,GAAY,GAAKmG,EAAShG,QAAO,SAACmI,GAAD,OAAUA,IAASpC,EAAQlG,MAI1E,cACKgG,GADL,IAEEG,aA6HkCoC,CAAevC,EAAO9D,MAD1C,SAEbgG,GAA0B,SAAClC,EAAD,OAAUE,EAAV,EAAUA,QAAV,OA1HM,SAACF,EAAOhD,EAAY0E,GACvD,IAAIvB,EAAWH,EAAMG,UAAY,GAIjC,OAHKH,EAAMG,WACTA,EAAWnD,GAA0BgD,EAAM1C,KAAKkB,KAAI,SAAC4B,GAAD,OAASA,EAAIpG,OAEnE,OACKgG,GADL,IAEEG,WACA7C,KAAM+C,EACJL,EAAM1C,KAAKkB,KAAI,kBAAGxE,EAAH,EAAGA,GAAH,YACbA,OADa,iBAGbmG,WAAW,UAACA,SAAD,QAAC,EAAUpD,SAAS/C,SAEjC,gBACA0H,aAAA,EAAAA,EAAQhG,YAAa,OAEvBgG,WA0GEc,CAAsBxC,EAAOhD,EAAY,CACvC1B,IAAK4E,EAAQY,QACbpF,UAAWwE,EAAQc,qBALT,SAObvH,EAAqBsG,GAPR,KAUL0C,EAAiB,SAAC/E,GAAD,eAC5BA,SAAA,UAAAA,EAAS5D,MAAM,YAAf,mBAAqBhB,OAAO,UAA5B,eAAiC,KAAM4E,GAE5BgF,EAAoB,eAC/BzE,EAD+B,uDACtB,GACTvB,EAF+B,uDAErB,GACVqB,EAH+B,uDAGjB,GAHiB,OAK/BE,EACGO,KAAI,SAACE,GAAU,MACRd,GACJ,UAAAG,EAAYF,MAAK,SAACC,GAAD,OAAOA,EAAE9D,KAAO0E,EAAM1E,aAAvC,eAA4C+D,cAAe,GAC7D,GACEH,aAAA,EAAAA,EAAmB,KAAM,GADnB6B,EAAR,EAAQA,YAA2BnD,EAAnC,EAAqBqG,aAErB,MAAO,CACLzG,OAAQ+B,EAAOJ,MAAK,SAACK,GAAD,OAAOA,EAAElE,KAAO0E,EAAM1E,MAAIyF,YAC9CrD,WAAYqD,EACZnD,cACAI,QAASnC,EAAY,GAAD,eAAMmE,EAAMhC,SAAW,KAAvB,OAA+BA,KACnD1C,GAAI0E,EAAM1E,GACVqC,WAAWuB,aAAA,EAAAA,EAAkBvD,QAAS,MAGzCF,QAAO,SAACyI,GAAD,OAAYA,EAAOvG,UAAY,O,y3BC3Z3C,IAIMwG,E,wcACJ,WAAYpD,GAAa,6BACvB,cAAM,wCACDA,YAAcA,EAFI,E,kBADHqD,Q,SAOTC,E,0EAAf,WAA6BjF,GAA7B,6EACMA,EAAEkF,GADR,yCAEWlF,GAFX,UAKmB,MAAbA,EAAEmF,OALR,uBAMItJ,OAAOuJ,SAASC,OAAOC,KAAKC,SANhC,8BAUMvF,EAAEwF,QAAQC,IAAI,gBAAgBxG,SAAS,oBAV7C,wBAYQqB,GAAO,EAZf,mBAcmBN,EAAE0F,OAdrB,QAcMpF,EAdN,qEAiBQA,EAAKqF,SAAUrF,EAAKqF,OAAOpJ,OAjBnC,sBAkBYqJ,EAAQtF,EAAKqF,OAAO,IAEhBE,UAAWD,EAAMC,QAAQ1E,KApBzC,uBAqBc,IAAI4D,EAAJ,UAAiBa,EAAMzH,MAAvB,aAAiCyH,EAAMC,QAAQ1E,KAA/C,MArBd,cAwBY,IAAI4D,EAAUa,EAAMzH,OAxBhC,cA4BQ,IAAI4G,EAAJ,mCAA0C/E,EAAEmF,SA5BpD,2D,+BA+BeO,E,0EAAf,WAAoB1F,GAApB,0EACOA,EADP,qDAKQ8F,EAAO9F,EAAEwF,QAAQC,IAAI,iBACjBxG,SAAS,oBANrB,sBAOU,IAAI8F,EAAJ,oCAA2Ce,EAA3C,eAPV,gCAUS9F,EAAE0F,QAVX,4C,sBAqCO,SAASK,EAAMC,GACpB,OAzBF,SACEA,GAKA,IAHA1F,EAGA,wDAFAkF,EAEA,wDACMS,EAAO,EAAH,CACRC,YAAa,cACbC,OAHF,uDAJS,OAIT,uDADU,IAgBV,OARIX,IACFS,EAAKT,QAAUA,GAGblF,IACF2F,EAAKG,KAAOC,KAAKC,UAAUhG,IAGtBiG,MAAMP,EAAKC,GAIXO,CAAQR,EAAIS,YAAYrF,KAAK6D,GAAe7D,KAAKsE,G,6lBC1DnD,IAAMgB,EAAuB,SAACxK,GAAD,OAAQ6J,EAN5C,WAAsB,IACpB,IAAMY,EAAMC,IAAMC,KAAUC,QAAQ,gBADhB,mBAANC,EAAM,yBAANA,EAAM,gBAGpB,OADAA,EAAKC,SAAQ,SAACF,GAAD,OAAaH,EAAIG,QAAQA,MAC/BH,EAGyCA,CAAIzK,EAAI,YACnD,SAAS+K,IACd,OAAOlB,EAAM,2B,IAMThB,E,wcACJ,WAAYpD,GAAa,6BACvB,cAAM,wCACDA,YAAcA,EAFI,E,kBADHqD,Q,wCAOxB,WAA+BpC,GAA/B,iFACQ/G,OAAOuJ,SAASC,OAAOC,KAAK4B,UADpC,gCAEStE,GAFT,4C,sBAiDA,IAAMuE,EAAWC,aACjBD,EAASE,aAAaC,QAAQC,K,8CAC9BJ,EAASE,aAAaG,SAASD,KA9C/B,SAAiCC,GAC/B,OAAIA,EAASlH,KACX,OAAYkH,EAASlH,MAArB,IAA2BmH,KAAMD,EAAShC,QAAQiC,OAG7CD,KA0CTL,EAASE,aAAaG,SAASD,IAAI,MAvCnC,SAAwBG,GACtB,GAAKA,EAAL,CAIA,GAAIA,EAAIF,UAAoC,MAAxBE,EAAIF,SAASrC,OAE/B,OADAtJ,OAAOuJ,SAASC,OAAOC,KAAKC,UACrB,EAGT,MAAMmC,MA8BRP,EAASE,aAAaG,SAASD,IAAI,MA3BnC,SAA0BG,GACxB,GAAKA,EAAL,CAIA,GACEA,EAAIF,UACJE,EAAIF,SAASlH,MACboH,EAAIF,SAASlH,KAAKqF,QAClB+B,EAAIF,SAASlH,KAAKqF,OAAOpJ,OACzB,CACA,IAAMqJ,EAAQ8B,EAAIF,SAASlH,KAAKqF,OAAO,GAEvC,GAAIC,EAAMC,SAAWD,EAAMC,QAAQ1E,KACjC,MAAM,IAAI4D,EAAJ,UAAiBa,EAAMzH,MAAvB,aAAiCyH,EAAMC,QAAQ1E,KAA/C,MAGR,MAAM,IAAI4D,EAAUa,EAAMzH,OAG5B,MAAMuJ,MASD,IAAMC,EAAe,IAAIC,uBAAgB3E,EAAW4D,IAAUM,GACxDlH,EAAc,IAAI4H,sBAAe5E,EAAW4D,IAAUM,GACtDW,EAAU,IAAIC,kBAAW9E,EAAW+E,IAAcb,GAExD,SAASc,EAAiBC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EACJJ,EAAY3L,OAAS,GACjB,IAAIgM,oCACDC,kBAAkBN,GAClB9G,MAAK,SAACqH,GAAD,OAAW5M,OAAO6M,KAAK7B,IAAW4B,EAAM9B,SAChD,IAAI4B,oCACDI,uBAAuBT,EAAY,IACnC9G,MAAK,SAACqH,GAAD,OAAW5M,OAAO6M,KAAK7B,IAAW4B,EAAM9B,QAEtD,IAAK2B,EACH,OAAOD,IAGT,IAAMO,EAAS9H,aAAY,WACrBwH,EAAIO,SACN7G,cAAc4G,GACdR,OAED,QAIA,SAASU,IACd,OAAO/C,EAAM,GAAD,OACPlK,OAAOC,SAASiN,OADT,+DAKP,SAASC,EAA6BpK,EAAS0C,GACpD,OAAO6G,QAAQc,IACbrK,EAAQsK,SAAQ,SAAClK,GAAD,OACdA,EAAOmB,OAAOO,KAAI,SAACE,GAAD,OAChB+G,EAAawB,6BACX7H,EAAYpF,GACZ0E,EAAM1E,GACN8C,EAAO9C,WAOjB,SAAS+I,EAAcjF,GACrB,IAAKA,EAAEkF,GAAI,CACT,IAAMU,EAAQ,IAAIZ,MAAJ,mCAAsChF,EAAEmF,SAEtD,MADAS,EAAMwD,WAAapJ,EAAEmF,OACfS,EAGR,OAAO5F,EAGT,SAAS0F,EAAK1F,GAEZ,OADAiF,EAAcjF,GACPA,EAAE0F,OAGX,IAAMF,EAAU/H,OAAO4L,OAAO,CAC5B,eAAgB,oCAGX,SAASC,EAAkBhJ,GAChC,IAAM0F,EAAM,IAAIY,IAAJ,CAAUC,KAAUC,QAAQ,gBAAgBL,WACxD,OAAOF,MAAMP,EAAK,CAChBR,UACAW,OAAQ,OACRD,YAAa,UACbE,KAAMC,KAAKC,UAAUhG,KACpBc,KAAKsE,GAGH,SAAS6D,EAAiBrN,EAAIoE,GACnC,IAAM0F,EAAM,IAAIY,IAAJ,CAAUC,KACnBC,QAAQ,gBACRA,QAAQ5K,GACRuK,WACH,OAAOF,MAAMP,EAAK,CAChBR,UACAU,YAAa,UACbC,OAAQ,QACRC,KAAMC,KAAKC,UAAUhG,KACpBc,KAAK6D,GAGH,SAASuE,IACd,IAAMxD,EAAM,IAAIY,IAAJ,CAAUC,KACnBC,QAAQ,gBACR2C,MAAM,CAAEC,MAAO,MACfjD,WACH,OAAOF,MAAMP,EAAK,CAAEE,YAAa,YAAa9E,KAAKsE,GAG9C,SAASiE,EAAezN,GAC7B,IAAM8J,EAAM,IAAIY,IAAJ,CAAUC,KACnBC,QAAQ,gBACRA,QAAQ5K,GACRuK,WACH,OAAOF,MAAMP,EAAK,CAAEE,YAAa,YAAa9E,KAAKsE,GAG9C,SAASkE,EAAoBzJ,GAClC,IAAM6F,EAAM,IAAIY,IAAJ,CAAUC,KAAUC,QAAQ,eAAeL,WACvD,OAAOF,MAAMP,EAAK,CAChBR,UACAU,YAAa,UACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEnG,aACtBiB,KAAKsE,K,sDC7MH,IAAMmB,EAAW,uBACXmB,EAAe,qB,wHCEtB6B,E,MAAeX,GACnB,CACE,oBACA,sBACA,mBACA,0BACA,sBACA,oBACA,qBACA,2BACA,kCACA,0BACA,kBACA,wBACA,kBACA,0BACA,kBACA,oBACA,mBACA,2BACA,kCACA,uBACA,eACA,qBAEF,SAAC5L,GAAD,MAAO,CAACA,EAAD,UAAOA,EAAP,sBAAuBA,EAAvB,wBAAyCA,EAAzC,iBAIIwM,EAAeC,IAAM,GAAD,eAAKF,GADtB,CAAC,WAAY,yBAA0B,mBACU,SAACG,GAAD,OAAOA,KAE3DC,EAAwB,IAExBC,EAAuB,uBACvBC,EAAoB,qB,6JCjCpBC,EAAQ,I,SAAIC,eAASpH,EADA,oBAC+BkE,MAE1D,SAASmD,EAAa1L,EAAtB,GAAkD,IAAjB2E,EAAiB,EAAjBA,KAAMgH,EAAW,EAAXA,QAC5C,OAAOH,EAAMI,mBAAmB5L,OAASqE,EAAWsH,EAAShH,G,iBCJlDkH,EAAiB,SAAC7L,GAAD,IAAU8L,EAAV,uDAAoB,GAApB,MAA4B,CACxD5E,KAAMoE,KACN9H,QAASuI,EAAwB/L,EAAS8L,K,8DCDtCE,EAAgB,mCAAG,WAAOzK,GAAP,wGAEAc,KAAwBd,EAAOO,KAAI,SAACN,GAAD,OAAOA,EAAElE,OAF5C,cAEf2O,EAFe,SAIWC,IAC9BD,GACA,WAAwBpC,EAAOjL,GAAQ,mBAArCyC,EAAqC,KAAxB0F,EAAwB,KAOrC,OANK8C,EAGHxI,EAAY8K,KAAKtC,GAFjB9C,EAAOoF,KAAP,gBAAqBvN,EAArB,mCAKK,CAACyC,EAAa0F,KAEvB,CAAC,GAAI,KAfc,eAId1F,EAJc,KAID+K,EAJC,uBAkBd,CAAE/K,cAAa+K,aAlBD,yDAoBd,CACLrF,OAAQ,CACN,qEAtBiB,yDAAH,sD,+mBCDf,IAAMsF,EAAoB,CAC/BC,WAAW,EACXd,MAAO,IAWT,kCACMF,KADN,eANiB,SAAChI,EAAD,OAAUE,EAAV,EAAUA,QAAV,cACZF,GADY,IAEfkI,MAAO,GAAF,eAAMlI,EAAMkI,QAAZ,OAAuBhI,EAAQsB,SAAW,KAC/CwH,WAAW,QAGb,mBAEMhB,KAFN,aARwB,SAAChI,GAAD,cAAiBA,GAAjB,IAAwBgJ,WAAW,OAQ3D,G,0FCDaC,EAAuB,CAClC,CACEhK,KAAMhG,KACNiQ,UAAW,kBACXC,SAAU,CACR,CACEvF,KAAMwF,YACNC,QAAS,oBAEX,CACEzF,KAAMwF,gBAIZ,CACEnK,KAAM7F,KACN8P,UAAWI,eACXC,WAAW,GAEb,CACEtK,KAAM5F,KACN6P,UAAWI,eACXC,WAAW,GAEb,CACEtK,KAAM1F,KACN2P,UAAWI,eACXC,WAAW,IAIFC,EAAsB,CACjC,CACEvK,KAAM9F,KACN+P,UAAW,mB,2FCpCTO,EAAa,SAAC9M,GAClB,IAAQ+M,EAAqB/M,EAArB+M,iBAKR,OAHkBC,OAAYhN,GAAtBiN,MACFC,OAAQ,EAGZ,kBAAC,EAAAC,WAAD,CACEtK,QAASuK,0BACT,yBAAuB,sBAEvB,kBAAC,EAAAC,eAAD,CAAgBC,MAAOC,WAAWC,KAAMC,0BACxC,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,oBAGA,kBAAC,EAAAC,eAAD,+BAC0B,IACF,IAArBd,GACC,6EAOVD,EAAWgB,UAAY,CACrBf,iBAAkBe,YAGpB,U,gDCFMC,GAAiB,SAAC/N,GACtB,IAAQsB,EAAgCtB,EAAhCsB,OAAQvB,EAAwBC,EAAxBD,QAASM,EAAeL,EAAfK,WACjB4M,GAAUD,OAAYhN,GAAtBiN,MACFe,GAAcC,eACdC,EAASF,EAAYG,WAAWD,OAEtC,GAAwDE,gBAAxD,eAAOC,EAAP,KAA6BC,EAA7B,KACA,GAAgEF,cAC9DF,EAAOzR,OADT,eAAO8R,EAAP,KAAiCC,EAAjC,KAGA,GAA8CJ,cAC5CF,EAAOzR,MAA8B,GAAKwQ,EAAMrD,OADlD,eAAO6E,EAAP,KAAwBC,EAAxB,KAGA,GAAgDN,cAC9CF,EAAOxR,OADT,eAAOiS,EAAP,KAAyBC,EAAzB,KAGA,GAAwDR,eAAS,GAAjE,eAAOS,EAAP,KAA6BC,EAA7B,KAEMhI,GAASiI,kBACb,gBAAGC,EAAH,EAAGA,mBAAH,OAA4BA,aAAA,EAAAA,EAAoBlI,SAAU,KAC1DmI,gBAEI9C,GAAW4C,kBACf,gBAAGC,EAAH,EAAGA,mBAAH,OAA4BA,aAAA,EAAAA,EAAoB7C,WAAY,KAC5D8C,gBAEI7N,GAAc2N,kBAClB,gBAAGC,EAAH,EAAGA,mBAAH,OAA4BA,aAAA,EAAAA,EAAoB5N,cAAe,KAC/D6N,gBAEI5C,GAAY0C,kBAChB,gBAAGC,EAAH,EAAGA,mBAAH,OAA4BA,aAA5B,EAA4BA,EAAoB3C,aAsBlD,OAnBA6C,gBAAU,WAAM,wCACd,sGAC+C9M,OAD/C,gBACgBiM,EADhB,EACU5M,KACR6M,EAAwBD,GAF1B,4CADc,0DAMdc,KACC,KAEHD,gBAAU,WAAM,OACV,UAAAE,KAAehO,EAAa8M,EAAOtR,MAAcyS,aAAjD,eAA2D3R,QAAS,IACtEsQ,EAAYsB,OAAO1S,KAAawE,GAChC4M,EAAYsB,OACVzS,MACAkJ,QAAkBzE,EAAQvB,EAASqB,QAKlC0F,EAAOpJ,QAAU,EACtB,kBAAC,EAAA6R,MAAD,CAAOC,WAAS,EAAC,yBAAuB,0BACtC,kBAAC,EAAAC,UAAD,KACuB,IAApBtD,EAASzO,QACR,kBAAC,EAAA+R,UAAD,KACE,kBAAC,EAAAC,MAAD,CACE7M,QAAQ,UACR8M,UAAQ,EACRrQ,MACE,kBAAC,EAAAsQ,KAAD,eACS7R,QAAUoO,EAASzO,OAAQ,MAAO,QAAS,IAClD,kBAAC,EAAAmS,QAAD,CACE,aAAW,2BACXC,YACE,kBAAC,EAAAtQ,SAAD,KACG2M,EAAStK,KAAI,SAACkO,EAASpR,GAAV,OACZ,yBAAKA,IAAKA,GAAMoR,QAKtB,2BACE,kBAAC,EAAAC,OAAD,CAAQnN,QAAQ,OAAO8M,UAAQ,GAC5BxD,EAASzO,QACF,KACTK,QAAUoO,EAASzO,OAAQ,WAErB,IAlBb,8CAmB8C,QAMtD,kBAAC,EAAAuS,YAAD,KACE,kBAAC,EAAAL,KAAD,oBACe,IACb,qCACMvP,EAAW3C,OADjB,aAC2BK,QAAUsC,EAAW3C,OAAQ,WAAa,KAHvE,qDAKqD,IACnD,qCAAO4D,aAAP,EAAOA,EAAQ5D,OAAf,aAAyBK,QAAUuD,aAAD,EAACA,EAAQ5D,OAAQ,UAAnD,MACC4D,aAAA,EAAAA,EAAQ5D,UAAW0D,EAAY1D,QAAW2O,EAKzC,QAJA,kBAAC,EAAA7M,SAAD,iBACW,2BAAI4B,EAAY1D,OAAhB,MAIV,IAbL,mCAkBJ,kBAAC,EAAA+R,UAAD,KACE,kBAAC,EAAAS,KAAD,CAAMV,WAAS,GACb,kBAAC,EAAAW,SAAD,CAAUC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3B,kBAAC,EAAAC,MAAD,CACEC,MACEnC,EAAoB,oCACaA,EAAqB3Q,OADlC,KAEhB,2BAEN,aAAW,2BACXL,GAAG,WACHiF,KAAK,QACLmO,YAAapC,IAAyBA,EAAqB3Q,OAC3DgT,eAAgBnC,EAChBoC,SAAU,WACRnC,GAA4B,GAC5BR,EAAYsB,OAAO7S,MAA4B,GAC/CwQ,EAAM0D,UAAShC,aAAA,EAAAA,EAAkBrM,OAAQ,IACzC0L,EAAYsB,OAAO5S,KAAmBiS,OAI5C,kBAAC,EAAAwB,SAAD,CAAUC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC1BjC,IAAyBQ,EACxB,kBAAC,EAAA+B,WAAD,CACED,SAAU,SAACE,GACT/B,GAAwB,GACxB1M,KAAmByO,GAAKtO,MAAK,SAACE,GAC5BmM,EAAoBnM,GACpBqM,GAAwB,GACxBP,GACEtB,EAAM0D,SAASlO,EAAYH,MAC7BiM,GACEP,EAAYsB,OAAO5S,KAAmB+F,OAG5CmH,OAAO+E,aAAA,EAAAA,EAAkBtR,KAAM,GAC/B,aAAW,+BAEVgR,WAAsB3Q,OAAtB,CAEG,kBAAC,EAAAoT,iBAAD,CACEnS,IAAI,8BACJiL,MAAM,GACN4G,MAAM,kBACNC,YAAU,KANf,eAQMpC,EAAqBxM,KAAI,gBAAGxE,EAAH,EAAGA,GAAIiF,EAAP,EAAOA,KAAP,OAC1B,kBAAC,EAAAwO,iBAAD,CAAkBnS,IAAKtB,EAAIuM,MAAOvM,EAAImT,MAAOlO,SAIjD,kBAAC,EAAAwO,iBAAD,CACEnS,IAAI,QACJiL,MAAM,QACN4G,MAAM,2BAKZ,kBAACO,EAAA,EAAD,CAAUnD,KAAMoD,YAKxB,kBAAC,EAAAvB,UAAD,KACE,kBAAC,EAAAS,KAAD,CAAMV,WAAS,GACb,kBAAC,EAAAW,SAAD,CAAUC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3B,kBAAC,EAAAC,MAAD,CACEC,MAAM,sBACN,aAAW,sBACXnT,GAAG,MACHiF,KAAK,QACLoO,gBAAiBnC,EACjBoC,SAAU,WACRnC,GAA4B,GAC5BR,EAAYsB,OAAO7S,MAA4B,GAC/CwQ,EAAM0D,SAASlC,GACfT,EAAYsB,OAAO5S,UAAmB0H,OAI5C,kBAAC,EAAA+L,SAAD,CAAUC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3B,kBAAC,EAAAW,UAAD,CAAWC,QAAQ,oBACjB,kBAAC,EAAAC,UAAD,CACElK,KAAK,OACL2C,MAAO6E,EACPkC,SAAU,SAACE,GACTnC,EAAmBmC,GACnBtC,GAA4BtB,EAAM0D,SAASE,IAE7C,aAAW,qBACXO,WAAS,SAQrB,kBAAC,EAAD,OAIJrD,GAAeD,UAAY,CACzBxM,OAAQwM,YACNA,UAAgB,CACdhL,YAAagL,WACbzQ,GAAIyQ,cAENuD,WACFtR,QAAS+N,YAAkBA,YAAkBuD,WAC7ChR,WAAYyN,YAAkBA,YAAkBuD,YAGlD,Y,+pBCtPA,IAAMC,GAAgB,SAAC,GAAwD,MAAtDhQ,EAAsD,EAAtDA,OAAQvB,EAA8C,EAA9CA,QAASM,EAAqC,EAArCA,WAAYkR,EAAyB,EAAzBA,SAAavR,GAAY,cACzEwR,GAAWC,mBACPxE,GAAUD,OAAYhN,GAAtBiN,MAGFlG,EAAK,WAFSkH,eAEME,WAAWrH,cAA1B,aAAG,EAA+B/G,QAEvC2R,GAAa3C,kBACjB,gBAAG4C,EAAH,EAAGA,SAAH,QAAmBA,aAAA,EAAAA,EAAUhR,OAAQ,IAAIjD,UAErC8F,GAAWuL,kBAAY,gBAAG4C,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUnO,WAAY,MAC/DoO,GAAS7C,kBAAY,gBAAG4C,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUC,UACjDrT,GAAkBwQ,kBACtB,gBAAkBxD,EAAlB,EAAGsG,YAAetG,MAAlB,OACEA,aAAA,EAAAA,EAAO1J,KAAI,SAACiQ,GAAD,MAAW,CAAEzU,GAAIyU,EAAKzU,GAAIiF,KAAMwP,EAAKC,mBAAoB,OAGxE7C,gBAAU,WACR,IAAMtF,EAAQtI,aAAH,EAAGA,EAAQrC,QAAO,SAACC,EAAKC,GACjC,IAAM6S,GAAcpU,QAAY,GAAD,eAC1BmC,IAD0B,OAEzBZ,EAAKY,SAAW,MACnBvC,QAAO,SAACH,GAAD,OAAQmG,aAAR,EAAQA,EAAUpD,SAAS/C,MACrC,gBACK6B,GACC8S,EAAYtU,OAAS,GAArB,UAA4ByB,EAAK9B,GAAK2U,GAAgB,MAE3D,IACE3C,KAAQpC,EAAMrD,MAAOA,IACxBqD,EAAM0D,SAAS/G,KAEhB,CAACpG,IAEJ,IAAMyO,EAAe,SAACrI,GACpB4H,EAAS,CACPvK,KAAMnK,KACNyG,QAASqG,KAIb,OACE,kBAAC,EAAA2F,MAAD,CAAOC,WAAS,EAAC,yBAAuB,yBACtC,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAQ,YAAD,KACE,kBAAC,EAAAL,KAAD,qEAKJ,kBAAC,EAAAH,UAAD,KACE,kBAAC,iBAAD,KACE,kBAACyC,GAAA,EAAD,CACEX,SAAUA,EACVhT,gBAAiBA,EACjB8B,WAAYA,EACZ8R,aAAa,EACbC,WAAY,CACV/U,GAAI,iBACJW,MAAOwF,EAAS9F,OAChB2U,MAAO,CACL,CACE/S,MAAO,kBACPgT,QAAS,kBAAML,GAAa,MAH3B,eAKCL,GAAUF,EAAa,EACvB,CACE,CACEpS,MAAO,gBAAF,OAAkBoS,EAAlB,KACLY,QAAS,kBAAML,GAAa,MAGhC,KAENM,QAAS/O,EAAS9F,OAAS,EAC3B8U,SAAU,SAAC5I,GAAD,OAAWqI,EAAarI,KAEpCqI,cAAY,MAIjBlL,GAAS6K,GACR,kBAAC,EAAAnC,UAAD,KACE,kBAAC,EAAAhC,sBAAD,CAAuB5N,UAAU,wCACjC,0BAAMA,UAAU,4BAA4BkH,MAOtDuK,GAAcxD,UAAY,CACxBxM,OAAQwM,YACNA,UAAgB,CACdhL,YAAagL,WACbzQ,GAAIyQ,cAENuD,WACFtR,QAAS+N,YAAkBA,YAAkBuD,WAC7ChR,WAAYyN,YAAkBA,YAAkBuD,WAChDE,SAAUzD,eAAqB2E,MAAiBpB,YAGlD,Y,wlBCtFA,IAAMqB,GAAgB,SAAC1S,GACrB,IACMkO,GADcD,eACOE,WAAWD,OAChC5M,EAAStB,EAAMsB,OAAO9D,QAAO,SAACuE,GAAD,OACjCnD,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,OAEtC4P,GAAUD,OAAYhN,GAAtBiN,MACR,GAAsCmB,cAAS,CAC7CtP,WAAOsF,EACPrF,eAAWqF,IAFb,eAAO/F,EAAP,KAAoBsU,EAApB,KAIMpU,GAAkBwQ,kBACtB,gBAAkBxD,EAAlB,EAAGsG,YAAetG,MAAlB,OACEA,aAAA,EAAAA,EAAO1J,KAAI,SAACiQ,GAAD,MAAW,CAAEzU,GAAIyU,EAAKzU,GAAIiF,KAAMwP,EAAKC,mBAAoB,MAGlEa,GACJ1E,EAAOzR,MACHyR,EAAOrR,MAAiBW,QACtB,SAACuE,GAAD,OACGmM,EAAOxR,MAAmB4E,OAAOuR,MAAK,SAACtR,GAAD,OAAOA,EAAElE,KAAO0E,EAAM1E,SAEjE6Q,EAAOrR,OAEVgF,KAAI,SAACE,GAAD,UAAC,MACDA,GADA,IAEHhC,QAASmO,EAAOvR,MAASoF,EAAM1E,SAEhCG,QAAO,SAACyI,GAAD,aAAYA,SAAA,UAAAA,EAAQlG,eAAR,eAAiBrC,QAAS,KAEhD,GAAwB0Q,eACtBjQ,QAAUyU,EAAWvU,GAAa,EAAME,IAD1C,eAAOoC,EAAP,KAAaC,EAAb,KAQA,OAJAsO,gBAAU,WACRtO,GAAQzC,QAAUyU,EAAWvU,GAAa,EAAME,MAC/C,CAACF,IAGF,kBAAC,EAAAkR,MAAD,CAAOC,WAAS,EAAC,yBAAuB,yBACtC,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAQ,YAAD,KACE,kBAAC,EAAAL,KAAD,yBACoB,IAClB,qCAAOtO,EAAO5D,OAAd,aAAwBK,QAAUuD,EAAO5D,OAAQ,UAFnD,iBAGa,IACX,2BACGkV,EAAUlV,OADb,MACwB,IADxB,UAEM4D,EAAO5D,OAFb,aAEuBK,QAAUuD,EAAO5D,OAAQ,UAE1B,IAArBkV,EAAUlV,OAAe,SAAW,UARvC,uDAaJ,kBAAC,EAAA+R,UAAD,KACE,kBAAC,EAAAc,MAAD,CACEC,MAAK,wDACkB,IAArBoC,EAAUlV,OAAe,QAAU,OADhC,sCAGYkV,EAAUlV,OAHtB,aAGgCK,QACnC6U,EAAUlV,OACV,UALG,KAOLL,GAAG,SACHiF,KAAK,QACLwQ,UAAW7F,EAAMrD,MACjB+G,SAAU,kBAAM1D,EAAM0D,UAAS,MAEhCrP,EAAO5D,OAASkV,EAAUlV,OAAS,GAClC,kBAAC,EAAAkS,KAAD,CAAM/P,UAAU,oCAAhB,cAEIyB,EAAO5D,OAASkV,EAAUlV,OAF9B,4BAGqBK,QACjBuD,EAAO5D,OAASkV,EAAUlV,OAC1B,SALJ,kCAQY4D,EAAO5D,OAASkV,EAAUlV,QAAW,EAAI,KAAO,OAR5D,4CAaJ,kBAAC,GAAAqV,MAAD,CACE,aAAW,UACXlT,UAAU,kCACVgD,QAASmQ,wBACTxS,WAAY,SAACC,EAAOC,EAAQtB,GAAhB,OACVoB,QAAWC,EAAOC,EAAQtB,EAAQuB,EAAMC,IAE1CvB,MAAO,CACL,CACEC,MAAO,SACP2T,WAAY,CAACC,cAEf,CACE5T,MAAO,aACP2T,WAAY,CAACC,cAEf,CACE5T,MAAO,kBACP2T,WAAY,CAACC,cAEf,CACE5T,MAAO,UACP2T,WAAY,CAACC,aACbC,eAAgB,CAACC,iBAGrBzS,KAAMA,EACN0S,OAAQ,SAAC5S,EAAO3B,EAAOC,GAAf,OACN4T,EAAe,CAAE7T,QAAOC,eAE1BgG,OAAQ1G,GAER,kBAAC,GAAAiV,YAAD,CAAaC,QAAM,IACnB,kBAAC,GAAAC,UAAD,OAEF,kBAAC,EAAA/D,UAAD,KACE,kBAAC,EAAAc,MAAD,CACEC,MAAO,0DACPnT,GAAG,SACHiF,KAAK,QACLwQ,WAAY7F,EAAMrD,MAClB+G,SAAU,kBAAM1D,EAAM0D,UAAS,MAEjC,kBAAC,EAAAf,KAAD,CAAM/P,UAAU,oCAAhB,4FASR6S,GAAc5E,UAAY,CACxBxM,OAAQwM,YACNA,UAAgB,CACdhL,YAAagL,WACbzQ,GAAIyQ,cAENuD,YAGJ,Y,omBCpJA,IAAMoC,GAAkB,SAAC,GAAc,MAAZ1R,EAAY,EAAZA,MACnBiM,GAAcC,eACd7M,EAAc4M,EAAYG,WAAWD,OAAOtR,MAE5CmD,EAAUiO,EAAYG,WAAWD,OAAOvR,MAASoF,EAAM1E,KAAO,GAC9D4D,GACJ,UAAAG,EAAYF,MAAK,SAACC,GAAD,OAAOA,EAAE9D,KAAO0E,EAAM1E,aAAvC,eAA4C+D,cAAe,GACvDsS,EAAoBC,KAAO1S,EAAkB,MAC7C2S,EAAqBxE,KACzBnO,EACAyS,EACArE,MAGF,OACE,kBAAC,EAAAE,MAAD,CAAOC,WAAS,EAAC,yBAAuB,2BACtC,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAA/B,MAAD,CAAOC,aAAa,MAApB,0BACqB7H,QAAe/D,EAAM1E,OAG5C,kBAAC,EAAAoS,UAAD,KACGmE,EAAmBlW,OAAS,GAC3B,kBAAC,EAAA+R,UAAD,CAAW5P,UAAU,cACnB,kBAAC,EAAA6P,MAAD,CACE7M,QAAQ,UACR8M,UAAQ,EACRrQ,MACE,kBAAC,EAAAsQ,KAAD,eACS7R,QAAU6V,EAAmBlW,OAAQ,MAAO,QAAS,IAC5D,kBAAC,EAAAmS,QAAD,CACE,aAAW,gCACXC,YACE,kBAAC,EAAAtQ,SAAD,KACGoU,EAAmB/R,KAAI,SAACpC,EAAYd,GAAb,OACtB,yBAAKA,IAAKA,GAAMc,EAAWqD,kBAKjC,2BACE,kBAAC,EAAAkN,OAAD,CAAQnN,QAAQ,OAAO8M,UAAQ,GAC5BiE,EAAmBlW,QACZ,KACTK,QAAU6V,EAAmBlW,OAAQ,gBAE/B,IAlBb,iCAyBR,kBAAC,EAAAuS,YAAD,KACE,kBAAC,EAAAL,KAAD,uFAIA,kBAAC,EAAAA,KAAD,CAAM/P,UAAU,yCACbkC,EAAMxC,QAET,kBAAC,EAAAqQ,KAAD,CAAM/P,UAAU,yCAAhB,6BACyBE,EAAQrC,OADjC,aAC2CK,QACvCgC,EAAQrC,OACR,cAKR,kBAAC,EAAA+R,UAAD,KACE,yBAAK5P,UAAU,8BACZ6T,EAAkB7R,KAAI,SAACpC,EAAYX,GAAb,OACrB,yBACEe,UAAU,0BACVuQ,GAAI,GACJC,GAAI,EACJC,GAAI,EACJuD,GAAI,EACJlV,IAAKc,EAAWpC,IAEhB,kBAAC,EAAAyW,KAAD,CACExB,QAAS,kBACPtE,EAAYsB,OAAO/S,KAAnB,SACKyR,EAAYG,WAAWD,OAAO3R,OADnC,cAEGwF,EAAM1E,GAAKoC,EAAWpC,OAG3B0W,WACE/F,EAAYG,WAAWD,OAAO3R,MAAsBwF,EAAM1E,IACtD2Q,EAAYG,WAAWD,OAAO3R,MAC5BwF,EAAM1E,MACFoC,EAAWpC,GACP,IAAVyB,EAENQ,MAAOG,EAAWqD,aAElB,kBAAC,EAAAmN,YAAD,CAAapQ,UAAU,cACrB,kBAAC,EAAA+P,KAAD,CAAM/P,UAAU,yCAAhB,oBACyBkC,EAAM1E,GAAGF,MAAM,QAAQ,GADhD,KAIE,yBAAK0C,UAAU,yBACZJ,EAAWuG,aAAe,kBAAC,EAAApG,SAAD,MAAe,kBAAC,EAAAE,UAAD,MAC1C,kBAAC,EAAA8P,KAAD,CAAMrD,UAAU,QACb9M,EAAWuG,aACV,kBAEA,wCACS,kCADT,yBAiB1ByN,GAAgB3F,UAAY,CAC1B/L,MAAO+L,UAAgB,CACrBzQ,GAAIyQ,WACJvO,OAAQuO,WACRpO,UAAWoO,WACX/N,QAAS+N,YAAkBA,cAC1BuD,YAGL,Y,ykBChIA,IAAM2C,GAAS,SAAChU,GACd,IAAMgO,GAAcC,eACdU,EAAmBX,EAAYG,WAAWD,OAAOxR,MACjD6R,EACJP,EAAYG,WAAWD,OAAOzR,MAC1BsD,EAAUiO,EAAYG,WAAWD,OAAOvR,MAE9C,WACKqD,GADL,IAEEyB,KAAM,SACDzB,EAAMyB,MADP,IAEFH,OAAQtB,EAAMyB,KAAKH,OAAO9D,QACxB,SAACuE,GAAD,aAAW,UAAAhC,EAAQgC,EAAM1E,WAAd,eAAmBK,QAAS,SALrC+D,EAAR,EAAQA,KAAMwS,EAAd,EAAcA,WASNhH,GAAUD,OAAYhN,GAAtBiN,MACR,GAAsCmB,cAAS,CAC7CtP,WAAOsF,EACPrF,eAAWqF,IAFb,eAAO/F,EAAP,KAAoBsU,EAApB,KAKMpU,GAAkBwQ,kBACtB,gBAAkBxD,EAAlB,EAAGsG,YAAetG,MAAlB,OACEA,aAAA,EAAAA,EAAO1J,KAAI,SAACiQ,GAAD,MAAW,CAAEzU,GAAIyU,EAAKzU,GAAIiF,KAAMwP,EAAKC,mBAAoB,MAGlE3T,EAAUqD,EAAKH,OAAOO,KAAI,SAACE,GAC/B,IAAMd,GAAmBH,QACvBiB,EAAM1E,GACN2Q,EAAYG,WAAWD,QAEzB,GACEjN,aAAA,EAAAA,EAAmB,KAAM,GADnB6B,EAAR,EAAQA,YAA2BnD,EAAnC,EAAqBqG,aAErB,MAAO,CACLzG,OAAQ0U,EAAWlS,EAAM1E,IAAIyF,YAC7BrD,WAAYqD,EACZnD,cACAI,QAASA,EAAQgC,EAAM1E,SAI3B6R,gBAAU,WACRjC,EAAM0D,SACY,KAAhB1D,EAAMrD,MACFqD,EAAMrD,MACL2E,GAA4BI,EAAiBtM,aAC5CjE,EAAQyU,MAAK,SAAC5M,GAAD,OAAYA,EAAOtG,kBAEvC,IAEH,OAAwByO,eACtBjQ,QAAUC,EAASC,GAAa,EAAOE,IADzC,eAAOoC,EAAP,KAAaC,EAAb,KAQA,OAJAsO,gBAAU,WACRtO,GAAQzC,QAAUC,EAASC,GAAa,EAAOE,MAC9C,CAACF,IAGF,kBAAC,EAAAkR,MAAD,CAAOC,WAAS,EAAC,yBAAuB,iBACtC,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAQ,YAAD,KACE,kBAAC,EAAAL,KAAD,yDACoD,IAClD,2BAAI5B,EAAYG,WAAWD,OAAO5R,OAFpC,OAMH8B,EAAQyU,MAAK,SAAC1R,GAAD,OAAOA,EAAExB,gBACrB,kBAAC,EAAA8P,UAAD,KACE,kBAAC,EAAAQ,YAAD,KACE,kBAAC,EAAAL,KAAD,CAAM/P,UAAU,kCACd,kBAAC,EAAAqU,wBAAD,MADF,+DAON,kBAAC,EAAAzE,UAAD,KACE,kBAAC,EAAAQ,YAAD,KACE,kBAAC,EAAAL,KAAD,qBACe,2BAAI5B,EAAYG,WAAWD,OAAO5R,OAC9C2Q,EAAMrD,MACL,QAEA,0BAAM/J,UAAU,iCAAhB,aACC,IANL,0BAWJ,kBAAC,EAAA4P,UAAD,KACE,kBAAC,EAAAO,OAAD,CACEnN,QAAQ,OACR8M,UAAQ,EACR2C,QAAS,kBAAMrF,EAAM0D,UAAU1D,EAAMrD,SAHvC,QAKQqD,EAAMrD,MAAQ,MAAQ,KAL9B,gBAQF,kBAAC,GAAAmJ,MAAD,CACE,aAAW,UACXlT,UAAU,kCACVgD,QAASmQ,wBACT3T,MAAO,CACL,CACEC,MAAO,SACP2T,WAAY,CAACC,cAEf,CACE5T,MAAO,aACP2T,WAAY,CAACC,cAEf,CACE5T,MAAO,kBACP2T,WAAY,CAACC,cAEf,CACE5T,MAAO,UACP2T,WAAY,CAACC,aACbC,eAAgB,CAACC,iBAGrBzS,KAAMA,EACN0S,OAAQ,SAAC5S,EAAO3B,EAAOC,GAAf,OACN4T,EAAe,CAAE7T,QAAOC,eAE1ByB,WAAY,SAACC,EAAOC,EAAQtB,GAAhB,OACVoB,QAAWC,EAAOC,EAAQtB,EAAQuB,EAAMC,IAE1CmE,OAAQ1G,GAER,kBAAC,GAAAiV,YAAD,CAAaC,QAAM,IACnB,kBAAC,GAAAC,UAAD,SAMRQ,GAAOlG,UAAY,CACjBrM,KAAMqM,UAAgB,CACpBxM,OAAQwM,UACR/N,QAAS+N,UACTtL,qBAAsBsL,WACrBuD,WACH4C,WAAYnG,WAAA,UACTA,WAAmBA,UAAgB,CAClCzQ,GAAIyQ,WACJhL,YAAagL,eAEduD,YAGL,Y,glBCvLO,IAAM8C,GAA0B,CACrC9H,WAAW,EACXjL,iBAAagD,GAWf,qCACMkH,KADN,eANuB,SAACjI,EAAD,OAAUE,EAAV,EAAUA,QAAV,UAAC,SACnBF,GACAE,GAFkB,IAGrB8I,WAAW,QAGb,oBAEMf,KAFN,aARwB,SAACjI,GAAD,UAAC,MAAgBA,GAAjB,IAAwBgJ,WAAW,OAQ3D,I,gBCTM+H,GAAc,SAAC,GAAwB,IACvCvR,EACAvD,EAFiBsC,EAAsB,EAAtBA,QAASsB,EAAa,EAAbA,OAe9B,OAXgB,MAAZtB,GACFtC,EAAQ,YACRuD,EAAUwR,4BACDnR,GACT5D,EAAQ,QACRuD,EAAUwR,4BAEV/U,EAAQ,cACRuD,EAAUwR,yBAIV,kBAACC,YAAD,CACEjX,GAAI,8BACJuM,MAAOhI,EACPtC,MAAOA,EACPuD,QAASA,KAKfuR,GAAYtG,UAAY,CACtBlM,QAASkM,WACT5K,OAAQ4K,UAGV,Y,OCTMwG,GAAW,SAAC,GAA6D,IAA3DC,EAA2D,EAA3DA,QAASC,EAAkD,EAAlDA,QAAShT,EAAyC,EAAzCA,kBAAmBG,EAAsB,EAAtBA,SAAU0B,EAAY,EAAZA,MACjE,EAAuD,CACrDzB,QAASyB,EAAMzB,QACfsB,OAAQG,EAAMH,OACdnD,SAASnC,QAAYgB,OAAOsP,OAAO7K,EAAMrC,WAAWrE,OAAU8X,QAC9DnT,OAAQ1C,OAAOC,KAAKwE,EAAMrC,WAAWrE,OACrC+X,SAAU,CACRpS,KAAMe,EAAMrC,WAAW1E,MACvBe,GAAIgG,EAAMhG,KAPNuE,EAAR,EAAQA,QAASsB,EAAjB,EAAiBA,OAAQnD,EAAzB,EAAyBA,QAASuB,EAAlC,EAAkCA,OAAQoT,EAA1C,EAA0CA,SAW1C,OACE,kBAAC,EAAAvH,WAAD,CACEtK,QAASuK,0BACT,yBAAuB,mBAEvB,kBAAC,EAAAC,eAAD,CACExN,UAAU,wBACVyN,MACEpK,EACI,sCACY,MAAZtB,EACA,4CACAwC,EAENoJ,KACEtK,EACIuK,wBACY,MAAZ7L,EACA+S,kBACAC,mBAGR,kBAAC,EAAAlH,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3B1K,EACG,yCACY,MAAZtB,EACA,0BACA,gCAEN,kBAAC,EAAAiM,eAAD,CAAgBhO,UAAU,gCACxB,kBAAC,GAAD,CAAa+B,QAASA,EAASsB,OAAQA,MAEvCA,GAAsB,MAAZtB,IACV,kBAAC,EAAAiM,eAAD,CAAgBhO,UAAU,yBACvBqD,EACC,oBAEA,uCACM5B,EAAO5D,OADb,aACuBK,QACnBuD,EAAO5D,OACP,UAHJ,gDAKcqC,EAAQrC,OALtB,aAKgCK,QAC5BgC,EAAQrC,OACR,UAPJ,sCAUc4D,EAAO5D,OAAS,EAAI,OAAS,MAV3C,2BAYE,uBAAGqF,MAAM3F,QAAesX,EAASrX,KAAMqX,EAASpS,MAZlD,MAiBO,MAAZV,GACC,kBAAC,EAAAiM,eAAD,CAAgBhO,UAAU,gDAA1B,qEAEE,kBAAC,EAAAmQ,OAAD,CACEnQ,UAAU,uBACVgD,QAAQ,OACRgS,OAAO,uBACPrH,KAAM,kBAAC,EAAAsH,oBAAD,MACNC,aAAa,QACbC,SAAO,EACP1C,QAAS,kBACNtV,OAAOC,SAAS8F,KAAhB,UACC/F,OAAOC,SAASiN,OADjB,aAEGnN,UAFH,wBARL,mBAFF,wBAoBDmG,GACC,kBAAC,EAAA8M,OAAD,CACEnQ,UAAU,wBACVgD,QAAQ,UACRgS,OAAO,iBACPvC,QAAS,WACP3Q,EAAS,CAAEuB,QAAQ,EAAOtB,QAAS,IACnCJ,GAAkB,KANtB,aAYW,MAAZI,GACC,kBAAC,EAAAoO,OAAD,CACEnQ,UAAU,wBACVgD,QAAQ,UACRgS,OAAO,oBACPvC,QAAS,WACPiC,IACAC,GAAQ,KANZ,yBAYF,kBAAC,EAAAS,2BAAD,KACG/R,GACC,kBAAC,EAAA8M,OAAD,CACEnN,QAAQ,YACRgS,OAAO,qBACPvC,QAAS,WACPiC,MAJJ,yBAUW,MAAZ3S,GACC,kBAAC,EAAAoO,OAAD,CACEnN,QAAQ,OACR0J,UAAU,IACVsI,OAAO,qBACP9R,MAAM3F,QAAesX,EAASrX,IAC9BiV,QAAS,WACPiC,IACAC,GAAQ,KAPZ,iBAUiBE,EAASpS,SAQpCgS,GAASxG,UAAY,CACnByG,QAASW,SACTV,QAASU,SACT1T,kBAAmB0T,SACnBvT,SAAUuT,SACV7R,MAAO6R,UAAgB,CACrB7X,GAAI6X,WACJtT,QAASsT,sBACThS,OAAQgS,oBACRlU,WAAYkU,WAAA,iBACT5Y,KAAkB4Y,aADT,UAETvY,KAAUuY,aAAmBA,YAAkBA,cAFtC,QAOhB,Y,ykBC7IA,IAAMC,GAAe,CACnBC,WAAW,EACX/X,QAAI+G,EACJxC,QAAS,EACTsB,QAAQ,EACRlC,gBAAYoD,GAGRiR,GAAU,SAAChS,EAAO9D,GACtB,OAAQA,EAAO0H,MACb,IAAK,SACH,gBAAY5D,GAAZ,IAAmBiS,OAAQ/V,EAAOgE,UACpC,IAAK,QACH,gBAAYF,GAAU9D,EAAOgE,SAC/B,QACE,MAAM,IAAI4C,QAIHoP,GAAoB,SAAC,GAA0C,UAAxCf,EAAwC,EAAxCA,QAAS/S,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAU6P,EAAe,EAAfA,SACrDlR,GAAamV,aACjB5X,QAAW,UACT6D,EAAKH,cADI,aACT,EAAarC,QACX,SAACC,EAAKC,GAAN,wBAAmBD,IAAnB,OAA4BC,EAAKY,SAAW,QAD9C,OAEO0B,EAAK1B,SAAW,OAKrByR,GAAWC,mBAEjB,GAA0BgE,gBAAWJ,GAASF,IAA9C,eAAO9R,EAAP,KAAc1B,EAAd,KAEMsS,EAAa/I,IAAMzJ,EAAKH,QAAQ,SAACS,GAAD,OAAWA,EAAM1E,OAUvD6R,gBAAU,WVaZ,IAAgB5N,EUZZK,EAAS,CAAEsF,KAAM,SAAU1D,SVYfjC,EUZsCG,EAAKH,OVY/B,CAC1BoU,OAAQ,CACN,CACEnJ,UAAWI,WACXrK,KAAM,sBACNqT,WAAW,EACXC,SAAS,EACTC,YAAY,EACZvW,MAAO,yBACPwD,YAAa,qCACb4S,OAAQ,CACN,CACEpT,KAAM,WACNhD,MAAO,kBACPoW,OAAQpJ,EACRwJ,SAAU,WAEZ,CACExT,KAAM,UACNhD,MAAO,iBACPoW,OAAQ,CACN,CACEpT,KAAM3F,KACN4P,UAAW,iBACXC,SAAU,CAAC,CAAEvF,KAAM,uBAGvB6O,SAAU,oBA3CkB5H,EA2ClB,EAAGA,QA1CSzR,MAC1ByR,EAAOrR,MAAiBW,QACtB,SAACuE,GAAD,OACGmM,EAAOxR,MAAmB4E,OAAOuR,MAChC,SAACtR,GAAD,OACEA,EAAElE,KAAO0E,EAAM1E,IACfuB,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,UAGpD6Q,EAAOrR,MAAiBW,QAAO,SAACuE,GAAD,OAC7BnD,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,QAE5BK,OAAS,EAAI,UAAY,SAbZ,IAACwQ,IA6C9B,CACE5L,KAAM,UACNhD,MAAO,0BACPoW,OAAQ7I,EACRiJ,SAAU,mBAnFkB5H,EAmFlB,EAAGA,OAlFf6H,EAAiB7H,EAAOzR,MAC1ByR,EAAOrR,MAAiBW,QACtB,SAACuE,GAAD,OACGmM,EAAOxR,MAAmB4E,OAAOuR,MAAK,SAACtR,GAAD,OAAOA,EAAElE,KAAO0E,EAAM1E,OAC7DuB,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,OAEhD6Q,EAAOrR,MAAiBW,QAAO,SAACuE,GAAD,OAC7BnD,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,OAE3C6Q,EAAO1R,MAAP,UAA4BuZ,EAAe,UAA3C,aAA4B,EAAmB1Y,GAAK,SAVxB,IAAC6Q,EAAW,EACzC6H,KA2DI,gBAyBAzU,aAAA,EAAAA,EAAQO,KAAI,SAACE,GAAD,MAAY,CAC1BO,KAAMP,EAAM1E,GACZiC,OAAOwG,QAAe/D,EAAM1E,IAC5B2Y,WAAW,EACXN,OAAQ,CACN,CACEpT,KAAMP,EAAM1E,GACZkP,UAAW,mBACXxK,SAEF,CACEO,KAAM/F,KACNgQ,UAAWI,eACXC,WAAW,IAGfkJ,SAAU,mBAxFmB,SAAC5H,EAAQnM,GAAU,MAClDgU,EAAiB7H,EAAOzR,MAC1ByR,EAAOrR,MAAiBW,QACtB,SAACuE,GAAD,OACGmM,EAAOxR,MAAmB4E,OAAOuR,MAChC,SAACtR,GAAD,OACEA,EAAElE,KAAO0E,EAAM1E,IACfuB,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,UAGpD6Q,EAAOrR,MAAiBW,QAAO,SAACuE,GAAD,OAC7BnD,OAAOC,KAAKqP,EAAOvR,OAAUyD,SAAS2B,EAAM1E,OAElD,OACE,UAAA0Y,EAAe5Z,MACb4Z,EAAeE,WAAU,SAAC1U,GAAD,OAAOA,EAAElE,KAAO0E,EAAM1E,MAAM,EACrD0Y,EAAerY,QACf,UAHF,eAGML,KAAM,SAuEoB6Y,CAAhB,EAAGhI,OAA6CnM,IAC1DoU,UAAW,uBACN,IA3CH,CA4CJ,CACE7T,KAAM,SACNhD,MAAO,qBACPoW,OAAQ,CACN,CACEpT,KAAMjG,KACNkQ,UAAW,oBUvErBgF,EAAS6E,SAAS,CAChBvE,aAAarM,QAAiBqM,EAAazF,GAC3C4C,oBAAoBxJ,QAClBwJ,GACAmF,MAGJ3C,EZnE4B,eAAClQ,EAAD,uDAAU,GAAV,MAAkB,CAChD2F,KAAMqE,KACN/H,QAASwI,EAAiBzK,IYiEf+U,CAAiB5U,EAAKH,SAjBV,WAAkB,IAAjBvB,EAAiB,uDAAP,GAC1BmF,EAAW,IACFF,QAAWjF,EAASmF,GAC5BiD,SAAQ,SAACmO,GACd9E,EAAS5F,EAAe0K,EAAO,CAAE5R,KAAM,EAAGgH,QAASxG,QAcrDqR,CAAelW,EAAWmW,WACzB,IAEH,IAAMC,EAAkB,CACtB,kBAAmB,CACjBlK,UAAWwB,GACXzM,OAAQG,EAAKH,OACbvB,QAAS0B,EAAK1B,QACdM,WAAYA,EAAWmW,SAEzB,iBAAkB,CAChBjK,UAAW+E,GACXhQ,OAAQG,EAAKH,OACbvB,QAAS0B,EAAK1B,SAAW,GACzBM,WAAYA,EAAWmW,QACvBjF,YAEF,iBAAkB,CAChBhF,UAAWmG,GACXpR,OAAQG,EAAKH,QAEf,mBAAoB,CAClBiL,UAAWkH,IAEbiD,OAAQ,CACNnK,UAAWyH,GACXvS,OACAwS,WAAYA,IAIV0C,EAAkB,CACtB,mBAAoB,kBAAM,SAAC/M,GAAD,OACxBA,GACAhL,OAAOsP,OAAOtE,GAAOpM,QAAO,SAACoM,GAAD,YAA4BxF,KAAjB,OAAOwF,MAAqBlM,YAC/D0G,EACA,6GAGR,OACE,kBAAC,EAAA5E,SAAD,KACG6D,EAAMiS,SAAWjS,EAAM+R,UACtB,kBAAC,IAAD,CACEE,OAAQjS,EAAMiS,OACdsB,aAAc,CAAE1I,QAAQ,GACxB2I,aAAc,SAAC7W,GAAD,OACZ,kBAAC,MAAD,UAAqBA,EAArB,CAA4B8W,kBAAkB,MAEhDC,eAAa,eACVna,KAAc,KADJ,SAEVC,KAAkB,KAFR,SAGVF,KAAU,KAHA,SAIVH,MAAoB,IAJV,SAKVD,KAAuB,KALb,SAMVE,MAA6B,GANnB,GAQbua,gBAAe,mBACZrK,WAAwB,CACvBJ,UAAW0K,IACXpX,UAAW,eACX,yBAA0B,wBAJf,SAMZ8M,eAA4BuK,KANhB,GAOVT,GAELE,gBAAiBA,EACjBQ,SAAU,SAACnW,GACTW,EAAS,CACPsF,KAAM,QACN1D,QAAS,CAAE6R,WAAW,EAAMpU,WAAYA,MAE1CQ,QAAkBR,EAAYS,EAAMC,GAAU,SAAC6B,GAAD,OAC5C5B,EAAS,CAAEsF,KAAM,QAAS1D,QAASA,QAGvC6T,SAAU,kBAAM5C,GAAQ,MAExB,KACHnR,EAAM+R,UACL,kBAAC,EAAAiC,MAAD,CACEjY,QAAM,EACNyD,QAASyU,qBACTC,WAAW,EACX1X,UAAU,eACV2X,kBAAgB,EAChB,mBAAiB,wBACjB,kBAAgB,mBAEhB,kBAAC,EAAAC,OAAD,CACE5X,UAAU,eACVP,MAAO,yBACPwD,YAAa,qCACb4U,MAAO,CACL,CACEpV,KAAM,WACNiK,UACE,kBAAC,GAAD,CACEgI,QAAS,WACP5S,EAAS,CACPsF,KAAM,QACN1D,QAAS,CACP6R,WAAW,EACX/X,QAAI+G,EACJlB,QAAQ,EACRlC,gBAAYoD,MAIlB9E,MAAO,+BACPkV,QAASA,EACThT,kBAAmB,kBACjBA,QACE6B,EAAMrC,WACNS,EACAC,GACA,SAAC6B,GAAD,OACE5B,EAAS,CAAEsF,KAAM,QAAS1D,QAASA,QAGzC5B,SAAU,SAAC4B,GAAD,OACR5B,EAAS,CAAEsF,KAAM,QAAS1D,QAASA,KAErCF,MAAOA,IAGXsU,gBAAgB,IAGpBpD,QAAS,WACP5S,EAAS,CACPsF,KAAM,QACN1D,QAAS,CACP6R,WAAW,EACX/X,QAAI+G,EACJlB,QAAQ,EACRlC,gBAAYoD,KAGhBoQ,GAAQ,OAIZ,OAKVe,GAAkBzH,UAAY,CAC5B0G,QAAS1G,oBACTrM,KAAMqM,UAAgB,CACpBxM,OAAQwM,YACNA,UAAgB,CACdhL,YAAagL,WACbzQ,GAAIyQ,cAGR/N,QAAS+N,YAAkBA,YAC3BtL,qBAAsBsL,WACrBuD,WACH3P,SAAUoM,WACVyD,SAAUzD,UAAgB,CACxBsI,SAAUtI,WACTuD,YAiBL,SAdqC,SAACrR,GACpC,OAAgCoO,gBAAhC,eAAOmD,EAAP,KAAiBqG,EAAjB,KAMA,OAJA1I,gBAAU,WACR0I,GAAY,kBAAM,IAAInF,KAAgB,GAAI,CAACoF,WAC1C,IAEItG,WAAUuG,MACf,kBAAC,EAAAC,SAAD,CAAUD,MAAOvG,EAASuG,OACxB,kBAACvC,IAAD,UAAuBvV,EAAvB,CAA8BuR,SAAUA,MAExC,O,mxBCxQN,IAAMW,EAAe,SAAC,GAOhB,IANJX,EAMI,EANJA,SACAhT,EAKI,EALJA,gBACA8B,EAII,EAJJA,WACA8R,EAGI,EAHJA,YACA7R,EAEI,EAFJA,gBACA8R,EACI,EADJA,WAEM4F,GAAYxC,YAAO,MACnBxR,EAAkB,CAAC,gBAEzB,OACE,kBAAC,IAAD,CACEiU,YAAa,CACXC,MAAM,EACNC,gBAAgB,EAChBC,OAAO,GAETC,QAAS,SAACA,GAAD,OACPA,EAAQpZ,QACN,SAACC,EAAKC,GAAN,wBACKD,IADL,OAEOoB,EAAgBF,SAASjB,EAAKR,KAU/B,GATA,CAAC,EAAD,KAEOQ,GAFP,IAGIa,MAAO,EAAF,KACCb,EAAKa,OAAS,IADf,IAEHsY,UAAWtU,EAAgB5D,SAASjB,EAAKR,cAMrD,KAGJ4Z,UAAQ,EACR1V,QAAQ,UACRsP,YAAaA,EACbqG,UAAQ,EACRpG,WAAYA,EACZqG,UAAW,SAAC5M,GAAD,OAAamM,EAAUxB,QAAQkC,cAAc7M,IACxD8M,IAAKX,EACL/T,YAAa,SAAC2U,EAAI7U,EAAQyU,EAAUK,GAAvB,OACX/U,QACEC,EACAC,EACAzF,EACAsa,IAGJC,OAAQ,YAAmD,IAAhDC,EAAgD,EAAhDA,kBAAmBC,EAA6B,EAA7BA,uBAC5BzH,EAAS6E,SACP2C,GAAkBE,QAAgB5Y,EAAY2Y,MAGlDE,WAAY,CACVC,cAAc,MAMtBjH,EAAakH,aAAe,CAC1B9Y,gBAAiB,GACjB6R,aAAa,GAGfD,EAAapE,UAAY,CACvByD,SAAUzD,eAAqB2E,MAAiBpB,WAChD9S,gBAAiBuP,YACfA,UAAgB,CACdzQ,GAAIyQ,WACJxL,KAAMwL,cAERuD,WACFhR,WAAYyN,YAAkBA,YAAkBuD,WAChDc,YAAarE,SACbxN,gBAAiBwN,YAAkBA,YACnCsE,WAAYtE,YAGP,IAAMuL,EAA0B,SAACrZ,GACtC,OAAgCoO,gBAAhC,eAAOmD,EAAP,KAAiBqG,EAAjB,KAMA,OAJA1I,gBAAU,WACR0I,GAAY,kBAAM,IAAInF,KAAgB,GAAI,CAACoF,WAC1C,IAEItG,WAAUuG,MACf,kBAAC,EAAAC,SAAD,CAAUD,MAAOvG,EAASuG,OACxB,yBAAKjY,UAAU,cACb,kBAACqS,GAAD,UAAkBlS,EAAlB,CAAyBuR,SAAUA,OAGrC,MAGN","file":"js/381.53e4bac40870f8137071.js","sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { CloseIcon, RedoIcon } from '@patternfly/react-icons';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () =>\n  window.location.pathname\n    .split('/')\n    .filter((s) => s !== 'beta' && s.length > 0)\n    .shift();\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'beta' ? 'beta/' : '';\n};\n\nexport const remediationUrl = (id) =>\n  `${document.baseURI}${getGroup()}/remediations${id ? `/${id}` : ''}`;\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>\n                <RedoIcon className=\"pf-u-mr-sm\" />\n                Yes\n              </div>\n            ) : (\n              <div>\n                <CloseIcon className=\"pf-u-mr-sm\" />\n                No\n              </div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              cells: [\n                {\n                  title: (\n                    <Router>\n                      <SystemsTableWithContext\n                        allSystemsNamed={allSystemsNamed.filter((system) =>\n                          curr.systems.includes(system.id)\n                        )}\n                        allSystems={curr.systems}\n                        disabledColumns={['updated']}\n                      />\n                    </Router>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK],\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    .then(({ id }) => {\n      setState({ id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(id, formValues[SELECT_PLAYBOOK], !isUpdate),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems, sortBy) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n  return {\n    ...state,\n    selected,\n    rows: sortByAttr(\n      state.rows.map(({ id, ...row }) => ({\n        id,\n        ...row,\n        selected: !!selected?.includes(id),\n      })),\n      'display_name',\n      sortBy?.direction || 'asc'\n    ),\n    sortBy,\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const sortByAttr = (systems, attribute, direction) =>\n  Array.isArray(systems)\n    ? systems.sort(\n        (a, b) =>\n          ((a[attribute] > b[attribute] && 1) || -1) *\n          (direction === 'asc' ? 1 : -1)\n      )\n    : [];\n\nexport const fetchSystemsInfo = async (\n  config,\n  sortableColumns = [],\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const isSortingValid = sortableColumns.includes(config.orderBy);\n  config.orderBy = isSortingValid ? config.orderBy : undefined;\n  config.orderDirection = isSortingValid\n    ? config.orderDirection?.toLowerCase()\n    : undefined;\n  allSystemsNamed = sortByAttr(allSystemsNamed, 'name', config.orderDirection);\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ? [curr.id] : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(sliced, { ...config, hasItems: true, page: 1 }, true)\n      : {};\n  return {\n    ...{\n      ...data,\n      results: sortByAttr(data.results, 'display_name', config.orderDirection),\n    },\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n    orderBy: config.orderBy,\n    orderDirection: config.orderDirection,\n    sortBy: { key: config.orderBy, direction: config.orderDirection },\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state, { payload }) =>\n      loadEntitiesFulfilled(state, allSystems, {\n        key: payload.orderBy,\n        direction: payload.orderDirection,\n      }),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), ...systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n","const HEADERS = {\n  'Content-Type': 'application/json; charset=utf-8',\n};\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function checkResponse(r) {\n  if (r.ok) {\n    return r;\n  }\n\n  if (r.status === 401) {\n    window.insights.chrome.auth.logout();\n    return;\n  }\n\n  if (r.headers.get('content-type').includes('application/json')) {\n    // let's try to extract some more info\n    let data = false;\n    try {\n      data = await r.json();\n    } catch (e) {} // eslint-disable-line no-empty\n\n    if (data.errors && data.errors.length) {\n      const error = data.errors[0];\n\n      if (error.details && error.details.name) {\n        throw new HttpError(`${error.title} (${error.details.name})`);\n      }\n\n      throw new HttpError(error.title);\n    }\n  }\n\n  throw new HttpError(`Unexpected response code ${r.status}`);\n}\n\nasync function json(r) {\n  if (!r) {\n    return;\n  }\n\n  const type = r.headers.get('content-type');\n  if (!type.includes('application/json')) {\n    throw new HttpError(`Unexpected response type (${type}) returned`);\n  }\n\n  return r.json();\n}\n\nfunction doFetch(\n  uri,\n  method = 'GET',\n  data = false,\n  headers = false,\n  options = {}\n) {\n  const opts = {\n    credentials: 'same-origin',\n    method,\n    ...options,\n  };\n\n  if (headers) {\n    opts.headers = headers;\n  }\n\n  if (data) {\n    opts.body = JSON.stringify(data);\n  }\n\n  return fetch(uri, opts);\n}\n\nexport function doGet(uri) {\n  return doFetch(uri.toString()).then(checkResponse).then(json);\n}\n\nexport function doPost(uri, data) {\n  return doFetch(uri, 'POST', data, HEADERS).then(checkResponse).then(json);\n}\n\nexport function doPatch(uri, data) {\n  return doFetch(uri, 'PATCH', data, HEADERS).then(checkResponse);\n}\n\nexport function doDelete(uri) {\n  return doFetch(uri, 'DELETE').then(checkResponse);\n}\n","import { API_BASE, SOURCES_BASE } from '../config';\n\nimport axios from 'axios';\nimport {\n  RemediationsApi,\n  ResolutionsApi,\n  RemediationsApiAxiosParamCreator,\n} from '@redhat-cloud-services/remediations-client';\nimport { DefaultApi } from '@redhat-cloud-services/sources-client';\n\n/*\n * TODO: replace these with generated clients\n */\nimport { doGet } from '../Utilities/http';\nimport urijs from 'urijs';\n\nfunction url(...args) {\n  const url = urijs(API_BASE).segment('remediations');\n  args.forEach((segment) => url.segment(segment));\n  return url;\n}\n\nexport const getRemediationStatus = (id) => doGet(url(id, 'status'));\nexport function getHosts() {\n  return doGet('/api/inventory/v1/hosts');\n}\n/*\n * end of TODO\n */\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function authInterceptor(config) {\n  await window.insights.chrome.auth.getUser();\n  return config;\n}\n\nfunction responseDataInterceptor(response) {\n  if (response.data) {\n    return { ...response.data, etag: response.headers.etag };\n  }\n\n  return response;\n}\n\nfunction interceptor401(err) {\n  if (!err) {\n    return;\n  }\n\n  if (err.response && err.response.status === 401) {\n    window.insights.chrome.auth.logout();\n    return false;\n  }\n\n  throw err;\n}\n\nfunction errorInterceptor(err) {\n  if (!err) {\n    return;\n  }\n\n  if (\n    err.response &&\n    err.response.data &&\n    err.response.data.errors &&\n    err.response.data.errors.length\n  ) {\n    const error = err.response.data.errors[0];\n\n    if (error.details && error.details.name) {\n      throw new HttpError(`${error.title} (${error.details.name})`);\n    }\n\n    throw new HttpError(error.title);\n  }\n\n  throw err;\n}\n\nconst instance = axios.create();\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport const remediations = new RemediationsApi(undefined, API_BASE, instance);\nexport const resolutions = new ResolutionsApi(undefined, API_BASE, instance);\nexport const sources = new DefaultApi(undefined, SOURCES_BASE, instance);\n\nexport function downloadPlaybook(selectedIds) {\n  return new Promise((resolve, reject) => {\n    const tab =\n      selectedIds.length > 1\n        ? new RemediationsApiAxiosParamCreator()\n            .downloadPlaybooks(selectedIds)\n            .then((value) => window.open(API_BASE + value.url))\n        : new RemediationsApiAxiosParamCreator()\n            .getRemediationPlaybook(selectedIds[0])\n            .then((value) => window.open(API_BASE + value.url));\n\n    if (!tab) {\n      return reject();\n    }\n\n    const handle = setInterval(() => {\n      if (tab.closed) {\n        clearInterval(handle);\n        resolve();\n      }\n    }, 500);\n  });\n}\n\nexport function getIsReceptorConfigured() {\n  return doGet(\n    `${window.location.origin}/api/sources/v2.0/endpoints?filter[receptor_node][not_nil]`\n  );\n}\n\nexport function deleteSystemsFromRemediation(systems, remediation) {\n  return Promise.all(\n    systems.flatMap((system) =>\n      system.issues.map((issue) =>\n        remediations.deleteRemediationIssueSystem(\n          remediation.id,\n          issue.id,\n          system.id\n        )\n      )\n    )\n  );\n}\n\nfunction checkResponse(r) {\n  if (!r.ok) {\n    const error = new Error(`Unexpected response code ${r.status}`);\n    error.statusCode = r.status;\n    throw error;\n  }\n\n  return r;\n}\n\nfunction json(r) {\n  checkResponse(r);\n  return r.json();\n}\n\nconst headers = Object.freeze({\n  'Content-Type': 'application/json; charset=utf-8',\n});\n\nexport function createRemediation(data) {\n  const uri = new urijs(API_BASE).segment('remediations').toString();\n  return fetch(uri, {\n    headers,\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify(data),\n  }).then(json);\n}\n\nexport function patchRemediation(id, data) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  }).then(checkResponse);\n}\n\nexport function getRemediations() {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .query({ limit: 200 })\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getRemediation(id) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getResolutionsBatch(issues) {\n  const uri = new urijs(API_BASE).segment('resolutions').toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'POST',\n    body: JSON.stringify({ issues }),\n  }).then(json);\n}\n","export const API_BASE = '/api/remediations/v1';\nexport const SOURCES_BASE = '/api/sources/v2.0';\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst asyncActions = flatMap(\n  [\n    'LOAD_REMEDIATIONS',\n    'CREATE_REMEDIATIONS',\n    'LOAD_REMEDIATION',\n    'LOAD_REMEDIATION_STATUS',\n    'REFRESH_REMEDIATION',\n    'PATCH_REMEDIATION',\n    'DELETE_REMEDIATION',\n    'DELETE_REMEDIATION_ISSUE',\n    'DELETE_REMEDIATION_ISSUE_SYSTEM',\n    'PATCH_REMEDIATION_ISSUE',\n    'GET_RESOLUTIONS',\n    'GET_CONNECTION_STATUS',\n    'RUN_REMEDIATION',\n    'EXECUTE_PLAYBOOK_BANNER',\n    'RUN_REMEDIATION',\n    'GET_PLAYBOOK_RUNS',\n    'GET_PLAYBOOK_RUN',\n    'GET_PLAYBOOK_RUN_SYSTEMS',\n    'GET_PLAYBOOK_RUN_SYSTEM_DETAILS',\n    'CANCEL_PLAYBOOK_RUNS',\n    'GET_ENDPOINT',\n    'CHECK_EXECUTABLE',\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nconst actions = ['SET_ETAG', 'EXPAND_INVENTORY_TABLE', 'SELECT_ENTITY'];\nexport const ACTION_TYPES = keyBy([...asyncActions, ...actions], (k) => k);\n\nexport const SEARCH_DEBOUNCE_DELAY = 500;\n\nexport const FETCH_SELECTED_HOSTS = 'FETCH_SELECTED_HOSTS';\nexport const FETCH_RESOLUTIONS = 'FETCH_RESOLUTIONS';\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\n\nexport const selectPlaybookFields = [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields,\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.small}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Unexpected error\n      </Title>\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  FormSelect,\n  FormSelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <FormSelect\n                onChange={(val) => {\n                  setIsLoadingRemediation(true);\n                  api.getRemediation(val).then((remediation) => {\n                    setSelectedPlaybook(remediation);\n                    setIsLoadingRemediation(false);\n                    existingPlaybookSelected &&\n                      input.onChange(remediation.name);\n                    existingPlaybookSelected &&\n                      formOptions.change(EXISTING_PLAYBOOK, remediation);\n                  });\n                }}\n                value={selectedPlaybook?.id || ''}\n                aria-label=\"Select an existing playbook\"\n              >\n                {existingRemediations?.length ? (\n                  [\n                    <FormSelectOption\n                      key=\"select-playbook-placeholder\"\n                      value=\"\"\n                      label=\"Select playbook\"\n                      isDisabled\n                    />,\n                    ...existingRemediations.map(({ id, name }) => (\n                      <FormSelectOption key={id} value={id} label={name} />\n                    )),\n                  ]\n                ) : (\n                  <FormSelectOption\n                    key=\"empty\"\n                    value=\"empty\"\n                    label=\"No existing playbooks\"\n                  />\n                )}\n              </FormSelect>\n            ) : (\n              <Skeleton size={SkeletonSize.lg} />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(val) => {\n                  setNewPlaybookName(val);\n                  existingPlaybookSelected || input.onChange(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n              />\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { dedupeArray, TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = dedupeArray([\n        ...systems,\n        ...(curr.systems || []),\n      ]).filter((id) => selected?.includes(id));\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-systems\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Router>\n          <SystemsTable\n            registry={registry}\n            allSystemsNamed={allSystemsNamed}\n            allSystems={allSystems}\n            hasCheckbox={true}\n            bulkSelect={{\n              id: 'select-systems',\n              count: selected.length,\n              items: [\n                {\n                  title: 'Select none (0)',\n                  onClick: () => onSelectRows(false),\n                },\n                ...(loaded && rowsLength > 0\n                  ? [\n                      {\n                        title: `Select page (${rowsLength})`,\n                        onClick: () => onSelectRows(true),\n                      },\n                    ]\n                  : []),\n              ],\n              checked: selected.length > 0,\n              onSelect: (value) => onSelectRows(value),\n            }}\n            onSelectRows\n          />\n        </Router>\n      </StackItem>\n      {error && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">{error}</span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-actions\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"rem-c-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"rem-c-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { RedoIcon, CloseIcon } from '@patternfly/react-icons';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div\n              className=\"ins-c-resolution-option\"\n              sm={12}\n              md={6}\n              lg={4}\n              xl={3}\n              key={resolution.id}\n            >\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      {resolution.needs_reboot ? <RedoIcon /> : <CloseIcon />}\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() => input.onChange(!input.value)}\n        >\n          Turn {input.value ? 'off' : 'on'} autoreboot\n        </Button>\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      id={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateIcon\n        className=\"pf-u-mb-lg pf-u-mt-sm\"\n        color={\n          failed\n            ? 'var(--pf-global--danger-color--100)'\n            : percent === 100\n            ? 'var(--pf-global--success-color--100)'\n            : undefined\n        }\n        icon={\n          failed\n            ? ExclamationCircleIcon\n            : percent === 100\n            ? CheckCircleIcon\n            : InProgressIcon\n        }\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {failed\n          ? 'Error: Unable to add items to playbook'\n          : percent === 100\n          ? 'Items added to playbook'\n          : 'Adding items to the playbook'}\n      </Title>\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      {(failed || percent === 100) && (\n        <EmptyStateBody className=\"pf-c-progress-message\">\n          {failed ? (\n            'Please try again.'\n          ) : (\n            <div>\n              {`${issues.length} ${pluralize(\n                issues.length,\n                'action'\n              )} affecting \n                        ${systems.length} ${pluralize(\n                systems.length,\n                'system'\n              )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n              <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n            </div>\n          )}\n        </EmptyStateBody>\n      )}\n      {percent === 100 && (\n        <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n          You can remediate these systems directly from Insights by enabling\n          <Button\n            className=\"pf-u-py-0 pf-u-px-xs\"\n            variant=\"link\"\n            ouiaId=\"CloudConnectorButton\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isSmall\n            onClick={() =>\n              (window.location.href = `${\n                window.location.origin\n              }/${getEnvUrl()}settings/connector`)\n            }\n          >\n            Cloud Connector\n          </Button>\n          on eligible systems.\n        </EmptyStateBody>\n      )}\n      {failed && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"TryAgainButton\"\n          onClick={() => {\n            setState({ failed: false, percent: 0 });\n            submitRemediation(false);\n          }}\n        >\n          Try again\n        </Button>\n      )}\n      {percent === 100 && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"ReturnToAppButton\"\n          onClick={() => {\n            onClose();\n            setOpen(false);\n          }}\n        >\n          Return to application\n        </Button>\n      )}\n      <EmptyStateSecondaryActions>\n        {failed && (\n          <Button\n            variant=\"secondary\"\n            ouiaId=\"BackToWizardButton\"\n            onClick={() => {\n              onClose();\n            }}\n          >\n            Go back to the wizard\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            variant=\"link\"\n            component=\"a\"\n            ouiaId=\"OpenPlaybookButton\"\n            href={remediationUrl(playbook.id)}\n            onClick={() => {\n              onClose();\n              setOpen(false);\n            }}\n          >\n            Open playbook {playbook.name}\n          </Button>\n        )}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...(data.systems || [])]\n      )\n    )\n  );\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    setState({ type: 'schema', payload: schemaBuilder(data.issues) });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, []);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems || [],\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== undefined).length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n  const sortableColumns = ['display_name'];\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.reduce(\n          (acc, curr) => [\n            ...acc,\n            ...(!disabledColumns.includes(curr.key)\n              ? [\n                  {\n                    ...curr,\n                    props: {\n                      ...(curr.props || {}),\n                      isStatic: !sortableColumns.includes(curr.key),\n                    },\n                  },\n                ]\n              : []),\n          ],\n          []\n        )\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      onRefresh={(options) => inventory.current.onRefreshData(options)}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(\n          config,\n          sortableColumns,\n          allSystemsNamed,\n          defaultGetEntities\n        )\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"sourceRoot":""}