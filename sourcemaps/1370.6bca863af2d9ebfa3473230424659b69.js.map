{"version":3,"file":"js/1370.f3e35bb6ec0ccf88ccd5.js","mappings":"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","sources":["webpack:///./src/api/inventory.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/store/actions/host-actions.js"],"sourcesContent":["import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\n\nexport const selectPlaybookFields = [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields,\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.small}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Unexpected error\n      </Title>\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  FormSelect,\n  FormSelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <FormSelect\n                onChange={(val) => {\n                  setIsLoadingRemediation(true);\n                  api.getRemediation(val).then((remediation) => {\n                    setSelectedPlaybook(remediation);\n                    setIsLoadingRemediation(false);\n                    existingPlaybookSelected &&\n                      input.onChange(remediation.name);\n                    existingPlaybookSelected &&\n                      formOptions.change(EXISTING_PLAYBOOK, remediation);\n                  });\n                }}\n                value={selectedPlaybook?.id || ''}\n                aria-label=\"Select an existing playbook\"\n              >\n                {existingRemediations?.length ? (\n                  [\n                    <FormSelectOption\n                      key=\"select-playbook-placeholder\"\n                      value=\"\"\n                      label=\"Select playbook\"\n                      isDisabled\n                    />,\n                    ...existingRemediations.map(({ id, name }) => (\n                      <FormSelectOption key={id} value={id} label={name} />\n                    )),\n                  ]\n                ) : (\n                  <FormSelectOption\n                    key=\"empty\"\n                    value=\"empty\"\n                    label=\"No existing playbooks\"\n                  />\n                )}\n              </FormSelect>\n            ) : (\n              <Skeleton size={SkeletonSize.lg} />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(val) => {\n                  setNewPlaybookName(val);\n                  existingPlaybookSelected || input.onChange(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n              />\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { dedupeArray, TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = dedupeArray([\n        ...systems,\n        ...(curr.systems || []),\n      ]).filter((id) => selected?.includes(id));\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-systems\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <SystemsTable\n          registry={registry}\n          allSystemsNamed={allSystemsNamed}\n          allSystems={allSystems}\n          hasCheckbox={true}\n          bulkSelect={{\n            id: 'select-systems',\n            count: selected.length,\n            items: [\n              {\n                title: 'Select none (0)',\n                onClick: () => onSelectRows(false),\n              },\n              ...(loaded && rowsLength > 0\n                ? [\n                    {\n                      title: `Select page (${rowsLength})`,\n                      onClick: () => onSelectRows(true),\n                    },\n                  ]\n                : []),\n            ],\n            checked: selected.length > 0,\n            onSelect: (value) => onSelectRows(value),\n          }}\n          onSelectRows\n        />\n      </StackItem>\n      {error && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">{error}</span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-actions\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"rem-c-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"rem-c-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div\n              className=\"ins-c-resolution-option\"\n              sm={12}\n              md={6}\n              lg={4}\n              xl={3}\n              key={resolution.id}\n            >\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() => input.onChange(!input.value)}\n        >\n          Turn {input.value ? 'off' : 'on'} autoreboot\n        </Button>\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      id={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateIcon\n        className=\"pf-u-mb-lg pf-u-mt-sm\"\n        color={\n          failed\n            ? 'var(--pf-global--danger-color--100)'\n            : percent === 100\n            ? 'var(--pf-global--success-color--100)'\n            : undefined\n        }\n        icon={\n          failed\n            ? ExclamationCircleIcon\n            : percent === 100\n            ? CheckCircleIcon\n            : InProgressIcon\n        }\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {failed\n          ? 'Error: Unable to add items to playbook'\n          : percent === 100\n          ? 'Items added to playbook'\n          : 'Adding items to the playbook'}\n      </Title>\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      {(failed || percent === 100) && (\n        <EmptyStateBody className=\"pf-c-progress-message\">\n          {failed ? (\n            'Please try again.'\n          ) : (\n            <div>\n              {`${issues.length} ${pluralize(\n                issues.length,\n                'action'\n              )} affecting \n                        ${systems.length} ${pluralize(\n                systems.length,\n                'system'\n              )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n              <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n            </div>\n          )}\n        </EmptyStateBody>\n      )}\n      {percent === 100 && (\n        <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n          You can remediate these systems directly from Insights by enabling\n          <Button\n            className=\"pf-u-py-0 pf-u-px-xs\"\n            variant=\"link\"\n            ouiaId=\"CloudConnectorButton\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isSmall\n            onClick={() =>\n              (window.location.href = `${\n                window.location.origin\n              }/${getEnvUrl()}settings/connector`)\n            }\n          >\n            Cloud Connector\n          </Button>\n          on eligible systems.\n        </EmptyStateBody>\n      )}\n      {failed && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"TryAgainButton\"\n          onClick={() => {\n            setState({ failed: false, percent: 0 });\n            submitRemediation(false);\n          }}\n        >\n          Try again\n        </Button>\n      )}\n      {percent === 100 && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"ReturnToAppButton\"\n          onClick={() => {\n            onClose();\n            setOpen(false);\n          }}\n        >\n          Return to application\n        </Button>\n      )}\n      <EmptyStateSecondaryActions>\n        {failed && (\n          <Button\n            variant=\"secondary\"\n            ouiaId=\"BackToWizardButton\"\n            onClick={() => {\n              onClose();\n            }}\n          >\n            Go back to the wizard\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            variant=\"link\"\n            component=\"a\"\n            ouiaId=\"OpenPlaybookButton\"\n            href={remediationUrl(playbook.id)}\n            onClick={() => {\n              onClose();\n              setOpen(false);\n            }}\n          >\n            Open playbook {playbook.name}\n          </Button>\n        )}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...(data.systems || [])]\n      )\n    )\n  );\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    setState({ type: 'schema', payload: schemaBuilder(data.issues) });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, []);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems || [],\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== undefined).length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n"],"names":["hosts","HostsApi","undefined","instance","getHostsById","systems","_ref","page","perPage","apiHostGetHostById","batchResolutions","_asyncToGenerator","_regeneratorRuntime","_callee","issues","result","_transform","_transform2","resolutions","warnings","_context","prev","next","api","map","i","id","sent","transform","_ref2","value","key","_ref3","_slicedToArray","errors","push","concat","abrupt","t0","stop","_x","apply","arguments","hostsInitialState","isLoading","_$concat$$concat","_defineProperty","FETCH_SELECTED_HOSTS","state","payload","_objectSpread","_toConsumableArray","results","selectPlaybookFields","name","SELECT_PLAYBOOK","component","validate","type","validatorTypes","PATTERN","pattern","REQUIRED","EXISTING_PLAYBOOK_SELECTED","componentTypes","TEXT_FIELD","hideField","EXISTING_PLAYBOOK","RESOLUTIONS","reviewActionsFields","MANUAL_RESOLUTION","FetchError","props","resolutionsCount","useFieldApi","input","valid","React","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","color","red","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","propTypes","SelectPlaybook","allSystems","formOptions","useFormApi","values","getState","_useState","useState","_useState2","existingRemediations","setExistingRemediations","_useState3","_useState4","existingPlaybookSelected","setExistingPlaybookSelected","_useState5","_useState6","newPlaybookName","setNewPlaybookName","_useState7","_useState8","selectedPlaybook","setSelectedPlaybook","_useState9","_useState10","isLoadingRemediation","setIsLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","_ref4","useEffect","_fetchData","_yield$api$getRemedia","data","fetchData","_differenceWith","differenceWith","isEqual","length","change","ISSUES_MULTIPLE","getIssuesMultiple","Stack","hasGutter","StackItem","Alert","isInline","title","Text","pluralize","Popover","bodyContent","Fragment","warning","Button","TextContent","Grid","GridItem","sm","md","lg","Radio","label","isDisabled","defaultChecked","onChange","FormSelect","val","then","remediation","FormSelectOption","_ref5","Skeleton","SkeletonSize","FormGroup","fieldId","TextInput","autoFocus","description","isRequired","ReviewSystems","_formOptions$getState","registry","_objectWithoutProperties","_excluded","dispatch","useDispatch","error","rowsLength","entities","rows","selected","loaded","allSystemsNamed","hostReducer","host","display_name","reduce","acc","curr","tempSystems","dedupeArray","filter","includes","onSelectRows","TOGGLE_BULK_SELECT","SystemsTable","hasCheckbox","bulkSelect","count","items","onClick","checked","onSelect","className","ReducerRegistry","ReviewActions","issue","Object","keys","SYSTEMS","index","direction","sortByState","setSortByState","multiples","some","record","_record$systems","buildRows","setRows","isChecked","Table","TableVariant","compact","onCollapse","event","rowKey","isOpen","cells","transforms","sortable","cellFormatters","expandable","onSort","sortBy","TableHeader","noWrap","TableBody","IssueResolution","_resolutions$find","issueResolutions","find","r","uniqueResolutions","uniqBy","removedResolutions","shortenIssueId","resolution","action","xl","Tile","SELECTED_RESOLUTIONS","isSelected","split","needs_reboot","alternate","Review","_props$data","_systems$issue$id","issuesById","records","getResolution","needsReboot","auto_reboot","ExclamationTriangleIcon","onRemediationCreated","resolutionsInitialState","FETCH_RESOLUTIONS","ProgressBar","percent","failed","ProgressVariant","success","danger","info","Progress","onClose","setOpen","submitRemediation","setState","_percent$failed$syste","formValues","flat","playbook","large","CheckCircleIcon","InProgressIcon","href","remediationUrl","ouiaId","ExternalLinkAltIcon","iconPosition","isSmall","window","location","origin","getEnvUrl","EmptyStateSecondaryActions","PropTypes","_PropTypes$shape","initialState","submitted","reducer","schema","Error","RemediationWizard","_data$issues","_objectSpread2","basePath","useRef","_useReducer","useReducer","_useReducer2","keyBy","fields","WIZARD","isDynamic","inModal","showTitles","nextStep","filteredIssues","_filteredIssues$","showTitle","_filteredIssues$slice","slice","findIndex","issueResolutionNextStep","substepOf","AUTO_REBOOT","register","applyReducerHash","fetchResolutions","splitArray","forEach","chunk","options","HostHelper","fetchHostsById","fetchHostNames","current","mapperExtension","review","validatorMapper","_typeof","FormRenderer","subscription","FormTemplate","Pf4FormTemplate","_extends","showFormControls","initialValues","componentMapper","WizardMapper","TextField","onSubmit","onCancel","Modal","ModalVariant","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","promiseMiddleware","store","Provider"],"sourceRoot":""}