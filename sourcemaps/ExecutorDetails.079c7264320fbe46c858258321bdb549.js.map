{"version":3,"file":"js/ExecutorDetails.4929cc605bde3bae5c8a.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails/Columns.js","webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/components/ExecutorDetails/helpers.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'preview') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from './SkeletonTable';\n\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardHeader className=\"rem-m-card__header-bold\">\n              <Button>Download playbook</Button>\n            </CardHeader>\n\n            <CardBody>\n              <SkeletonTable />\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Bullseye,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateHeader\n        titleText=\"Run failed\"\n        icon={\n          <EmptyStateIcon\n            className=\"rem-c-failure\"\n            icon={ExclamationCircleIcon}\n          />\n        }\n        headingLevel=\"h5\"\n      />\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <EmptyStateFooter>\n        <Button variant=\"link\">Learn more</Button>\n      </EmptyStateFooter>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React from 'react';\nimport { renderStatus, normalizeStatus } from '../statusHelper';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\n\nconst urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\nexport default [\n  {\n    key: 'display_name',\n    title: 'Name',\n    // eslint-disable-next-line\n    renderFunc: (name, id, { fqdn }) => <div><a href={urlBuilder(id)}>{fqdn || name || id}</a></div>\n  },\n  {\n    key: 'tags',\n  },\n  {\n    key: 'status',\n    title: 'Status',\n    // eslint-disable-next-line\n    renderFunc: (status) => (\n      <div className=\"rem-c-status-bar\">\n        {renderStatus(normalizeStatus(status))}\n      </div>\n    ),\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React from 'react';\nimport PlaybookSystemDetails from '../SystemDetails';\nimport { remediations } from '../../api';\n\nexport const useGetEntities = (config) => {\n  const { id, run_id, executor_id, openId } = config || {};\n\n  const getEntities = async (\n    _items,\n    { page, per_page: perPage, filters: { hostnameOrId } }\n  ) => {\n    const playbookRunSystems = await remediations.getPlaybookRunSystems(\n      id,\n      run_id,\n      executor_id,\n      perPage,\n      perPage * (page - 1),\n      hostnameOrId\n    );\n\n    return {\n      results: playbookRunSystems.data.map(\n        ({ system_id, system_name, status }) => ({\n          id: system_id,\n          display_name: system_name,\n          status,\n          isOpen: openId === system_id,\n          children: <PlaybookSystemDetails systemId={system_id} />,\n        })\n      ),\n      total: playbookRunSystems.meta?.total,\n    };\n  };\n\n  return getEntities;\n};\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { useParams } from 'react-router-dom';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../../store/reducers';\nimport DescriptionList from '../Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../../actions';\nimport { downloadPlaybook } from '../../api';\nimport { normalizeStatus, StatusSummary } from '../statusHelper';\nimport ExecutorDetailsSkeleton from '../../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from '../Alerts/RunFailed';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../../App';\nimport { register } from '../../store';\nimport { mergedColumns } from '../SystemsTable/helpers';\nimport columns from './Columns';\nimport { useGetEntities } from './helpers';\n\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  remediation,\n  playbookRun,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const { executor_id, run_id, id } = useParams();\n  const [executor, setExecutor] = useState({});\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const inventory = useRef(null);\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  const getEntites = useGetEntities({ id, run_id, executor_id, openId });\n  console.log(remediation, 'remediation');\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              columns={(defaultColumns) =>\n                mergedColumns(defaultColumns, columns)\n              }\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                    })()\n                  ),\n                })\n              }\n              getEntities={getEntites}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n              actionsConfig={{\n                actions: [\n                  <Button\n                    key=\"download-playbook\"\n                    variant=\"secondary\"\n                    onClick={() => downloadPlaybook([remediation.id])}\n                  >\n                    Download playbook\n                  </Button>,\n                ],\n              }}\n              hideFilters={{ all: true, name: false }}\n            />\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns = (defaultColumns = [], customColumns = []) => {\n  return customColumns.map((column) => {\n    const inventoryColumn = defaultColumns.find(\n      (invColumn) => invColumn.key === column.key\n    );\n\n    return inventoryColumn || column;\n  });\n};\n","import React, { Fragment } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Table, TableHeader } from '@patternfly/react-table/deprecated';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["getIssuePrefix","id","split","getIssueApplication","_ref","getSystemName","_ref2","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","concat","buildIssueUrl","parts","segment","app","urijs","document","baseURI","pathName","window","location","pathname","Error","React","PageHeader","Breadcrumb","BreadcrumbItem","Skeleton","size","isActive","Stack","hasGutter","StackItem","PageHeaderTitle","title","Split","SplitItem","DescriptionList","className","Main","Card","CardHeader","Button","CardBody","SkeletonTable","RunFailed","name","Bullseye","EmptyState","EmptyStateHeader","titleText","icon","EmptyStateIcon","ExclamationCircleIcon","headingLevel","EmptyStateBody","EmptyStateFooter","variant","propTypes","PropTypes","urlBuilder","key","renderFunc","fqdn","href","status","renderStatus","normalizeStatus","RemediationsLogViewer","data","LogViewer","toolbar","Toolbar","ToolbarContent","ToolbarItem","LogViewerSearch","placeholder","SyntaxHighlighter","registerLanguage","yaml","PlaybookSystemDetails","playbookRunSystemDetails","Title","system_id","console","Spinner","defaultProps","connect","refreshInterval","ExecutorDetails","remediation","playbookRun","getPlaybookRun","getPlaybookRunSystemDetails","onCollapseInventory","loadRemediation","_useParams","useParams","executor_id","run_id","_useState","useState","_useState2","_slicedToArray","executor","setExecutor","_useState3","_useState4","openId","setOpenId","_useState5","_useState6","firstExpand","setFirstExpand","inventory","useRef","useEffect","clearInterval","executors","find","getEntites","config","getEntities","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","_items","_playbookRunSystems$m","page","perPage","hostnameOrId","playbookRunSystems","_context","prev","next","per_page","filters","remediations","getPlaybookRunSystems","sent","abrupt","results","map","_ref4","system_name","isOpen","children","total","meta","stop","_x","_x2","apply","arguments","useGetEntities","log","renderInventorycard","InventoryTable","ref","columns","defaultColumns","mergedColumns","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","register","_objectSpread","reducers","playbookActivityIntentory","hasCheckbox","expandable","showTags","onExpandClick","_e","_i","setInterval","undefined","actionsConfig","actions","onClick","downloadPlaybook","hideFilters","all","permission","useContext","PermissionContext","Link","to","DateFormat","type","date","created_at","executor_name","InProgressIcon","StatusSummary","executorStatus","counts","created_by","first_name","last_name","running","success","failure","canceled","epicFailure","ExecutorDetailsSkeleton","_ref5","playbookRuns","selectedRemediation","dispatch","getPlaybookRuns","runId","remediationId","expandInventoryTable","isBold","needsPointer","props","_objectWithoutProperties","_excluded","descriptionListClasses","classnames","_defineProperty","mainClasses","_extends","calculateChecked","rows","length","selected","every","has","some","calculateSystems","_remediation$issues","issues","reduce","acc","curr","_curr$systems","systems","forEach","host","_curr$resolution","found","resolution","description","_toConsumableArray","resolved","rebootRequired","needs_reboot","push","fetchInventoryData","_ref6","_ref5$page","currSystems","_args","filter","_ref7","_config$filters","slice","_ref8","hasItems","_ref9","column","invColumn","_React$Component","_this","_classCallCheck","_callSuper","state","_inherits","_createClass","value","_this$state","this","Fragment","Table","cells","TableVariant","compact","TableHeader","EmptyTable","centered","TableToolbar","isFooter"],"sourceRoot":""}