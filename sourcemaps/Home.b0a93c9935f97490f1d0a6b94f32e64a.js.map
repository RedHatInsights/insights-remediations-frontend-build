{"version":3,"file":"js/Home.f3e35bb6ec0ccf88ccd5.js","mappings":"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","sources":["webpack:///./src/modules/RemediationsModal/validate/validator.js","webpack:///./src/modules/RemediationsButton.js","webpack:///./src/modules/RemediationsModal/NoDataModal.js","webpack:///./src/components/PlaybookCard.js","webpack:///./src/components/EmptyStates/EmptyRemediations.js","webpack:///./src/components/RemediationTable.js","webpack:///./src/components/TestButtons.js","webpack:///./src/routes/Home.js"],"sourcesContent":["function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport propTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport validate from './RemediationsModal/validate';\n\nimport { CAN_REMEDIATE, matchPermissions } from '../Utilities/utils';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport RemediationWizard from './RemediationsModal';\nimport NoDataModal from './RemediationsModal/NoDataModal';\n\nconst RemediationButton = ({\n  isDisabled,\n  children,\n  dataProvider,\n  onRemediationCreated,\n  buttonProps,\n}) => {\n  const [hasPermissions, setHasPermissions] = useState(false);\n  const [remediationsData, setRemediationsData] = useState();\n  const [isNoDataModalOpen, setNoDataModalOpen] = useState(false);\n  const chrome = useChrome();\n\n  useEffect(() => {\n    chrome.getUserPermissions('remediations').then((permissions) => {\n      setHasPermissions(\n        permissions.some(({ permission }) => {\n          return matchPermissions(permission, CAN_REMEDIATE);\n        })\n      );\n    });\n  }, []);\n\n  if (!hasPermissions) {\n    return (\n      <Tooltip content=\"You do not have correct permissions to remediate this entity.\">\n        <span>\n          <Button isDisabled {...buttonProps}>\n            {children}\n          </Button>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Button\n        isDisabled={isDisabled}\n        onClick={() => {\n          Promise.resolve(dataProvider()).then((data) => {\n            if (!data) {\n              setNoDataModalOpen(true);\n              return;\n            }\n\n            validate(data);\n            setRemediationsData(data);\n          });\n        }}\n        {...buttonProps}\n      >\n        {children}\n      </Button>\n      <NoDataModal isOpen={isNoDataModalOpen} setOpen={setNoDataModalOpen} />\n      {remediationsData && (\n        <RemediationWizard\n          setOpen={(isOpen) =>\n            setRemediationsData((prevData) =>\n              isOpen === false ? null : prevData\n            )\n          }\n          data={{\n            onRemediationCreated,\n            ...(remediationsData || {}),\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nRemediationButton.propTypes = {\n  isDisabled: propTypes.bool,\n  dataProvider: propTypes.func.isRequired,\n  onRemediationCreated: propTypes.func,\n  children: propTypes.node,\n  buttonProps: propTypes.shape({\n    [propTypes.string]: propTypes.any,\n  }),\n};\n\nRemediationButton.defaultProps = {\n  isDisabled: false,\n  onRemediationCreated: (f) => f,\n  children: 'Remediate with Ansible',\n};\n\nexport default RemediationButton;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nexport const NoDataModal = ({ isOpen, setOpen }) => {\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Remediate with Ansible\"\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={() => setOpen(false)}>\n          Back to Insights\n        </Button>,\n      ]}\n    >\n      None of the selected issues can be remediated with Ansible.\n      <br />\n      <br />\n      To remediate these issues, review the manual remediation steps associated\n      with each.\n    </Modal>\n  );\n};\n\nNoDataModal.propTypes = {\n  isOpen: propTypes.bool,\n  setOpen: propTypes.func,\n};\n\nexport default NoDataModal;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Progress,\n  ProgressMeasureLocation,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Label,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { PropTypes } from 'prop-types';\nimport { patchRemediation } from '../actions.js';\nimport { dispatchNotification } from '../Utilities/dispatcher.js';\nimport './PlaybookCard.scss';\n\nfunction buildName(name, id) {\n  return (\n    <Link to={`/${id}`} className=\"rem-c-playbook-card__header--name\">\n      {name}\n    </Link>\n  );\n}\n\nfunction actionWrapper(actionsList, callback, dispatch) {\n  Promise.all(\n    actionsList.map((event) => {\n      dispatch(event);\n      return event.payload;\n    })\n  ).then(callback);\n}\n\nconst PlaybookCardHeader = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isArchived, setIsArchived] = useState(archived);\n  const dispatch = useDispatch();\n  const dropdownItems = [];\n\n  const archiveHandler = () => {\n    actionWrapper(\n      [patchRemediation(remediation.id, { archived: !isArchived })],\n      () => {\n        setIsArchived(!isArchived);\n        update(true);\n      },\n      dispatch\n    );\n  };\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"execute\"\n      id=\"execute\"\n      isDisabled={!permission.isReceptorConfigured || isArchived}\n      className={`${!permission.permissions.execute && 'ins-m-not-entitled'}`}\n      onClick={() => {\n        setExecuteOpen(false);\n        actionWrapper(\n          [\n            loadRemediation(remediation.id),\n            getConnectionStatus(remediation.id),\n          ],\n          () => {\n            setExecuteOpen(true);\n            setIsOpen(false);\n          },\n          dispatch\n        );\n      }}\n    >\n      Execute playbook\n    </DropdownItem>\n  );\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"download\"\n      onClick={() => {\n        downloadPlaybook([remediation.id]);\n        setIsOpen(false);\n        dispatchNotification({\n          title: `Preparing playbook for download`,\n          description: 'Once complete, your download will start automatically.',\n          variant: 'info',\n          dismissable: true,\n          autoDismiss: true,\n        });\n      }}\n    >\n      Download playbook\n    </DropdownItem>\n  );\n\n  isArchived\n    ? dropdownItems.push(\n        <DropdownItem\n          key=\"restore\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Restored playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Restore playbook\n        </DropdownItem>\n      )\n    : dropdownItems.push(\n        <DropdownItem\n          key=\"archive\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Archived playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Archive playbook\n        </DropdownItem>\n      );\n\n  return (\n    <CardHeader className=\"rem-c-playbook-card__header\">\n      <CardActions>\n        <Dropdown\n          key=\"dropdown\"\n          id={`${remediation.id}-dropdown`}\n          isOpen={isOpen}\n          isPlain\n          onSelect={(f) => f}\n          toggle={\n            <KebabToggle\n              id={`${remediation.id}-toggle`}\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            />\n          }\n          dropdownItems={dropdownItems}\n          position={'right'}\n        />\n        <input\n          type=\"checkbox\"\n          name={`${remediation.id}-checkbox`}\n          checked={selector.getSelectedIds().includes(remediation.id)}\n          onChange={(e) => {\n            selector.props.onSelect(e, e.target.checked, remediationIdx);\n          }}\n          aria-label={`${remediation.id}-checkbox`}\n        />\n      </CardActions>\n      <CardTitle>\n        <Stack hasGutter>\n          <StackItem className=\"rem-c-playbook-card__header--title\">\n            <span className=\"pf-u-mr-sm\">\n              {buildName(remediation.name, remediation.id)}\n            </span>\n            {isArchived && <Label>Archived</Label>}\n          </StackItem>\n          <StackItem className=\"rem-c-playbook-card__header--last-modified\">\n            Last modified: <DateFormat date={remediation.updated_at} />\n          </StackItem>\n        </Stack>\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nPlaybookCardHeader.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n};\n\nconst renderActionStatus = (complete, total) => {\n  return complete === total && complete !== 0 ? (\n    <div>\n      <CheckCircleIcon className=\"rem-c-success\" /> {complete} of &nbsp;{total}\n    </div>\n  ) : (\n    `${complete} of ${total}`\n  );\n};\n\nconst renderProgress = (complete, total, archived) => {\n  return archived ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--archived\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : complete === total && complete !== 0 ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--success\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : (\n    <Progress\n      className=\"rem-c-playbook-card__progress\"\n      value={(complete / total) * 100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  );\n};\n\nexport const PlaybookCard = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  //executeOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n}) => {\n  // const [ poll, setPoll ] = useState(executeOpen => !executeOpen);\n  // const [ curResolved, setCurResolved ] = useState(remediation.resolved_count);\n  // const selected = reduxSelector(state => state.selectedRemediation);\n  // const [ loaded, setLoaded ] = useState(false);\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //     if (poll && !archived) {\n  //         const interval = setInterval(() => {\n  //             if (poll) {\n  //                 actionWrapper([\n  //                     loadRemediation(remediation.id)\n  //                 ], () => { setLoaded(true); }, dispatch);\n  //             }\n  //         }, 15000);\n  //         return () => clearInterval(interval);\n  //     }\n  // }, [ poll ]);\n\n  // useEffect(() => {\n  //     if (loaded) {\n  //         if (curResolved !== selected.remediation.resolved_count) {\n  //             setCurResolved(selected.remediation.resolved_count);\n  //         }\n  //     }\n  // }, [ loaded ]);\n\n  // useEffect(() => {\n  //     if (executeOpen) {\n  //         setPoll(false);\n  //     } else {\n  //         setPoll(true);\n  //     }\n  // }, [ executeOpen ]);\n\n  return (\n    <Card className=\"rem-c-playbook-card\" isCompact>\n      <PlaybookCardHeader\n        remediation={remediation}\n        remediationIdx={remediationIdx}\n        archived={archived}\n        selector={selector}\n        setExecuteOpen={setExecuteOpen}\n        update={update}\n        loadRemediation={loadRemediation}\n        getConnectionStatus={getConnectionStatus}\n        downloadPlaybook={downloadPlaybook}\n        permission={permission}\n      />\n      <CardBody className=\"rem-c-playbook-card__body\">\n        <Split hasGutter className=\"rem-c-playbook-card__body--split\">\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Systems\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {remediation.system_count}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Complete actions\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {renderActionStatus(\n                  remediation.resolved_count,\n                  remediation.issue_count\n                )}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n        </Split>\n      </CardBody>\n      {renderProgress(\n        remediation.resolved_count,\n        remediation.issue_count,\n        archived\n      )}\n    </Card>\n  );\n};\n\nPlaybookCard.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  executeOpen: PropTypes.bool.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { WrenchIcon } from '@patternfly/react-icons';\n\nimport './EmptyRemediations.scss';\n\nexport const EmptyRemediations = ({ archivedCount, setShowArchived }) => {\n  return (\n    <Bullseye className=\"rem-c-no-remediations pf-u-pt-2xl\">\n      <EmptyState>\n        <EmptyStateIcon icon={WrenchIcon} size=\"sm\" />\n        <Title size=\"lg\" headingLevel=\"h5\">\n          No remediation playbooks yet\n        </Title>\n        <EmptyStateBody>\n          Insights uses Ansible Playbooks to remediate or mitigate configuration\n          problems on your systems, and apply patches.\n          <br />\n          <br />\n          To create a remediation playbook, select issues identified in Insights\n          applications, then select\n          <strong> Remediate</strong>.\n        </EmptyStateBody>\n        <br />\n        {archivedCount > 0 && (\n          <Button\n            variant=\"link\"\n            onClick={() => setShowArchived(true)}\n            ouiaId=\"show-archived-playbooks\"\n          >\n            Show {archivedCount} archived playbooks\n          </Button>\n        )}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyRemediations.propTypes = {\n  archivedCount: PropTypes.number.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useContext, useState } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { downloadPlaybook } from '../api';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  loadRemediation,\n} from '../actions';\nimport { PermissionContext } from '../App';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport { PlaybookCard } from './PlaybookCard';\nimport { EmptyRemediations } from './EmptyStates/EmptyRemediations';\nimport './RemediationTable.scss';\n\nfunction skeleton() {\n  return (\n    <React.Fragment>\n      <Main>\n        <Spinner centered />\n      </Main>\n    </React.Fragment>\n  );\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction RemediationTable({\n  remediations,\n  loadRemediations,\n  sorter,\n  filter,\n  selector,\n  pagination,\n  shouldUpdateGrid,\n  setShouldUpdateGrid,\n  setRemediationCount,\n  showArchived,\n  setShowArchived,\n}) {\n  const { value, status } = remediations;\n  let cards = [];\n\n  const permission = useContext(PermissionContext);\n  const [executeOpen, setExecuteOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n  const selectedRemediation = reduxSelector(\n    (state) => state.selectedRemediation\n  );\n  const connectionStatus = reduxSelector((state) => state.connectionStatus);\n  const runningRemediation = reduxSelector((state) => state.runRemediation);\n  const dispatch = useDispatch();\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (shouldUpdateGrid === true) {\n      setShouldUpdateGrid(false);\n      load();\n    }\n  }, [shouldUpdateGrid]);\n\n  useEffect(() => {\n    if (runningRemediation.status === 'changed') {\n      getConnectionStatus(selectedRemediation.remediation.id);\n      setShowRefreshMessage(true);\n    } else if (runningRemediation.status === 'fulfilled') {\n      setExecuteOpen(false);\n    }\n  }, [runningRemediation.status]);\n\n  useEffect(() => {\n    if (remediations.value) {\n      setRemediationCount(value.meta.total);\n    }\n  }, [remediations]);\n\n  // Skeleton Loading\n  if (status !== 'fulfilled') {\n    return skeleton();\n  }\n\n  if (!showArchived) {\n    cards = value?.data?.reduce((result, remediation) => {\n      if (remediation.archived !== true) {\n        result.push(remediation);\n      }\n\n      return result;\n    }, []);\n  } else {\n    cards = value?.data?.map((remediation) => remediation);\n  }\n\n  if (cards.length === 0) {\n    return (\n      <EmptyRemediations\n        archivedCount={value.data.length}\n        setShowArchived={setShowArchived}\n      />\n    );\n  }\n\n  selector.register(cards);\n\n  return (\n    <React.Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          {executeOpen && (\n            <ExecuteModal\n              isOpen={executeOpen}\n              onClose={() => {\n                setShowRefreshMessage(false);\n                setExecuteOpen(false);\n              }}\n              showRefresh={showRefreshMessage}\n              remediationId={selectedRemediation.remediation.id}\n              data={connectionStatus.data}\n              etag={connectionStatus.etag}\n              isLoading={connectionStatus.status !== 'fulfilled'}\n              issueCount={selectedRemediation.remediation.issues.length}\n              remediationStatus={runningRemediation.status}\n              runRemediation={(id, etag) => {\n                dispatch(runRemediation(id, etag)).then(() =>\n                  dispatch(getPlaybookRuns(id))\n                );\n              }}\n              setEtag={(etag) => {\n                dispatch(setEtag(etag));\n              }}\n            />\n          )}\n        </StackItem>\n        <StackItem>\n          <Grid sm={12} md={6} lg={4} hasGutter>\n            {cards.map((remediation, idx) => {\n              return (\n                <GridItem key={remediation.id}>\n                  <PlaybookCard\n                    remediation={remediation}\n                    remediationIdx={idx}\n                    archived={remediation.archived}\n                    selector={selector}\n                    setExecuteOpen={setExecuteOpen}\n                    executeOpen={executeOpen}\n                    update={setShouldUpdateGrid}\n                    loadRemediation={loadRemediation}\n                    getConnectionStatus={getConnectionStatus}\n                    downloadPlaybook={downloadPlaybook}\n                    permission={permission}\n                  />\n                </GridItem>\n              );\n            })}\n          </Grid>\n        </StackItem>\n      </Stack>\n    </React.Fragment>\n  );\n}\n\nRemediationTable.propTypes = {\n  remediations: PropTypes.object.isRequired,\n  loadRemediations: PropTypes.func.isRequired,\n  sorter: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired,\n  selector: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  shouldUpdateGrid: PropTypes.bool.isRequired,\n  setShouldUpdateGrid: PropTypes.func.isRequired,\n  setRemediationCount: PropTypes.func.isRequired,\n  showArchived: PropTypes.bool.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n\nexport default RemediationTable;\n","import React from 'react';\n\nimport { Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport RemediationButton from '../modules/RemediationsButton';\n\nimport propTypes from 'prop-types';\n\nimport { getHosts } from '../api';\n\nclass TestButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allHosts: false,\n    };\n  }\n\n  isEnabled = () => localStorage.getItem('remediations:debug') === 'true';\n\n  dataProviderPing = () => ({\n    issues: [\n      {\n        id: 'test:ping',\n        description: 'Ansible ping',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 5),\n      },\n    ],\n  });\n\n  dataProviderC1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC3 = () => ({\n    issues: [...this.dataProviderC1().issues, ...this.dataProviderC2().issues],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC4 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:corosync_enable_rt_schedule|COROSYNC_NOT_ENABLE_RT',\n        description:\n          'Cluster nodes are frequently fenced as realtime is not enabled in corosync',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC5 = () => ({\n    issues: [\n      {\n        id: 'advisor:unsupported',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'vulnerabilities:CVE-2019-999999',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderD1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n        systems:\n          this.state.allHosts.length > 1\n            ? this.state.allHosts.slice(1, 2)\n            : this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderD2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n        systems: this.state.allHosts.slice(1),\n      },\n    ],\n  });\n\n  async componentDidMount() {\n    if (this.isEnabled()) {\n      getHosts().then((hosts) =>\n        this.setState({\n          allHosts: hosts.results.map((result) => result.id),\n        })\n      );\n    }\n  }\n\n  render() {\n    if (!this.isEnabled()) {\n      return null;\n    }\n\n    const { allHosts } = this.state;\n\n    const RemediationBtn = ({ dataProvider, children, ...props }) => (\n      <SplitItem>\n        <RemediationButton\n          dataProvider={dataProvider}\n          isDisabled={!allHosts || !allHosts.length}\n          onRemediationCreated={this.props.onRemediationCreated}\n          {...props}\n        >\n          {children}\n        </RemediationButton>\n      </SplitItem>\n    );\n\n    return (\n      <React.Fragment>\n        <Stack hasGutter>\n          <StackItem>\n            <Split hasGutter>\n              {[\n                'ping',\n                'alwaysFail',\n                'failHalfTheTime',\n                'pause1m',\n                'pause5m',\n                'pause15m',\n                'pauseRandom15m',\n                'pause1h',\n                'pause6h',\n              ].map((name) => (\n                <RemediationBtn\n                  key={name}\n                  dataProvider={() => ({\n                    issues: [\n                      {\n                        id: `test:${name}`,\n                        description: `Ansible ${name} test playbook`,\n                      },\n                    ],\n                    systems: this.state.allHosts,\n                  })}\n                >\n                  {name}\n                </RemediationBtn>\n              ))}\n            </Split>\n          </StackItem>\n\n          <StackItem>\n            <Split hasGutter>\n              <RemediationBtn dataProvider={this.dataProviderA1}>\n                A1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderA2}>\n                A2\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderC1}>\n                C1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC2}>\n                C2\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC3}>\n                C3\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC4}>\n                C4 (multires)\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC5}>\n                C5 (unsupported)\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderD1}>\n                D1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderD2}>\n                D2\n              </RemediationBtn>\n            </Split>\n          </StackItem>\n        </Stack>\n      </React.Fragment>\n    );\n  }\n}\n\nTestButtons.propTypes = {\n  onRemediationCreated: propTypes.func,\n};\n\nTestButtons.defaultProps = {\n  onRemediationCreated: (f) => f,\n};\n\nexport default TestButtons;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport { StackItem, Stack } from '@patternfly/react-core';\n\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport RemediationTable from '../components/RemediationTable';\nimport TestButtons from '../components/TestButtons';\n\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport './Home.scss';\n\nimport { PermissionContext } from '../App';\nimport DeniedState from '../components/DeniedState';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport ConfirmationDialog from '../components/ConfirmationDialog';\nimport keyBy from 'lodash/keyBy';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nfunction verifyDownload(selectedIds, data) {\n  let valid = [];\n  const byId = keyBy(data, (r) => r.id);\n\n  valid = selectedIds.reduce((result, id) => {\n    const remediation = byId[id];\n\n    if (remediation && remediation.issue_count > 0) {\n      result.push(remediation.id);\n    }\n\n    return result;\n  }, []);\n\n  return valid;\n}\n\nfunction download(selectedIds, data, dispatch) {\n  const valid = verifyDownload(selectedIds, data);\n\n  if (valid.length === 0) {\n    dispatch(\n      addNotification({\n        variant: 'danger',\n        title: `No playbooks downloaded.`,\n        description:\n          selectedIds.length > 1\n            ? 'Selected remediations do not contain any issues to remediate.'\n            : 'Selected remediation does not contain any issues to remediate.',\n      })\n    );\n  } else if (valid.length < selectedIds.length) {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n        description:\n          selectedIds.length - valid.length > 1\n            ? `${\n                selectedIds.length - valid.length\n              } remediations with no issues were not downloaded.`\n            : `1 remediation with no issues was not downloaded.`,\n      })\n    );\n  } else {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n      })\n    );\n  }\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nconst Home = () => {\n  const chrome = useChrome();\n  useEffect(() => {\n    chrome.updateDocumentTitle('Remediations | Red Hat Insights');\n  }, [chrome]);\n\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const sorter = useSorter(4, 'desc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const pagination = usePagination();\n  const [remediationCount, setRemediationCount] = useState(0);\n  const [filterText, setFilterText] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [showArchived, setShowArchived] = useState(\n    false || localStorage.getItem('remediations:showArchived') === 'true'\n  );\n  const [shouldUpdateGrid, setShouldUpdateGrid] = useState(false);\n  const remediations = reduxSelector((state) => state.remediations);\n  const dispatch = useDispatch();\n  const loadRemediations = (...args) =>\n    dispatch(actions.loadRemediations(...args));\n  const deleteRemediations = (ids) =>\n    dispatch(\n      actions.deleteRemediations({\n        remediation_ids: ids,\n      })\n    );\n  const itemsCountInPage = remediations?.value?.data.length || 0;\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(load, []);\n\n  useEffect(() => {\n    if (remediations.status === 'fulfilled' && filter.value === filterText) {\n      setShouldUpdateGrid(true);\n    }\n  }, [\n    sorter.sortBy,\n    sorter.sortDir,\n    filter.value,\n    pagination.pageSize,\n    pagination.pageDebounced,\n    showArchived,\n  ]);\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  filter.onChange(pagination.reset);\n  sorter.onChange(pagination.reset);\n\n  const selectedIds = selector.getSelectedIds();\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const sendNotification = (data) => {\n    dispatch(addNotification(data));\n  };\n\n  const onRemediationCreated = (result) => {\n    sendNotification(result.getNotification());\n    dispatch(actions.loadRemediations());\n  };\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Name', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"page__remediations\">\n      <PermissionContext.Consumer>\n        {(permission) =>\n          permission.permissions.read === false ? (\n            <DeniedState />\n          ) : (\n            <React.Fragment>\n              <PageHeader>\n                <PageHeaderTitle title=\"Remediations\" />\n                <TestButtons onRemediationCreated={onRemediationCreated} />\n              </PageHeader>\n              <PrimaryToolbar\n                filterConfig={{\n                  items: [\n                    {\n                      label: 'Search playbooks',\n                      type: 'text',\n                      filterValues: {\n                        id: 'filter-by-string',\n                        key: 'filter-by-string',\n                        placeholder: 'Search playbooks',\n                        value: filterText,\n                        onChange: (_e, value) => {\n                          setFilterText(value);\n                        },\n                      },\n                    },\n                  ],\n                }}\n                bulkSelect={{\n                  items: [\n                    {\n                      title: 'Select none',\n                      onClick: () => selector.props.onSelect('none', true),\n                    },\n                    {\n                      title: `Select page (${itemsCountInPage})`,\n                      onClick: () => selector.props.onSelect('page', true),\n                    },\n                  ],\n                  checked:\n                    selectedIds.length && remediationCount > selectedIds.length\n                      ? null\n                      : selectedIds.length,\n                  count: selectedIds.length,\n                  isDisabled: !itemsCountInPage,\n                  onSelect: (isSelected) =>\n                    selector.props.onSelect(\n                      selectedIds.length ? 'none' : 'page',\n                      isSelected\n                    ),\n                }}\n                actionsConfig={{\n                  actions: [\n                    {\n                      label:\n                        selectedIds.length > 1\n                          ? 'Download playbooks'\n                          : 'Download playbook',\n                      props: {\n                        variant: 'secondary',\n                        isDisabled: !selectedIds.length,\n                      },\n                      onClick: () =>\n                        download(\n                          selectedIds,\n                          remediations.value.data,\n                          dispatch\n                        ), // TODO state for downloads?\n                    },\n                    {\n                      label: 'Delete playbooks',\n                      props: {\n                        isDisabled:\n                          !permission.permissions.write || !selectedIds.length,\n                      },\n                      onClick: () => setDialogOpen(true),\n                    },\n                    {\n                      label: showArchived\n                        ? 'Hide archived playbooks'\n                        : 'Show archived playbooks',\n                      onClick: showArchived\n                        ? () => {\n                            setShowArchived(false);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'false'\n                            );\n                          }\n                        : () => {\n                            setShowArchived(true);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'true'\n                            );\n                          },\n                    },\n                  ],\n                }}\n                pagination={{\n                  ...pagination.props,\n                  itemCount: remediationCount,\n                }}\n                activeFiltersConfig={activeFiltersConfig}\n              />\n              <Main>\n                <Stack hasGutter>\n                  {permission.hasSmartManagement &&\n                    !permission.isReceptorConfigured &&\n                    noReceptorBannerVisible && (\n                      <StackItem>\n                        <NoReceptorBanner\n                          onClose={() => handleNoReceptorToggle()}\n                        />\n                      </StackItem>\n                    )}\n                  {dialogOpen && (\n                    <ConfirmationDialog\n                      title={\n                        selectedIds.length === 1\n                          ? 'Remove playbook'\n                          : 'Remove playbooks'\n                      }\n                      text={`${selectedIds.length} ${\n                        selectedIds.length > 1 ? 'playbooks' : 'playbook'\n                      }\n                                            will be removed from Remediations. This is permanent and cannot be undone.`}\n                      confirmText={'Remove'}\n                      onClose={async (del) => {\n                        setDialogOpen(false);\n                        if (del) {\n                          await deleteRemediations(selectedIds);\n\n                          loadRemediations();\n                          selector.reset();\n                        }\n                      }}\n                    />\n                  )}\n                  <StackItem>\n                    <RemediationTable\n                      remediations={remediations}\n                      loadRemediations={loadRemediations}\n                      sorter={sorter}\n                      filter={filter}\n                      selector={selector}\n                      pagination={pagination}\n                      shouldUpdateGrid={shouldUpdateGrid}\n                      setShouldUpdateGrid={setShouldUpdateGrid}\n                      setRemediationCount={setRemediationCount}\n                      showArchived={showArchived}\n                      setShowArchived={setShowArchived}\n                    />\n                  </StackItem>\n                </Stack>\n              </Main>\n            </React.Fragment>\n          )\n        }\n      </PermissionContext.Consumer>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["assert","test","msg","TypeError","checkAllowedKeys","reference","_len","arguments","length","keys","Array","_key","Object","forEach","key","includes","concat","checkRequiredKeys","_len2","_key2","prototype","hasOwnProperty","call","checkSystems","systems","isArray","system","RemediationButton","_ref","isDisabled","children","dataProvider","onRemediationCreated","buttonProps","_useState","useState","_useState2","_slicedToArray","hasPermissions","setHasPermissions","_useState3","_useState4","remediationsData","setRemediationsData","_useState5","_useState6","isNoDataModalOpen","setNoDataModalOpen","chrome","useChrome","useEffect","getUserPermissions","then","permissions","some","_ref2","permission","matchPermissions","CAN_REMEDIATE","React","Button","_extends","onClick","Promise","resolve","data","_typeof","issues","issue","id","validate","NoDataModal","isOpen","setOpen","RemediationWizard","prevData","_objectSpread","Tooltip","content","propTypes","isRequired","_defineProperty","defaultProps","f","Modal","variant","ModalVariant","small","title","onClose","actions","actionWrapper","actionsList","callback","dispatch","all","map","event","payload","PlaybookCardHeader","name","remediation","remediationIdx","archived","selector","setExecuteOpen","update","loadRemediation","getConnectionStatus","downloadPlaybook","setIsOpen","isArchived","setIsArchived","useDispatch","dropdownItems","archiveHandler","patchRemediation","push","DropdownItem","isReceptorConfigured","className","execute","dispatchNotification","description","dismissable","autoDismiss","addNotification","CardHeader","CardActions","Dropdown","isPlain","onSelect","toggle","KebabToggle","onToggle","position","type","checked","getSelectedIds","onChange","e","props","target","CardTitle","Stack","hasGutter","StackItem","Link","to","Label","DateFormat","date","updated_at","PropTypes","object","number","bool","func","PlaybookCard","complete","total","Card","isCompact","CardBody","Split","SplitItem","system_count","resolved_count","issue_count","CheckCircleIcon","Progress","value","measureLocation","ProgressMeasureLocation","none","renderProgress","executeOpen","EmptyRemediations","archivedCount","setShowArchived","Bullseye","EmptyState","EmptyStateIcon","icon","WrenchIcon","size","Title","headingLevel","EmptyStateBody","ouiaId","SORTING_ITERATEES","RemediationTable","_value$data2","_value$data","remediations","loadRemediations","sorter","filter","pagination","shouldUpdateGrid","setShouldUpdateGrid","setRemediationCount","showArchived","status","cards","useContext","PermissionContext","showRefreshMessage","setShowRefreshMessage","selectedRemediation","reduxSelector","state","connectionStatus","runningRemediation","runRemediation","column","sortBy","sortDir","pageSize","offset","undefined","meta","Main","Spinner","centered","reduce","result","register","ExecuteModal","showRefresh","remediationId","etag","isLoading","issueCount","remediationStatus","getPlaybookRuns","setEtag","Grid","sm","md","lg","idx","GridItem","TestButtons","_React$Component","_inherits","_componentDidMount","_super","_this","_classCallCheck","_assertThisInitialized","localStorage","getItem","allHosts","slice","_toConsumableArray","dataProviderC1","dataProviderC2","_createClass","_asyncToGenerator","_regeneratorRuntime","_callee","_this2","_context","prev","next","this","isEnabled","getHosts","hosts","setState","results","stop","apply","_this3","RemediationBtn","_objectWithoutProperties","_excluded","dataProviderA1","dataProviderA2","dataProviderC3","dataProviderC4","dataProviderC5","dataProviderD1","dataProviderD2","_remediations$value","updateDocumentTitle","noReceptorBannerVisible","setNoReceptorBannerVisible","useSorter","useFilter","useSelector","usePagination","remediationCount","filterText","setFilterText","_useState7","_useState8","dialogOpen","setDialogOpen","_useState9","_useState10","_useState11","_useState12","itemsCountInPage","pageDebounced","setValue","reset","selectedIds","getNotification","activeFiltersConfig","filters","category","chips","onDelete","Consumer","read","DeniedState","PageHeader","PageHeaderTitle","PrimaryToolbar","filterConfig","items","label","filterValues","placeholder","_e","bulkSelect","count","isSelected","actionsConfig","valid","byId","keyBy","r","verifyDownload","download","write","setItem","itemCount","hasSmartManagement","NoReceptorBanner","ConfirmationDialog","text","confirmText","del","ids","deleteRemediations","remediation_ids","_x"],"sourceRoot":""}