{"version":3,"file":"js/5506.1664466341713.ba88873940e9c2e543c6.js","mappings":"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","sources":["webpack:///./src/components/PlaybookCard.js","webpack:///./src/components/EmptyStates/EmptyRemediations.js","webpack:///./src/components/RemediationTable.js","webpack:///./src/components/TestButtons.js","webpack:///./src/routes/Home.js","webpack:///./src/Routes.js","webpack:///./src/skeletons/GlobalSkeleton.js","webpack:///./src/App.js","webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/actions.js","webpack:///./src/components/Alerts/NoReceptorBanner.js","webpack:///./src/components/Alerts/PlaybookToastAlerts.js","webpack:///./src/components/ConfirmationDialog.js","webpack:///./src/components/DeniedState.js","webpack:///./src/components/EmptyExecutePlaybookState.js","webpack:///./src/components/Modals/ExecuteModal.js","webpack:///./src/components/SystemsTable/RemoveSystemModal.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/components/SystemsTable/SystemsTable.js","webpack:///./src/components/statusHelper.js","webpack:///./src/components/Modals/WarningModal.js","webpack:///./src/containers/CancelButton.js","webpack:///./src/hooks/table.js","webpack:///./src/modules/RemediationsModal/validate/validator.js","webpack:///./src/store/index.js","webpack:///./src/components/SystemsTable/RebootColumn.js","webpack:///./src/components/SystemsTable/IssuesColumn.js","webpack:///./src/store/reducers.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Progress,\n  ProgressMeasureLocation,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Label,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Link } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\nimport { patchRemediation } from '../actions.js';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\nimport './PlaybookCard.scss';\n\nfunction buildName(name, id) {\n  return (\n    <Link to={`/${id}`} className=\"rem-c-playbook-card__header--name\">\n      {name}\n    </Link>\n  );\n}\n\nfunction actionWrapper(actionsList, callback, dispatch) {\n  Promise.all(\n    actionsList.map((event) => {\n      dispatch(event);\n      return event.payload;\n    })\n  ).then(callback);\n}\n\nconst PlaybookCardHeader = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n  setActiveAlert,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isArchived, setIsArchived] = useState(archived);\n  const dispatch = useDispatch();\n  const dropdownItems = [];\n\n  const archiveHandler = () => {\n    actionWrapper(\n      [patchRemediation(remediation.id, { archived: !isArchived })],\n      () => {\n        setIsArchived(!isArchived);\n        update(true);\n      },\n      dispatch\n    );\n  };\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"execute\"\n      id=\"execute\"\n      isDisabled={!permission.isReceptorConfigured || isArchived}\n      className={`${\n        (!permission.hasSmartManagement || !permission.permissions.execute) &&\n        'ins-m-not-entitled'\n      }`}\n      onClick={() => {\n        setExecuteOpen(false);\n        actionWrapper(\n          [\n            loadRemediation(remediation.id),\n            getConnectionStatus(remediation.id),\n          ],\n          () => {\n            setExecuteOpen(true);\n            setIsOpen(false);\n          },\n          dispatch\n        );\n      }}\n    >\n      Execute playbook\n    </DropdownItem>\n  );\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"download\"\n      onClick={() => {\n        downloadPlaybook(remediation.id);\n        setIsOpen(false);\n        setActiveAlert({\n          key: generateUniqueId(),\n          title: `Preparing playbook for download`,\n          description: 'Once complete, your download will start automatically.',\n          variant: 'info',\n        });\n      }}\n    >\n      Download playbook\n    </DropdownItem>\n  );\n\n  isArchived\n    ? dropdownItems.push(\n        <DropdownItem\n          key=\"restore\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Restored playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Restore playbook\n        </DropdownItem>\n      )\n    : dropdownItems.push(\n        <DropdownItem\n          key=\"archive\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Archived playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Archive playbook\n        </DropdownItem>\n      );\n\n  return (\n    <CardHeader className=\"rem-c-playbook-card__header\">\n      <CardActions>\n        <Dropdown\n          key=\"dropdown\"\n          id={`${remediation.id}-dropdown`}\n          isOpen={isOpen}\n          isPlain\n          onSelect={(f) => f}\n          toggle={\n            <KebabToggle\n              id={`${remediation.id}-toggle`}\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            />\n          }\n          dropdownItems={dropdownItems}\n          position={'right'}\n        />\n        <input\n          type=\"checkbox\"\n          name={`${remediation.id}-checkbox`}\n          checked={selector.getSelectedIds().includes(remediation.id)}\n          onChange={(e) => {\n            selector.props.onSelect(e, e.target.checked, remediationIdx);\n          }}\n          aria-label={`${remediation.id}-checkbox`}\n        />\n      </CardActions>\n      <CardTitle>\n        <Stack hasGutter>\n          <StackItem className=\"rem-c-playbook-card__header--title\">\n            <span className=\"pf-u-mr-sm\">\n              {buildName(remediation.name, remediation.id)}\n            </span>\n            {isArchived && <Label>Archived</Label>}\n          </StackItem>\n          <StackItem className=\"rem-c-playbook-card__header--last-modified\">\n            Last modified: <DateFormat date={remediation.updated_at} />\n          </StackItem>\n        </Stack>\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nPlaybookCardHeader.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.func.isRequired,\n};\n\nconst renderActionStatus = (complete, total) => {\n  return complete === total && complete !== 0 ? (\n    <div>\n      <CheckCircleIcon className=\"rem-c-success\" /> {complete} of &nbsp;{total}\n    </div>\n  ) : (\n    `${complete} of ${total}`\n  );\n};\n\nconst renderProgress = (complete, total, archived) => {\n  return archived ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--archived\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : complete === total && complete !== 0 ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--success\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : (\n    <Progress\n      className=\"rem-c-playbook-card__progress\"\n      value={(complete / total) * 100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  );\n};\n\nexport const PlaybookCard = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  //executeOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n  setActiveAlert,\n}) => {\n  // const [ poll, setPoll ] = useState(executeOpen => !executeOpen);\n  // const [ curResolved, setCurResolved ] = useState(remediation.resolved_count);\n  // const selected = reduxSelector(state => state.selectedRemediation);\n  // const [ loaded, setLoaded ] = useState(false);\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //     if (poll && !archived) {\n  //         const interval = setInterval(() => {\n  //             if (poll) {\n  //                 actionWrapper([\n  //                     loadRemediation(remediation.id)\n  //                 ], () => { setLoaded(true); }, dispatch);\n  //             }\n  //         }, 15000);\n  //         return () => clearInterval(interval);\n  //     }\n  // }, [ poll ]);\n\n  // useEffect(() => {\n  //     if (loaded) {\n  //         if (curResolved !== selected.remediation.resolved_count) {\n  //             setCurResolved(selected.remediation.resolved_count);\n  //         }\n  //     }\n  // }, [ loaded ]);\n\n  // useEffect(() => {\n  //     if (executeOpen) {\n  //         setPoll(false);\n  //     } else {\n  //         setPoll(true);\n  //     }\n  // }, [ executeOpen ]);\n\n  return (\n    <Card className=\"rem-c-playbook-card\" isCompact>\n      <PlaybookCardHeader\n        remediation={remediation}\n        remediationIdx={remediationIdx}\n        archived={archived}\n        selector={selector}\n        setExecuteOpen={setExecuteOpen}\n        update={update}\n        loadRemediation={loadRemediation}\n        getConnectionStatus={getConnectionStatus}\n        downloadPlaybook={downloadPlaybook}\n        permission={permission}\n        setActiveAlert={setActiveAlert}\n      />\n      <CardBody className=\"rem-c-playbook-card__body\">\n        <Split hasGutter className=\"rem-c-playbook-card__body--split\">\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Systems\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {remediation.system_count}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Complete actions\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {renderActionStatus(\n                  remediation.resolved_count,\n                  remediation.issue_count\n                )}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n        </Split>\n      </CardBody>\n      {renderProgress(\n        remediation.resolved_count,\n        remediation.issue_count,\n        archived\n      )}\n    </Card>\n  );\n};\n\nPlaybookCard.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  executeOpen: PropTypes.bool.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { WrenchIcon } from '@patternfly/react-icons';\n\nimport './EmptyRemediations.scss';\n\nexport const EmptyRemediations = ({ archivedCount, setShowArchived }) => {\n  return (\n    <Bullseye className=\"rem-c-no-remediations pf-u-pt-2xl\">\n      <EmptyState>\n        <EmptyStateIcon icon={WrenchIcon} size=\"sm\" />\n        <Title size=\"lg\" headingLevel=\"h5\">\n          No remediation playbooks yet\n        </Title>\n        <EmptyStateBody>\n          Insights uses Ansible Playbooks to remediate or mitigate configuration\n          problems on your systems, and apply patches.\n          <br />\n          <br />\n          To create a remediation playbook, select issues identified in Insights\n          applications, then select\n          <strong> Remediate</strong>.\n        </EmptyStateBody>\n        <br />\n        {archivedCount > 0 && (\n          <Button\n            variant=\"link\"\n            onClick={() => setShowArchived(true)}\n            ouiaId=\"show-archived-playbooks\"\n          >\n            Show {archivedCount} archived playbooks\n          </Button>\n        )}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyRemediations.propTypes = {\n  archivedCount: PropTypes.number.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useContext, useState } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { downloadPlaybook } from '../api';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  loadRemediation,\n} from '../actions';\nimport { PermissionContext } from '../App';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport { PlaybookCard } from './PlaybookCard';\nimport { EmptyRemediations } from './EmptyStates/EmptyRemediations';\nimport PlaybookToastAlerts from './Alerts/PlaybookToastAlerts';\nimport './RemediationTable.scss';\n\nfunction skeleton() {\n  return (\n    <React.Fragment>\n      <Main>\n        <Spinner centered />\n      </Main>\n    </React.Fragment>\n  );\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction RemediationTable({\n  remediations,\n  loadRemediations,\n  sorter,\n  filter,\n  selector,\n  pagination,\n  shouldUpdateGrid,\n  setShouldUpdateGrid,\n  setRemediationCount,\n  showArchived,\n  setShowArchived,\n}) {\n  const { value, status } = remediations;\n  let cards = [];\n\n  const permission = useContext(PermissionContext);\n  const [executeOpen, setExecuteOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n  const [activeToastAlert, setActiveToastAlert] = useState({\n    key: '',\n    title: '',\n    description: '',\n    variant: '',\n  });\n  const selectedRemediation = reduxSelector(\n    (state) => state.selectedRemediation\n  );\n  const connectionStatus = reduxSelector((state) => state.connectionStatus);\n  const runningRemediation = reduxSelector((state) => state.runRemediation);\n  const dispatch = useDispatch();\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (shouldUpdateGrid === true) {\n      setShouldUpdateGrid(false);\n      load();\n    }\n  }, [shouldUpdateGrid]);\n\n  useEffect(() => {\n    if (runningRemediation.status === 'changed') {\n      getConnectionStatus(selectedRemediation.remediation.id);\n      setShowRefreshMessage(true);\n    } else if (runningRemediation.status === 'fulfilled') {\n      setExecuteOpen(false);\n    }\n  }, [runningRemediation.status]);\n\n  useEffect(() => {\n    if (remediations.value) {\n      setRemediationCount(value.meta.total);\n    }\n  }, [remediations]);\n\n  // Skeleton Loading\n  if (status !== 'fulfilled') {\n    return skeleton();\n  }\n\n  if (!showArchived) {\n    cards = value?.data?.reduce((result, remediation) => {\n      if (remediation.archived !== true) {\n        result.push(remediation);\n      }\n\n      return result;\n    }, []);\n  } else {\n    cards = value?.data?.map((remediation) => remediation);\n  }\n\n  if (cards.length === 0) {\n    return (\n      <EmptyRemediations\n        archivedCount={value.data.length}\n        setShowArchived={setShowArchived}\n      />\n    );\n  }\n\n  selector.register(cards);\n\n  return (\n    <React.Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          {executeOpen && (\n            <ExecuteModal\n              isOpen={executeOpen}\n              onClose={() => {\n                setShowRefreshMessage(false);\n                setExecuteOpen(false);\n              }}\n              showRefresh={showRefreshMessage}\n              remediationId={selectedRemediation.remediation.id}\n              data={connectionStatus.data}\n              etag={connectionStatus.etag}\n              isLoading={connectionStatus.status !== 'fulfilled'}\n              issueCount={selectedRemediation.remediation.issues.length}\n              remediationStatus={runningRemediation.status}\n              runRemediation={(id, etag) => {\n                dispatch(runRemediation(id, etag)).then(() =>\n                  dispatch(getPlaybookRuns(id))\n                );\n              }}\n              setEtag={(etag) => {\n                dispatch(setEtag(etag));\n              }}\n              activeAlert={activeToastAlert}\n              setActiveAlert={setActiveToastAlert}\n            />\n          )}\n        </StackItem>\n        <StackItem>\n          {activeToastAlert.title && (\n            <PlaybookToastAlerts\n              key={activeToastAlert.key}\n              title={activeToastAlert.title}\n              description={activeToastAlert.description}\n              variant={activeToastAlert.variant}\n            />\n          )}\n          <Grid sm={12} md={6} lg={4} hasGutter>\n            {cards.map((remediation, idx) => {\n              return (\n                <GridItem key={remediation.id}>\n                  <PlaybookCard\n                    remediation={remediation}\n                    remediationIdx={idx}\n                    archived={remediation.archived}\n                    selector={selector}\n                    setExecuteOpen={setExecuteOpen}\n                    executeOpen={executeOpen}\n                    update={setShouldUpdateGrid}\n                    loadRemediation={loadRemediation}\n                    getConnectionStatus={getConnectionStatus}\n                    downloadPlaybook={downloadPlaybook}\n                    permission={permission}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </GridItem>\n              );\n            })}\n          </Grid>\n        </StackItem>\n      </Stack>\n    </React.Fragment>\n  );\n}\n\nRemediationTable.propTypes = {\n  remediations: PropTypes.object.isRequired,\n  loadRemediations: PropTypes.func.isRequired,\n  sorter: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired,\n  selector: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  shouldUpdateGrid: PropTypes.bool.isRequired,\n  setShouldUpdateGrid: PropTypes.func.isRequired,\n  setRemediationCount: PropTypes.func.isRequired,\n  showArchived: PropTypes.bool.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n\nexport default RemediationTable;\n","import React from 'react';\n\nimport { Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport RemediationButton from '../modules/RemediationsButton';\n\nimport propTypes from 'prop-types';\n\nimport { getHosts } from '../api';\n\nclass TestButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allHosts: false,\n    };\n  }\n\n  isEnabled = () => localStorage.getItem('remediations:debug') === 'true';\n\n  dataProviderPing = () => ({\n    issues: [\n      {\n        id: 'test:ping',\n        description: 'Ansible ping',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 5),\n      },\n    ],\n  });\n\n  dataProviderC1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC3 = () => ({\n    issues: [...this.dataProviderC1().issues, ...this.dataProviderC2().issues],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC4 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:corosync_enable_rt_schedule|COROSYNC_NOT_ENABLE_RT',\n        description:\n          'Cluster nodes are frequently fenced as realtime is not enabled in corosync',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC5 = () => ({\n    issues: [\n      {\n        id: 'advisor:unsupported',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'vulnerabilities:CVE-2019-999999',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderD1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n        systems:\n          this.state.allHosts.length > 1\n            ? this.state.allHosts.slice(1, 2)\n            : this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderD2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n        systems: this.state.allHosts.slice(1),\n      },\n    ],\n  });\n\n  async componentDidMount() {\n    if (this.isEnabled()) {\n      await window.insights.chrome.auth.getUser();\n      getHosts().then((hosts) =>\n        this.setState({\n          allHosts: hosts.results.map((result) => result.id),\n        })\n      );\n    }\n  }\n\n  render() {\n    if (!this.isEnabled()) {\n      return null;\n    }\n\n    const { allHosts } = this.state;\n\n    const RemediationBtn = ({ dataProvider, children, ...props }) => (\n      <SplitItem>\n        <RemediationButton\n          dataProvider={dataProvider}\n          isDisabled={!allHosts || !allHosts.length}\n          onRemediationCreated={this.props.onRemediationCreated}\n          {...props}\n        >\n          {children}\n        </RemediationButton>\n      </SplitItem>\n    );\n\n    return (\n      <React.Fragment>\n        <Stack hasGutter>\n          <StackItem>\n            <Split hasGutter>\n              {[\n                'ping',\n                'alwaysFail',\n                'failHalfTheTime',\n                'pause1m',\n                'pause5m',\n                'pause15m',\n                'pauseRandom15m',\n                'pause1h',\n                'pause6h',\n              ].map((name) => (\n                <RemediationBtn\n                  key={name}\n                  dataProvider={() => ({\n                    issues: [\n                      {\n                        id: `test:${name}`,\n                        description: `Ansible ${name} test playbook`,\n                      },\n                    ],\n                    systems: this.state.allHosts,\n                  })}\n                >\n                  {name}\n                </RemediationBtn>\n              ))}\n            </Split>\n          </StackItem>\n\n          <StackItem>\n            <Split hasGutter>\n              <RemediationBtn dataProvider={this.dataProviderA1}>\n                A1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderA2}>\n                A2\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderC1}>\n                C1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC2}>\n                C2\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC3}>\n                C3\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC4}>\n                C4 (multires)\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC5}>\n                C5 (unsupported)\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderD1}>\n                D1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderD2}>\n                D2\n              </RemediationBtn>\n            </Split>\n          </StackItem>\n        </Stack>\n      </React.Fragment>\n    );\n  }\n}\n\nTestButtons.propTypes = {\n  onRemediationCreated: propTypes.func,\n};\n\nTestButtons.defaultProps = {\n  onRemediationCreated: (f) => f,\n};\n\nexport default TestButtons;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport { StackItem, Stack } from '@patternfly/react-core';\n\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport RemediationTable from '../components/RemediationTable';\nimport TestButtons from '../components/TestButtons';\n\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport './Home.scss';\n\nimport { PermissionContext } from '../App';\nimport DeniedState from '../components/DeniedState';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport ConfirmationDialog from '../components/ConfirmationDialog';\nimport keyBy from 'lodash/keyBy';\n\nfunction verifyDownload(selectedIds, data) {\n  let valid = [];\n  const byId = keyBy(data, (r) => r.id);\n\n  valid = selectedIds.reduce((result, id) => {\n    const remediation = byId[id];\n\n    if (remediation && remediation.issue_count > 0) {\n      result.push(remediation.id);\n    }\n\n    return result;\n  }, []);\n\n  return valid;\n}\n\nfunction download(selectedIds, data, dispatch) {\n  const valid = verifyDownload(selectedIds, data);\n\n  if (valid.length === 0) {\n    dispatch(\n      addNotification({\n        variant: 'danger',\n        title: `No playbooks downloaded.`,\n        description:\n          selectedIds.length > 1\n            ? 'Selected remediations do not contain any issues to remediate.'\n            : 'Selected remediation does not contain any issues to remediate.',\n      })\n    );\n  } else if (valid.length < selectedIds.length) {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n        description:\n          selectedIds.length - valid.length > 1\n            ? `${\n                selectedIds.length - valid.length\n              } remediations with no issues were not downloaded.`\n            : `1 remediation with no issues was not downloaded.`,\n      })\n    );\n  } else {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n      })\n    );\n  }\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction Home() {\n  document.title = 'Remediations | Red Hat Insights';\n\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const sorter = useSorter(4, 'desc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const pagination = usePagination();\n  const [remediationCount, setRemediationCount] = useState(0);\n  const [filterText, setFilterText] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [showArchived, setShowArchived] = useState(\n    false || localStorage.getItem('remediations:showArchived') === 'true'\n  );\n  const [shouldUpdateGrid, setShouldUpdateGrid] = useState(false);\n  const remediations = reduxSelector((state) => state.remediations);\n  const dispatch = useDispatch();\n  const loadRemediations = (...args) =>\n    dispatch(actions.loadRemediations(...args));\n  const deleteRemediation = (id) => dispatch(actions.deleteRemediation(id));\n  const itemsCountInPage = remediations?.value?.data.length || 0;\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(load, []);\n\n  useEffect(() => {\n    if (remediations.status === 'fulfilled' && filter.value === filterText) {\n      setShouldUpdateGrid(true);\n    }\n  }, [\n    sorter.sortBy,\n    sorter.sortDir,\n    filter.value,\n    pagination.pageSize,\n    pagination.pageDebounced,\n    showArchived,\n  ]);\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  filter.onChange(pagination.reset);\n  sorter.onChange(pagination.reset);\n\n  const selectedIds = selector.getSelectedIds();\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const sendNotification = (data) => {\n    dispatch(addNotification(data));\n  };\n\n  const onRemediationCreated = (result) => {\n    sendNotification(result.getNotification());\n    dispatch(actions.loadRemediations());\n  };\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Name', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"page__remediations\">\n      <PermissionContext.Consumer>\n        {(permission) =>\n          permission.permissions.read === false ? (\n            <DeniedState />\n          ) : (\n            <React.Fragment>\n              <PageHeader>\n                <PageHeaderTitle title=\"Remediations\" />\n                <TestButtons onRemediationCreated={onRemediationCreated} />\n              </PageHeader>\n              <PrimaryToolbar\n                filterConfig={{\n                  items: [\n                    {\n                      label: 'Search playbooks',\n                      type: 'text',\n                      filterValues: {\n                        id: 'filter-by-string',\n                        key: 'filter-by-string',\n                        placeholder: 'Search playbooks',\n                        value: filterText,\n                        onChange: (_e, value) => {\n                          setFilterText(value);\n                        },\n                      },\n                    },\n                  ],\n                }}\n                bulkSelect={{\n                  items: [\n                    {\n                      title: 'Select none',\n                      onClick: () => selector.props.onSelect('none', true),\n                    },\n                    {\n                      title: `Select page (${itemsCountInPage})`,\n                      onClick: () => selector.props.onSelect('page', true),\n                    },\n                  ],\n                  checked:\n                    selectedIds.length && remediationCount > selectedIds.length\n                      ? null\n                      : selectedIds.length,\n                  count: selectedIds.length,\n                  isDisabled: !itemsCountInPage,\n                  onSelect: (isSelected) =>\n                    selector.props.onSelect(\n                      selectedIds.length ? 'none' : 'page',\n                      isSelected\n                    ),\n                }}\n                actionsConfig={{\n                  actions: [\n                    {\n                      label:\n                        selectedIds.length > 1\n                          ? 'Download playbooks'\n                          : 'Download playbook',\n                      props: {\n                        variant: 'secondary',\n                        isDisabled: !selectedIds.length,\n                      },\n                      onClick: () =>\n                        download(\n                          selectedIds,\n                          remediations.value.data,\n                          dispatch\n                        ), // TODO state for downloads?\n                    },\n                    {\n                      label: 'Delete playbooks',\n                      props: {\n                        isDisabled:\n                          !permission.permissions.write || !selectedIds.length,\n                      },\n                      onClick: () => setDialogOpen(true),\n                    },\n                    {\n                      label: showArchived\n                        ? 'Hide archived playbooks'\n                        : 'Show archived playbooks',\n                      onClick: showArchived\n                        ? () => {\n                            setShowArchived(false);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'false'\n                            );\n                          }\n                        : () => {\n                            setShowArchived(true);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'true'\n                            );\n                          },\n                    },\n                  ],\n                }}\n                pagination={{\n                  ...pagination.props,\n                  itemCount: remediationCount,\n                }}\n                activeFiltersConfig={activeFiltersConfig}\n              />\n              <Main>\n                <Stack hasGutter>\n                  {permission.hasSmartManagement &&\n                    !permission.isReceptorConfigured &&\n                    noReceptorBannerVisible && (\n                      <StackItem>\n                        <NoReceptorBanner\n                          onClose={() => handleNoReceptorToggle()}\n                        />\n                      </StackItem>\n                    )}\n                  {dialogOpen && (\n                    <ConfirmationDialog\n                      title={\n                        selectedIds.length === 1\n                          ? 'Remove playbook'\n                          : 'Remove playbooks'\n                      }\n                      text={`${selectedIds.length} ${\n                        selectedIds.length > 1 ? 'playbooks' : 'playbook'\n                      } \n                                            will be removed from Remediations. This is permanent and cannot be undone.`}\n                      confirmText={'Remove'}\n                      onClose={async (del) => {\n                        setDialogOpen(false);\n                        if (del) {\n                          await Promise.all(\n                            selectedIds.map((r) => deleteRemediation(r))\n                          );\n                          loadRemediations();\n                          selector.reset();\n                        }\n                      }}\n                    />\n                  )}\n                  <StackItem>\n                    <RemediationTable\n                      remediations={remediations}\n                      loadRemediations={loadRemediations}\n                      sorter={sorter}\n                      filter={filter}\n                      selector={selector}\n                      pagination={pagination}\n                      shouldUpdateGrid={shouldUpdateGrid}\n                      setShouldUpdateGrid={setShouldUpdateGrid}\n                      setRemediationCount={setRemediationCount}\n                      showArchived={showArchived}\n                      setShowArchived={setShowArchived}\n                    />\n                  </StackItem>\n                </Stack>\n              </Main>\n            </React.Fragment>\n          )\n        }\n      </PermissionContext.Consumer>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Switch, Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, lazy, Suspense } from 'react';\nimport Home from './routes/Home';\nconst RemediationDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"RemediationDetails\" */ './routes/RemediationDetails'\n  )\n);\nconst ActivityDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"ActivityDetails\" */ './components/ActivityDetails'\n  )\n);\nconst ExecutorDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"ExecutorDetails\" */ './components/ExecutorDetails'\n  )\n);\n\nexport const routes = {\n  home: '/',\n  details: '/:id',\n  runDetails: '/:id/:run_id',\n  executorDetails: '/:id/:run_id/:executor_id',\n};\n\nexport const Routes = () => (\n  <Suspense fallback={<Fragment />}>\n    <Switch>\n      <Route exact path={routes.home} component={Home} />\n      <Route exact path={routes.details} component={RemediationDetails} />\n      <Route\n        exact\n        path={routes.runDetails}\n        render={(props) => <ActivityDetails remediation={{}} {...props} />}\n      />\n      <Route\n        exact\n        path={routes.executorDetails}\n        render={(props) => <ExecutorDetails {...props} />}\n      />\n      <Redirect path=\"*\" to={routes.home} push />\n    </Switch>\n  </Suspense>\n);\n\nRoutes.propTypes = {\n  childProps: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func,\n    }),\n  }),\n};\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst GlobalSkeleton = () => (\n  <React.Fragment>\n    <PageHeader className=\"ins-remediations__skeleton\">\n      <PageHeaderTitle className=\"rem-s-page-header\" title=\"Remediations\" />\n    </PageHeader>\n    <Main>\n      <Spinner centered />\n    </Main>\n  </React.Fragment>\n);\n\nexport default GlobalSkeleton;\n","import PropTypes from 'prop-types';\nimport React, { createContext, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport GlobalSkeleton from './skeletons/GlobalSkeleton';\n\nimport { getIsReceptorConfigured } from './api';\n\n// Notifications\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nexport const PermissionContext = createContext();\n\nclass App extends Component {\n  unregister;\n  constructor() {\n    super();\n    this.state = {\n      readPermission: undefined,\n      writePermission: undefined,\n      executePermission: undefined,\n      isReceptorConfigured: undefined,\n      arePermissionLoaded: false,\n      hasSmartManagement: undefined,\n    };\n  }\n\n  handlePermissionUpdate = (hasRead, hasWrite, hasExecute) =>\n    this.setState({\n      readPermission: hasRead,\n      writePermission: hasWrite,\n      executePermission: hasExecute,\n      arePermissionLoaded: true,\n    });\n\n  componentWillUnmount() {\n    if (typeof this.unregister === 'function') {\n      this.unregister();\n    }\n  }\n  async componentDidMount() {\n    insights.chrome.init();\n    insights.chrome?.hideGlobalFilter?.();\n    insights.chrome.identifyApp('remediations');\n    // wait for auth first, otherwise the call to RBAC may 401\n    await window.insights.chrome.auth.getUser().then((user) =>\n      this.setState({\n        hasSmartManagement: user.entitlements.smart_management.is_entitled,\n      })\n    );\n    getIsReceptorConfigured().then((isConfigured) =>\n      this.setState({\n        isReceptorConfigured: isConfigured.data.length > 0,\n      })\n    );\n    this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (typeof event?.domEvent?.href === 'string') {\n        this.props.history.push(\n          event.domEvent.href.replace(this.props.basename, '')\n        );\n      }\n    });\n    window.insights.chrome\n      .getUserPermissions('remediations')\n      .then((remediationsPermissions) => {\n        const permissionList = remediationsPermissions.map(\n          (permissions) => permissions.permission\n        );\n        if (\n          permissionList.includes(\n            'remediations:*:*' || 'remediations:remediation:*'\n          )\n        ) {\n          this.handlePermissionUpdate(true, true, true);\n        } else {\n          this.handlePermissionUpdate(\n            permissionList.includes(\n              'remediations:remediation:read' || 'remediations:*:read'\n            ),\n            permissionList.includes(\n              'remediations:remediation:write' || 'remediations:*:write'\n            ),\n            permissionList.includes(\n              'remediations:remediation:execute' || 'remediations:*:execute'\n            )\n          );\n        }\n      });\n  }\n\n  render() {\n    const {\n      readPermission,\n      writePermission,\n      executePermission,\n      arePermissionLoaded,\n      isReceptorConfigured,\n      hasSmartManagement,\n    } = this.state;\n\n    return arePermissionLoaded ? (\n      <PermissionContext.Provider\n        value={{\n          permissions: {\n            read: readPermission,\n            write: writePermission,\n            execute: executePermission,\n          },\n          isReceptorConfigured,\n          hasSmartManagement,\n        }}\n      >\n        <NotificationsPortal />\n        <Routes childProps={this.props} />\n      </PermissionContext.Provider>\n    ) : (\n      <GlobalSkeleton />\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object,\n  basename: PropTypes.string.isRequired,\n};\n\n/**\n * withRouter: https://reacttraining.com/react-router/web/api/withRouter\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter(connect()(App));\n","export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'beta') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import { ACTION_TYPES } from './constants';\nimport {\n  remediations,\n  resolutions,\n  getRemediationStatus,\n  sources,\n  deleteSystemsFromRemediation,\n} from './api';\n\nexport const loadRemediations = (\n  sortBy = 'updated_at',\n  sortDir = 'desc',\n  filter,\n  limit,\n  offset,\n  system,\n  hideArchived\n) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATIONS,\n  payload: remediations.getRemediations(\n    `${sortDir === 'desc' ? '-' : ''}${sortBy}`,\n    filter,\n    limit,\n    offset,\n    system,\n    hideArchived\n  ),\n});\n\nexport const loadRemediation = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const loadRemediationStatus = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION_STATUS,\n  payload: getRemediationStatus(id), // TODO\n});\n\nexport const refreshRemediation = (id) => ({\n  type: ACTION_TYPES.REFRESH_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const createRemediation = (data) => ({\n  type: ACTION_TYPES.CREATE_REMEDIATIONS,\n  payload: remediations.createRemediation(data),\n});\n\nexport const patchRemediation = (id, data) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION,\n  payload: remediations.updateRemediation(id, data).then(() => data),\n});\n\nexport const deleteRemediation = (id) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION,\n  payload: remediations.deleteRemediation(id),\n});\n\nexport const deleteRemediationIssue = (id, issueId) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE,\n  payload: remediations\n    .deleteRemediationIssue(id, issueId)\n    .then(() => ({ id, issueId })),\n});\n\nexport const deleteRemediationIssueSystem = (id, issue, system) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM,\n  payload: remediations\n    .deleteRemediationIssueSystem(id, issue, system)\n    .then(() => ({ id, issue, system })),\n});\n\nexport const patchRemediationIssue = (id, issue, resolution) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION_ISSUE,\n  payload: remediations.updateRemediationIssue(id, issue, { resolution }),\n});\n\nexport const getResolutions = (ruleId) => ({\n  type: ACTION_TYPES.GET_RESOLUTIONS,\n  payload: resolutions.getResolutionsForIssue(ruleId),\n});\n\nexport const getConnectionStatus = (id) => {\n  return {\n    type: ACTION_TYPES.GET_CONNECTION_STATUS,\n    payload: remediations.getRemediationConnectionStatus(id),\n  };\n};\n\nexport const runRemediation = (id, etag, exclude) => {\n  return {\n    type: ACTION_TYPES.RUN_REMEDIATION,\n    payload: remediations.runRemediation(id, {\n      headers: { 'If-Match': etag },\n      data: { exclude },\n    }),\n  };\n};\n\nexport const setEtag = (etag) => ({\n  type: ACTION_TYPES.SET_ETAG,\n  payload: { etag },\n});\n\nexport const getPlaybookRuns = (remediationId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUNS,\n  payload: remediations.listPlaybookRuns(remediationId),\n});\n\nexport const cancelPlaybookRuns = (remediationId, runId) => ({\n  type: ACTION_TYPES.CANCEL_PLAYBOOK_RUNS,\n  payload: remediations.cancelPlaybookRuns(remediationId, runId),\n});\n\nexport const getPlaybookRun = (remediationId, runId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN,\n  payload: remediations.getPlaybookRunDetails(remediationId, runId),\n});\n\nexport const getPlaybookRunSystems = (\n  remediationId,\n  runId,\n  executorId,\n  limit = 50,\n  offset = 0,\n  ansibleHost\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS,\n  payload: remediations.getPlaybookRunSystems(\n    remediationId,\n    runId,\n    executorId,\n    limit,\n    offset,\n    ansibleHost\n  ),\n});\n\nexport const getPlaybookRunSystemDetails = (\n  remediationId,\n  runId,\n  systemId\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS,\n  payload: remediations.getPlaybookRunSystemDetails(\n    remediationId,\n    runId,\n    systemId\n  ),\n});\n\nexport const expandInventoryTable = (id, isOpen) => ({\n  type: ACTION_TYPES.EXPAND_INVENTORY_TABLE,\n  payload: {\n    id,\n    isOpen,\n  },\n});\n\nexport const getEndpoint = (id, options = {}) => ({\n  type: ACTION_TYPES.GET_ENDPOINT,\n  payload: sources.showEndpoint(id, options),\n});\n// payload: sources.listEndpoints(id, options)\n\nexport const selectEntity = (id, selected) => ({\n  type: ACTION_TYPES.SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const deleteSystems = (systems, remediation) => ({\n  type: ACTION_TYPES.DELTE_SYSTEMS,\n  payload: deleteSystemsFromRemediation(systems, remediation),\n});\n\nexport const checkExecutable = (id) => ({\n  type: ACTION_TYPES.CHECK_EXECUTABLE,\n  payload: remediations.checkExecutable(id),\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst NoReceptorBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Do more with your Find it Fix it capabilities\"\n      actionClose={<AlertActionCloseButton onClose={onClose} />}\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Configure your systems with Cloud Connector to fix systems across all\n          your Satellite instances.\n        </StackItem>\n        <StackItem>\n          {/* eslint-disable-next-line max-len */}\n          <a href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index\">\n            Learn how to configure\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default NoReceptorBanner;\n\nNoReceptorBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nNoReceptorBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Alert,\n  AlertGroup,\n  AlertActionCloseButton,\n} from '@patternfly/react-core';\n\nconst PlaybookToastAlerts = ({\n  key,\n  title,\n  description = '',\n  variant = 'success',\n}) => {\n  const [activeAlerts, setActiveAlerts] = useState([]);\n\n  useEffect(() => {\n    addActiveAlert(key, title, description, variant);\n  }, [key]);\n\n  const removeAlert = (key) => {\n    setActiveAlerts((previousAlerts) => [\n      previousAlerts.filter((alert) => alert.key !== key),\n    ]);\n  };\n\n  const addActiveAlert = (key, title, description, variant) => {\n    setActiveAlerts((activeAlerts) => [\n      ...activeAlerts,\n      { key: key, title: title, description: description, variant: variant },\n    ]);\n  };\n\n  return (\n    <div>\n      <AlertGroup isToast>\n        {activeAlerts.map(({ key, title, description, variant }) => (\n          <Alert\n            timeout\n            isLiveRegion\n            key={key}\n            variant={variant}\n            title={title}\n            onTimeout={() => removeAlert(key)}\n            actionClose={\n              <AlertActionCloseButton\n                title={title}\n                onClose={() => removeAlert(key)}\n              />\n            }\n          >\n            {description}\n          </Alert>\n        ))}\n      </AlertGroup>\n    </div>\n  );\n};\n\nPlaybookToastAlerts.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  variant: PropTypes.string,\n  key: PropTypes.string,\n};\n\nexport const generateUniqueId = () => new Date().getTime();\n\nexport default PlaybookToastAlerts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './ConfirmationDialog.scss';\n\nexport default function ConfirmationDialog({\n  isOpen = true,\n  title = 'Remove system?',\n  text = 'This action cannot be undone',\n  confirmText = 'Remove system',\n  onClose = (f) => f,\n}) {\n  return (\n    <Modal\n      title={\n        <div>\n          <ExclamationTriangleIcon className=\"rem-m-alert rem-c-delete-icon pf-u-mr-xs\" />\n          {title}\n        </div>\n      }\n      className=\"remediations rem-c-dialog\"\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      onClose={() => onClose(false)}\n      isFooterLeftAligned\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"danger\"\n          ouiaId=\"confirm\"\n          onClick={() => onClose(true)}\n        >\n          {confirmText}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          ouiaId=\"cancel\"\n          onClick={() => onClose(false)}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <h2>{text}</h2>\n    </Modal>\n  );\n}\n\nConfirmationDialog.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  text: PropTypes.string,\n  confirmText: PropTypes.string,\n  onClose: PropTypes.func,\n};\n","import React from 'react';\n\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\n\nimport { LockIcon } from '@patternfly/react-icons';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\n\nconst DeniedState = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Remediations\" />\n      </PageHeader>\n      <Main>\n        <EmptyState\n          variant={EmptyStateVariant.full}\n          className=\"rem-c-denied-state\"\n        >\n          <EmptyStateIcon icon={LockIcon} />\n          <Title headingLevel=\"h5\" size=\"lg\">\n            You do not have access to Remediations\n          </Title>\n          <EmptyStateBody>\n            Contact your organization administrator(s) for more information.\n          </EmptyStateBody>\n          {document.referrer ? (\n            <Button variant=\"primary\" onClick={() => history.back()}>\n              Return to previous page\n            </Button>\n          ) : (\n            <Button variant=\"primary\" component=\"a\" href=\".\">\n              Go to landing page\n            </Button>\n          )}\n        </EmptyState>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default DeniedState;\n","import React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport DesktopIcon from '@patternfly/react-icons/dist/js/icons/desktop-icon';\nimport PropTypes from 'prop-types';\n\nconst EmptyExecutePlaybookState = () => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={DesktopIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        This playbook has no systems associated with it.\n      </Title>\n      <EmptyStateBody>\n        Add at least one system and action to this playbook to use remote\n        execution.\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default EmptyExecutePlaybookState;\n\nEmptyExecutePlaybookState.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n  Alert,\n  Tooltip,\n  ExpandableSection,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { downloadPlaybook } from '../../api';\nimport { styledConnectionStatus } from '../statusHelper';\nimport {\n  TableHeader,\n  Table,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { generateUniqueId } from '../Alerts/PlaybookToastAlerts';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport './ExecuteModal.scss';\nimport EmptyExecutePlaybookState from '../EmptyExecutePlaybookState';\n\nexport const ExecuteModal = ({\n  isOpen,\n  onClose,\n  showRefresh,\n  isLoading,\n  data,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  setEtag,\n  setActiveAlert,\n}) => {\n  const [isUserEntitled, setIsUserEntitled] = useState(false);\n  const [connected, setConnected] = useState([]);\n  const [disconnected, setDisconnected] = useState([]);\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  useEffect(() => {\n    window.insights.chrome.auth\n      .getUser()\n      .then((user) =>\n        setIsUserEntitled(user.entitlements.smart_management.is_entitled)\n      );\n  }, []);\n\n  useEffect(() => {\n    const [con, dis] = data.reduce(\n      ([pass, fail], e) =>\n        e && e.connection_status === 'connected'\n          ? [[...pass, { ...e }], fail]\n          : [pass, [...fail, e]],\n      [[], []]\n    );\n    setConnected(con);\n    setDisconnected(dis);\n  }, [data]);\n\n  const generateRowsStatus = (con) => {\n    return styledConnectionStatus(con.connection_status);\n  };\n\n  const rows = [...connected, ...disconnected].map((con) => ({\n    cells: [\n      {\n        title: con.executor_name ? (\n          <Tooltip content={`${con.executor_name}`}>\n            <span>\n              {con.executor_name.length > 25\n                ? `${con.executor_name.slice(0, 22)}...`\n                : con.executor_name}\n            </span>\n          </Tooltip>\n        ) : (\n          'Direct connection'\n        ),\n      },\n      con.system_count,\n      isUserEntitled && {\n        title: generateRowsStatus(con),\n      },\n    ],\n  }));\n  const connectedCount = connected.reduce((acc, e) => e.system_count + acc, 0);\n  const systemCount = data.reduce((acc, e) => e.system_count + acc, 0);\n\n  const pluralize = (number, str) =>\n    number > 1 ? `${number} ${str}s` : `${number} ${str}`;\n\n  return (\n    <Modal\n      className=\"remediations rem-c-execute-modal\"\n      variant={isDebug() ? ModalVariant.large : ModalVariant.small}\n      title={'Execute playbook'}\n      isOpen={isOpen}\n      onClose={onClose}\n      isFooterLeftAligned\n      actions={\n        systemCount !== 0\n          ? [\n              <Button\n                key=\"confirm\"\n                variant=\"primary\"\n                ouiaId=\"etag\"\n                isDisabled={connected.length === 0}\n                onClick={() => {\n                  runRemediation(\n                    remediationId,\n                    etag,\n                    disconnected.map((e) => e.executor_id).filter((e) => e)\n                  );\n                  setActiveAlert({\n                    key: generateUniqueId(),\n                    title: `Executing playbook ${remediationName}`,\n                    description: (\n                      <span>\n                        View results in the <b>Activity tab</b>\n                      </span>\n                    ),\n                    variant: 'success',\n                  });\n                }}\n              >\n                {isLoading\n                  ? 'Execute playbook'\n                  : `Execute playbook on ${pluralize(\n                      connectedCount,\n                      'system'\n                    )}`}\n              </Button>,\n              <Button\n                key=\"download\"\n                variant=\"secondary\"\n                ouiaId=\"download-playbook\"\n                onClick={() => {\n                  downloadPlaybook(remediationId);\n                  setActiveAlert({\n                    key: generateUniqueId(),\n                    title: 'Preparing playbook for download',\n                    description:\n                      'Once complete, your download will start automatically.',\n                    variant: 'info',\n                  });\n                }}\n              >\n                Download playbook\n              </Button>,\n              isDebug() ? (\n                <Button\n                  key=\"reset-etag\"\n                  onClick={() => setEtag('test')}\n                  ouiaId=\"reset-etag\"\n                >\n                  Reset etag\n                </Button>\n              ) : null,\n            ]\n          : [\n              <Button\n                key=\"close-modal\"\n                onClick={() => onClose()}\n                variant=\"primary\"\n              >\n                Close\n              </Button>,\n            ]\n      }\n    >\n      <div className=\"rem-c-execute-modal__body\">\n        {showRefresh ? (\n          <Alert\n            variant=\"warning\"\n            isInline\n            title=\"The connection status of systems associated with this Playbook has changed. Please review again.\"\n          />\n        ) : null}\n        <TextContent>\n          {isLoading ? (\n            <Skeleton size=\"lg\" />\n          ) : (\n            <Text component={TextVariants.p}>\n              Playbook contains <b>{`${pluralize(issueCount, 'action')}`}</b>\n              &nbsp;affecting\n              <b> {`${pluralize(systemCount, 'system')}.`} </b>\n            </Text>\n          )}\n          <Text>\n            <ExpandableSection toggleText=\"About remote execution with Cloud connector\">\n              Playbooks can be executed on systems which:\n              <List>\n                <ListItem>\n                  Are connected to Insights via a Satellite instance which has\n                  Receptor/Cloud Connector enabled, or <br />\n                  <Button\n                    className=\"pf-u-p-0\"\n                    key=\"download\"\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    // eslint-disable-next-line max-len\n                    href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    How to configure Receptor/Cloud Connector on Red Hat\n                    Satellite &nbsp;\n                    <ExternalLinkAltIcon />\n                  </Button>\n                </ListItem>\n                <ListItem>\n                  Are directly connected to Insights via Red Hat connector, and\n                  Cloud Connector is enabled <br />\n                  <Button\n                    className=\"pf-u-p-0\"\n                    key=\"configure\"\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    // eslint-disable-next-line max-len\n                    href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/red_hat_connector_configuration_guide/index\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    How to enable Cloud Connector with Red Hat connect &nbsp;\n                    <ExternalLinkAltIcon />\n                  </Button>\n                </ListItem>\n              </List>\n            </ExpandableSection>\n          </Text>\n          <Text component={TextVariants.p}>\n            Executed Ansible Playbooks run on eligible systems with Cloud\n            Connector. The playbook will be pushed immediately after selecting\n            “Execute playbook”. If the playbook has “Auto reboot” on, systems\n            requiring reboot to complete an action will reboot.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            isInline\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/articles/rhc\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            Learn more about Cloud Connector &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n          {rows.length !== 0 && (\n            <Text component={TextVariants.h4}>\n              Connection status of systems\n            </Text>\n          )}\n        </TextContent>\n        {isLoading && <Skeleton size=\"lg\" />}\n        {!isLoading && systemCount !== 0 && (\n          <Table\n            variant={TableVariant.compact}\n            aria-label=\"Systems\"\n            cells={[\n              {\n                title: 'Connection type',\n                value: 'type',\n              },\n              {\n                title: 'Systems',\n                value: 'count',\n              },\n              isUserEntitled && {\n                title: 'Connection status',\n                value: 'status',\n              },\n            ]}\n            rows={rows}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n        {!isLoading && systemCount === 0 && <EmptyExecutePlaybookState />}\n      </div>\n    </Modal>\n  );\n};\n\nExecuteModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  showRefresh: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  issueCount: PropTypes.number,\n  runRemediation: PropTypes.func,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  setActiveAlert: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { pluralize } from '../statusHelper';\n\nconst RemoveSystemModal = ({\n  isOpen,\n  selected,\n  onConfirm,\n  onClose,\n  remediationName,\n}) => (\n  <Modal\n    variant={ModalVariant.medium}\n    title={`Remove selected systems from ${remediationName}`}\n    isOpen={isOpen}\n    onClose={onClose}\n    appendTo={document.getElementsByClassName('remediations')[0]}\n    actions={[\n      <Button\n        key=\"remove-confirm\"\n        variant=\"danger\"\n        onClick={onConfirm}\n        ouiaId=\"confirm-delete\"\n      >\n        Remove\n      </Button>,\n      <Button key=\"remove-cancel\" variant=\"link\" onClick={onClose}>\n        Cancel\n      </Button>,\n    ]}\n  >\n    <Split hasGutter>\n      <SplitItem>\n        <ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" />\n      </SplitItem>\n      <SplitItem isFilled>\n        <Stack hasGutter>\n          <StackItem>\n            This action will remove{' '}\n            {selected.length === 1 ? (\n              <span>\n                <b> {selected[0]?.display_name} </b> system\n              </span>\n            ) : (\n              <span>\n                <b> {selected.length} </b> systems\n              </span>\n            )}{' '}\n            from <b>{remediationName}</b> Remediation.\n          </StackItem>\n          <StackItem>\n            Removing {pluralize(selected.length, 'system')} from this\n            Remediation will remove it from all associated issues in{' '}\n            <b>{remediationName}</b> Remediation. Be careful as you can end up\n            with Remediation without any systems.\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  </Modal>\n);\n\nRemoveSystemModal.propTypes = {\n  selected: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      display_name: PropTypes.string,\n    })\n  ).isRequired,\n  remediationName: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default RemoveSystemModal;\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n","import React, { useEffect, useRef, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { remediationSystems } from '../../store/reducers';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { deleteSystems, selectEntity, loadRemediation } from '../../actions';\nimport './SystemsTable.scss';\nimport RemoveSystemModal from './RemoveSystemModal';\nimport { generateUniqueId } from '../Alerts/PlaybookToastAlerts';\nimport {\n  calculateChecked,\n  calculateSystems,\n  fetchInventoryData,\n} from './helpers';\n\nconst SystemsTableWrapper = ({\n  remediation,\n  registry,\n  refreshRemediation,\n  setActiveAlert,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const systemsRef = useRef();\n  const getEntitiesRef = useRef(() => undefined);\n  const activeSystem = useRef(undefined);\n  const dispatch = useDispatch();\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n\n  const onConfirm = () => {\n    (async () => {\n      const selectedSystems =\n        selected.size > 0\n          ? Array.from(selected, ([, value]) => value)\n          : [\n              {\n                ...activeSystem.current,\n              },\n            ];\n      const action = deleteSystems(selectedSystems, remediation);\n      dispatch(action);\n      await action.payload;\n      refreshRemediation();\n    })();\n    activeSystem.current = undefined;\n    setActiveAlert({\n      key: generateUniqueId(),\n      title: `Removed ${selected.size} ${\n        selected.size > 1 ? 'systems' : 'system'\n      } from playbook`,\n      description: '',\n      variant: 'success',\n    });\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    systemsRef.current = calculateSystems(remediation);\n  }, [remediation.id]);\n\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      noDetail\n      hideFilters={{\n        all: true,\n        name: false,\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n      bulkSelect={{\n        count: selected ? selected.size : 0,\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: () => {\n              dispatch(selectEntity(-1, false));\n            },\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select page (${rows.length})`,\n                  onClick: () => {\n                    dispatch(selectEntity(0, true));\n                  },\n                }\n              : {}),\n          },\n        ],\n        checked: calculateChecked(rows, selected),\n        onSelect: (value) => {\n          dispatch(selectEntity(0, value));\n        },\n      }}\n      getEntities={async (_i, config) =>\n        fetchInventoryData(config, systemsRef.current, getEntitiesRef.current)\n      }\n      onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities, api }) => {\n        getEntitiesRef.current = api?.getEntities;\n        registry?.register?.({\n          ...mergeWithEntities(remediationSystems(INVENTORY_ACTION_TYPES)),\n        });\n      }}\n      actions={[\n        {\n          title: 'Remove system',\n          onClick: (_event, _index, { id, display_name }) => {\n            activeSystem.current = {\n              id,\n              display_name,\n              issues: remediation.issues.filter((issue) =>\n                issue.systems.find(({ id: systemId }) => systemId === id)\n              ),\n            };\n            setIsOpen(true);\n          },\n        },\n      ]}\n    >\n      {loaded && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsOpen(true)}\n          isDisabled={selected.size === 0}\n        >\n          Remove system\n        </Button>\n      )}\n      <RemoveSystemModal\n        isOpen={isOpen}\n        onConfirm={onConfirm}\n        selected={\n          selected.size > 0\n            ? Array.from(selected, ([, value]) => value)\n            : [activeSystem.current]\n        }\n        onClose={() => {\n          activeSystem.current = undefined;\n          setIsOpen(false);\n        }}\n        remediationName={remediation.name}\n      />\n    </InventoryTable>\n  );\n};\n\nconst SystemsTable = (props) => {\n  const dispatch = useDispatch();\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return registry ? (\n    <Provider store={registry.store}>\n      <SystemsTableWrapper\n        registry={registry}\n        refreshRemediation={() =>\n          dispatch(loadRemediation(props.remediation.id))\n        }\n        setActiveAlert={props.setActiveAlert}\n        {...props}\n      />\n    </Provider>\n  ) : (\n    <Fragment />\n  );\n};\n\nSystemsTable.propTypes = {\n  remediation: PropTypes.shape({\n    id: PropTypes.string,\n    issues: PropTypes.arrayOf(\n      PropTypes.shape({\n        systems: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string,\n            display_name: PropTypes.string,\n            resolved: PropTypes.bool,\n          })\n        ),\n      })\n    ),\n  }),\n};\n\nSystemsTableWrapper.propTypes = {\n  ...SystemsTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  refreshRemediation: PropTypes.func,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default SystemsTable;\n","import React from 'react';\n\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  SyncIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\n\nimport { CancelButton } from '../containers/CancelButton';\n\nimport { capitalize } from '../Utilities/utils';\n\nconst connectorUrl = () =>\n  insights.chrome.isBeta()\n    ? `${window.location.origin}/beta/settings/connector`\n    : `${window.location.origin}/settings/connector`;\n\nexport const normalizeStatus = (status) =>\n  ({\n    running: 'running',\n    pending: 'running',\n    acked: 'running',\n    failure: 'failure',\n    canceled: 'canceled',\n    success: 'success',\n  }[status]);\n\nexport const renderStatusIcon = (status) =>\n  ({\n    running: (\n      <InProgressIcon\n        className=\"rem-c-running\"\n        aria-label=\"connection status\"\n      />\n    ),\n    success: (\n      <CheckCircleIcon\n        className=\"rem-c-success\"\n        aria-label=\"connection status\"\n      />\n    ),\n    failure: (\n      <TimesCircleIcon\n        className=\"rem-c-failure\"\n        aria-label=\"connection status\"\n      />\n    ),\n    canceled: (\n      <TimesCircleIcon\n        className=\"rem-c-canceled\"\n        aria-label=\"connection status\"\n      />\n    ),\n  }[status]);\n\nexport const renderStatus = (status, text) =>\n  ({\n    running: (\n      <Flex className=\"rem-c-running\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Running'}</b>\n        </FlexItem>\n        <FlexItem>\n          <InProgressIcon aria-label=\"connection status: running\" />\n        </FlexItem>\n      </Flex>\n    ),\n    success: (\n      <Flex className=\"rem-c-success\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Success'}</b>\n        </FlexItem>\n        <FlexItem>\n          <CheckCircleIcon aria-label=\"connection status: success\" />\n        </FlexItem>\n      </Flex>\n    ),\n    failure: (\n      <Flex className=\"rem-c-failure\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Failed'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: failed\" />\n        </FlexItem>\n      </Flex>\n    ),\n    canceled: (\n      <Flex className=\"rem-c-canceled\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Canceled'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: canceled\" />\n        </FlexItem>\n      </Flex>\n    ),\n  }[status]);\n\nconst statusTextClass = 'rem-c-status-text';\nexport const statusText = (executorStatus) =>\n  ({\n    running: <b className={`${statusTextClass} rem-c-running`}>Running</b>,\n    pending: <b className={`${statusTextClass} rem-c-running`}>Pending</b>,\n    acked: <b className={`${statusTextClass} rem-c-running`}> Acked </b>,\n    success: <b className={`${statusTextClass} rem-c-success`}>Succeeded</b>,\n    failure: <b className={`${statusTextClass} rem-c-failure`}>Failed</b>,\n    canceled: <b className={`${statusTextClass} rem-c-canceled`}>Canceled</b>,\n  }[executorStatus]);\n\nexport const pluralize = (number, str) =>\n  number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\nexport const StatusSummary = ({\n  executorStatus,\n  permission,\n  hasCancel,\n  counts,\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const runningCount =\n    counts.acked && !counts.acked.isNaN()\n      ? counts.running + counts.pending + counts.acked\n      : counts.running + counts.pending;\n  const failCount = counts.failure + counts.canceled;\n  const passCount = counts.success;\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  const statusBar = (\n    <Flex className=\"rem-c-status-bar\">\n      {executorStatus && <FlexItem>{statusText(executorStatus)}</FlexItem>}\n      <FlexItem>{renderStatus('success', `${passCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('failure', `${failCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('running', `${runningCount}`)}</FlexItem>\n      {isDebug() &&\n        hasCancel &&\n        permission.permissions.execute &&\n        executorStatus &&\n        normalizeStatus(executorStatus) === 'running' && (\n          <FlexItem>\n            <CancelButton\n              remediationName={remediationName}\n              remediationId={remediationId}\n              playbookId={playbookId}\n            />\n          </FlexItem>\n        )}\n    </Flex>\n  );\n\n  if (executorStatus) {\n    return (\n      <Tooltip\n        position=\"right\"\n        className=\"ins-c-status-tooltip\"\n        enableFlip\n        content={\n          <div>\n            Run: {capitalize(executorStatus)} <br />\n            Success: {pluralize(counts.success, 'system')} <br />\n            Failed: {pluralize(counts.failure, 'system')} <br />\n            Canceled: {pluralize(counts.canceled, 'system')} <br />\n            {counts.acked && !counts.acked.isNaN()\n              ? `Pending, Running, Acked: ${pluralize(\n                  counts.pending + counts.running + counts.acked,\n                  'system'\n                )}`\n              : `Pending, Running: ${pluralize(\n                  counts.pending + counts.running,\n                  'system'\n                )}`}\n          </div>\n        }\n      >\n        {statusBar}\n      </Tooltip>\n    );\n  }\n\n  return statusBar;\n};\n\nexport const styledConnectionStatus = (status) =>\n  ({\n    connected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <CheckCircleIcon\n            className=\"rem-c-reboot-check-circle rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Ready\n        </Text>\n      </TextContent>\n    ),\n    disconnected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Connection issue\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Receptor not responding\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"troubleshoot\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Troubleshoot\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_executor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Direct connection.\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Connect your systems to Satellite to automatically remediate.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2020-10/html/remediating_issues_across_your_red_hat_satellite_infrastructure_using_red_hat_insights/configuring-your-satellite-infrastructure-to-communicate-with-insights\"\n          >\n            Learn how to connect &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_source: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Satellite not configured\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Satellite not registered for Playbook execution\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"configure\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Learn how to register Satellite\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_receptor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <ExclamationCircleIcon\n            className=\"rem-c-failure rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Configure Cloud connector to automatically remediate\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html-single/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index#configuring-your-satellite-infrastructure-to-communicate-with-insights\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_rhc: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl()}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/red_hat_connector_configuration_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_smart_management: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Not entitled\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights is supported only for systems with Cloud\n            connector, a feature of Smart Management\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"#\"\n          >\n            Learn about Smart Management &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    disabled: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl()}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/red_hat_connector_configuration_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    loading: (\n      <TextContent>\n        <Text component={TextVariants.small}>\n          <SyncIcon\n            className=\"rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Checking\n        </Text>\n      </TextContent>\n    ),\n  }[status]);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalVariant, Button, Title } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './WarningModal.scss';\n\nexport const WarningModal = ({ isOpen, onModalCancel, onConfirmCancel }) => (\n  <Modal\n    header={\n      <Title\n        headingLevel=\"h1\"\n        size=\"2xl\"\n        className=\"ins-c-modal__cancel-run-warning-header\"\n      >\n        <ExclamationTriangleIcon\n          size=\"md\"\n          className=\"ins-c-modal__cancel-run-warning-header--icon\"\n        />\n        Cancel remediation process\n      </Title>\n    }\n    title=\"Cancel remediation process\"\n    hideTitle\n    variant={ModalVariant.small}\n    className=\"ins-c-modal__cancel-run-warning\"\n    isOpen={isOpen}\n    onClose={onModalCancel}\n    actions={[\n      <Button\n        key=\"confirm\"\n        variant=\"danger\"\n        ouiaId=\"cancel_playbook\"\n        onClick={onConfirmCancel}\n      >\n        Cancel playbook process\n      </Button>,\n      <Button\n        key=\"cancel\"\n        variant=\"link\"\n        ouiaId=\"cancel\"\n        onClick={onModalCancel}\n      >\n        Cancel\n      </Button>,\n    ]}\n    isFooterLeftAligned\n  >\n    <span>\n      Canceling a running playbook process only affects pending and running\n      tasks. It does not affect any previously succeeded or failed tasks that\n      have already run.\n    </span>\n  </Modal>\n);\n\nWarningModal.propTypes = {\n  type: PropTypes.string,\n  isOpen: PropTypes.bool,\n  onModalCancel: PropTypes.func,\n  onConfirmCancel: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport { WarningModal } from '../components/Modals/WarningModal';\n\nimport { useDispatch } from 'react-redux';\nimport { cancelPlaybookRuns } from '../actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const CancelButton = ({\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const [cancelWarningVisible, setcancelWarningVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const cancelRun = (remediationName, remediationId, playbookId) => {\n    dispatch(cancelPlaybookRuns(remediationId, playbookId));\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title: `Canceling playbook ${remediationName} successful`,\n        dismissDelay: 8000,\n        dismissable: false,\n      })\n    );\n    setcancelWarningVisible(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"link\" onClick={() => setcancelWarningVisible(true)}>\n        Cancel process\n      </Button>\n      <WarningModal\n        isOpen={cancelWarningVisible}\n        onModalCancel={() => setcancelWarningVisible(false)}\n        onConfirmCancel={() =>\n          cancelRun(remediationName, remediationId, playbookId)\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nCancelButton.propTypes = {\n  remediationName: PropTypes.string,\n  remediationId: PropTypes.string,\n  playbookId: PropTypes.string,\n};\n","import { useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport filter from 'lodash/filter';\nimport pickBy from 'lodash/pickBy';\nimport keys from 'lodash/keys';\nimport keyBy from 'lodash/keyBy';\nimport mapValues from 'lodash/mapValues';\nimport identity from 'lodash/identity';\nimport intersection from 'lodash/intersection';\n\nimport { SEARCH_DEBOUNCE_DELAY } from '../constants';\n\nconst chain =\n  (f1, f2) =>\n  (...args) => {\n    f1(...args);\n    f2(...args);\n  };\n\n/**\n * Returns a function f that, when called, invokes a sequence of callback functions.\n *\n * By default, this sequence only contains the identity function.\n * Additional callback functions can be added to the sequence by calling f.add().\n * When the function is called with parameters, e.g. f(1, 2), these parameters are passed to callback functions.\n * Callback functions may return a promise however these will *not* be awaited.\n * If a callback function throws an exception any following callback functions will *not* be invoked.\n *\n * Usage:\n * const f = callbacks();\n *\n * f.add(value => console.log(value));\n * f.add(value => console.log(value + 1));\n * f.add(value => console.log(value + 2));\n *\n * f(5); // prints 5 6 7\n */\nfunction callbacks() {\n  let cb = identity;\n  const fn = (...args) => cb(...args);\n  fn.add = (f) => (cb = chain(cb, f));\n  return fn;\n}\n\nfunction assertId(id) {\n  if (id === undefined) {\n    throw new Error('row does not define id!');\n  }\n}\n\nexport function useSorter(defaultSortBy = 2, defaultSortDir = 'asc') {\n  const [sortBy, setSortBy] = useState(defaultSortBy);\n  const [sortDir, setSortDir] = useState(defaultSortDir);\n\n  const cb = callbacks();\n\n  return {\n    sortBy,\n    sortDir,\n    onChange: cb.add,\n    props: {\n      sortBy: {\n        index: sortBy,\n        direction: sortDir,\n      },\n      onSort(event, sortBy, sortDir) {\n        cb(sortBy, sortDir);\n        setSortBy(sortBy);\n        setSortDir(sortDir);\n      },\n    },\n  };\n}\n\nexport function useFilter() {\n  const [value, setValue] = useState('');\n\n  const cb = callbacks();\n\n  const onValueChange = debounce((value) => {\n    cb(value);\n    setValue(value);\n  }, SEARCH_DEBOUNCE_DELAY);\n\n  return {\n    value,\n    setValue: onValueChange,\n    onChange: cb.add,\n    props: {\n      onFilterChange: onValueChange,\n    },\n  };\n}\n\nexport function useExpander(rowToId = (row) => row.id) {\n  const [value, setValue] = useState(false);\n  let rows = false;\n\n  return {\n    value,\n    register: (r) => {\n      rows = r;\n      rows.forEach((row) => {\n        if (rowToId(row) === value) {\n          row.isOpen = true;\n        }\n      });\n    },\n    props: {\n      onCollapse(event, index, value) {\n        if (!rows) {\n          throw new Error('register() not called on useExpander()');\n        }\n\n        const id = rowToId(rows[index]);\n        assertId(id);\n\n        setValue(value ? id : false);\n      },\n    },\n  };\n}\n\nexport function usePagination() {\n  const [page, setPage] = useState(1);\n  const [pageDebounced, setPageDebounced] = useState(1);\n  const [pageSize, setPageSize] = useState(20);\n\n  const reset = () => setPage(1);\n  const cb = callbacks();\n\n  return {\n    page,\n    pageDebounced,\n    offset: (page - 1) * pageSize,\n    pageSize,\n    setPage,\n    onChange: cb.add,\n    reset,\n    props: {\n      page,\n      perPage: pageSize,\n      onSetPage(event, value) {\n        setPage(value);\n        event.target.tagName === 'INPUT'\n          ? debounce(setPageDebounced, SEARCH_DEBOUNCE_DELAY)(value)\n          : setPageDebounced(value);\n        cb(value, pageSize);\n      },\n      onPerPageSelect(event, value) {\n        cb(page, value);\n        reset();\n        setPageSize(value);\n      },\n    },\n  };\n}\n\nfunction onSelectOne(selected, isSelected, id) {\n  assertId(id);\n\n  const result = {\n    ...selected,\n    [id]: isSelected,\n  };\n\n  return result;\n}\n\nfunction onSelectPage(rows, value, isSelected, rowToId) {\n  const rowIds = keyBy(\n    filter(rows, (row) => rowToId(row)),\n    rowToId\n  );\n\n  return {\n    ...value,\n    ...mapValues(rowIds, () => isSelected),\n  };\n}\n\nfunction isSelected(value, id) {\n  return Object.prototype.hasOwnProperty.call(value, id) ? value[id] : false;\n}\n\nexport function useSelector(rowToId = (row) => row.id) {\n  const [value, setValue] = useState({});\n  let rows = false;\n\n  return {\n    getSelectedIds(possibleIds) {\n      const selected = keys(pickBy(value, identity));\n      if (possibleIds) {\n        return intersection(selected, possibleIds);\n      }\n\n      return selected;\n    },\n    register: (r) => {\n      rows = r;\n      rows.forEach((row) => (row.selected = value[rowToId(row)] === true));\n    },\n    reset: () => setValue({}),\n    props: {\n      onSelect: (selectionType, isSelected, index) => {\n        if (!rows) {\n          throw new Error('register() not called on useSelector()');\n        }\n\n        switch (selectionType) {\n          case 'none': {\n            setValue({});\n            break;\n          }\n          case 'page': {\n            setValue(onSelectPage(rows, value, isSelected, rowToId));\n            break;\n          }\n          default: {\n            setValue(onSelectOne(value, isSelected, rowToId(rows[index])));\n          }\n        }\n      },\n    },\n    tbodyProps: {\n      onRowClick(event, row) {\n        if (['A', 'BUTTON', 'INPUT'].includes(event.target.tagName)) {\n          return;\n        }\n\n        const id = rowToId(row);\n        assertId(id);\n        setValue((value) => ({\n          ...value,\n          [id]: !isSelected(value, id),\n        }));\n      },\n    },\n  };\n}\n","function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport reducers from './reducers';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorTitleKey: 'message',\n      errorDescriptionKey: 'description',\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register(reducers);\n  registry.register({ notifications: notificationsReducer });\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\nconst RebootColumn = ({ rebootRequired }) => {\n  return (\n    <Fragment>\n      <span>{rebootRequired ? 'Required' : 'Not required'}</span>\n    </Fragment>\n  );\n};\n\nRebootColumn.propTypes = {\n  rebootRequired: PropTypes.bool,\n};\n\nexport default RebootColumn;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport RebootColumn from './RebootColumn';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\nimport { buildIssueUrl } from '../../Utilities/urls';\nimport sortBy from 'lodash/sortBy';\n\nconst issueType = {\n  advisor: 'Advisor recommendation',\n  vulnerabilities: 'Vulnerability',\n  'patch-advisory': 'Patch advisory',\n};\n\nconst sortByIndex = (issue) => [\n  issue.description,\n  issue.resolution.needs_reboot,\n  issueType?.[issue.id.split(':')[0]],\n  issue.resolved,\n];\n\nconst IssuesColumn = ({ issues, status, display_name }) => {\n  const [sortByConfig, setSortByConfig] = useState({\n    index: 0,\n    direction: 'asc',\n  });\n  const [isOpen, setIsOpen] = useState();\n  const StatusIcon = status ? CheckIcon : TimesIcon;\n  const sortedIssues = sortBy(\n    issues,\n    (sortIssue) => sortByIndex(sortIssue)[sortByConfig.index]\n  );\n  return (\n    <Fragment>\n      <Button variant=\"link\" isInline onClick={() => setIsOpen(true)}>\n        {issues.length}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        title={`Actions for system ${display_name}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Table\n          variant=\"compact\"\n          aria-label={`Issues table for ${display_name}`}\n          rows={(sortByConfig.direction === 'asc'\n            ? sortedIssues\n            : sortedIssues.reverse()\n          ).map((issue) => [\n            {\n              title: (\n                <Fragment>\n                  <div>\n                    <a variant=\"link\" isInline href={buildIssueUrl(issue.id)}>\n                      {issue.description}\n                    </a>\n                  </div>\n                  <div>{issue.resolution.description}</div>\n                </Fragment>\n              ),\n            },\n            {\n              title: (\n                <Fragment>\n                  <RebootColumn\n                    rebootRequired={issue.resolution.needs_reboot}\n                  />\n                </Fragment>\n              ),\n            },\n            issueType?.[issue.id.split(':')[0]] || 'Unknown',\n            {\n              title: (\n                <Fragment>\n                  <StatusIcon />{' '}\n                  {issue.resolved ? 'Remediated' : 'Not remediated'}\n                </Fragment>\n              ),\n            },\n          ])}\n          cells={[\n            {\n              title: 'Action',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable, cellWidth(20)],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable, cellWidth(15)],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable, cellWidth(20)],\n            },\n          ]}\n          sortBy={sortByConfig}\n          onSort={(_e, index, direction) =>\n            setSortByConfig({ index, direction })\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </Modal>\n    </Fragment>\n  );\n};\n\nIssuesColumn.propTypes = {\n  issues: PropTypes.arrayOf(PropTypes.shape()),\n  rebootRequired: PropTypes.bool,\n  status: PropTypes.bool,\n  display_name: PropTypes.string,\n};\n\nexport default IssuesColumn;\n","import React from 'react';\n\nimport { ACTION_TYPES } from '../constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport { RebootColumn, IssuesColumn } from '../components/SystemsTable';\n\nfunction issuesToSystemsIds(issues) {\n  return uniq(\n    flatMap(issues, (issue) => issue.systems.map((system) => system.id))\n  );\n}\n\nfunction computeRebootStats(remediation) {\n  const systems = issuesToSystemsIds(remediation.issues);\n  const rebootRequired = issuesToSystemsIds(\n    remediation.issues.filter((issue) => issue.resolution.needs_reboot)\n  );\n\n  return {\n    ...remediation,\n    stats: {\n      systemsWithReboot: rebootRequired.length,\n      systemsWithoutReboot: systems.length - rebootRequired.length,\n    },\n  };\n}\n\nexport const remediationSystems = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [ACTION_TYPES.SELECT_ENTITY]: (state, { payload }) => {\n      const selected = state.selected || new Map();\n      if (payload.selected) {\n        if (payload.id === 0) {\n          state?.rows?.forEach((row) => selected.set(row?.id, row));\n        } else {\n          const selectedRow = state?.rows?.find(\n            ({ id } = {}) => id === payload.id\n          );\n          selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n        }\n      } else {\n        if (payload.id === 0) {\n          state.rows.forEach((row) => selected.delete(row.id));\n        } else if (payload.id === -1) {\n          selected.clear();\n        } else {\n          selected.delete(payload.id);\n        }\n      }\n\n      return {\n        ...state,\n        selected: new Map(selected),\n      };\n    },\n    [`${LOAD_ENTITIES_FULFILLED}`]: (state) => {\n      return {\n        ...state,\n        rows: state.rows.map(({ id, ...row }) => ({\n          id,\n          ...row,\n          selected: !!state.selected?.get(id),\n        })),\n        columns: [\n          ...state.columns.filter(({ key }) =>\n            ['display_name', 'tags'].includes(key)\n          ),\n          {\n            key: 'issues',\n            title: 'Issues',\n            // eslint-disable-next-line react/display-name\n            renderFunc: (issues, id, { display_name }) => (\n              <IssuesColumn\n                issues={issues}\n                id={id}\n                display_name={display_name}\n              />\n            ),\n            props: { width: 15 },\n          },\n          {\n            key: 'rebootRequired',\n            title: 'Reboot required',\n            // eslint-disable-next-line react/display-name\n            renderFunc: (rebootRequired) => (\n              <RebootColumn rebootRequired={rebootRequired} />\n            ),\n            props: { width: 15 },\n          },\n        ].map((cell) => ({\n          ...cell,\n          props: {\n            ...(cell.props || {}),\n            isStatic: true,\n          },\n        })),\n      };\n    },\n  });\n\nconst reducers = {\n  remediations: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATIONS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATIONS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        value: action.payload,\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATIONS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  selectedRemediation: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATION_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        remediation: computeRebootStats(action.payload),\n      }),\n      [ACTION_TYPES.REFRESH_REMEDIATION_FULFILLED]: (state, action) => {\n        if (action.payload.id === state.remediation.id) {\n          return {\n            status: 'fulfilled',\n            remediation: computeRebootStats(action.payload),\n          };\n        }\n\n        return state;\n      },\n      [ACTION_TYPES.LOAD_REMEDIATION_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n      [ACTION_TYPES.PATCH_REMEDIATION_FULFILLED]: (\n        { status, remediation },\n        action\n      ) => {\n        return {\n          status,\n          remediation: {\n            ...remediation,\n            ...action.payload,\n          },\n        };\n      },\n      [ACTION_TYPES.DELETE_REMEDIATION_ISSUE_FULFILLED]: (state, action) => {\n        const issues = state.remediation.issues.filter(\n          (issue) => issue.id !== action.payload.issueId\n        );\n        if (action.payload.id === state.remediation.id) {\n          return {\n            status: 'fulfilled',\n            remediation: computeRebootStats({\n              ...state.remediation,\n              issues,\n              needs_reboot: issues.some(\n                (issue) => issue.resolution.needs_reboot\n              ), // eslint-disable-line camelcase\n            }),\n          };\n        }\n\n        return state;\n      },\n      [ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM_FULFILLED]: (\n        state,\n        action\n      ) => {\n        if (action.payload.id !== state.remediation.id) {\n          return state;\n        }\n\n        const issues = state.remediation.issues.filter((issue) => {\n          if (issue.id !== action.payload.issue) {\n            return true;\n          }\n\n          // if the action only had 1 systems, which is now gone, remove the action also\n          issue.systems = issue.systems.filter(\n            (system) => system.id !== action.payload.system\n          );\n          return issue.systems.length > 0;\n        });\n\n        return {\n          status: 'fulfilled',\n          remediation: computeRebootStats({\n            ...state.remediation,\n            issues,\n            needs_reboot: issues.some((issue) => issue.resolution.needs_reboot), // eslint-disable-line camelcase\n          }),\n        };\n      },\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  selectedRemediationStatus: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload,\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  connectionStatus: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_CONNECTION_STATUS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.GET_CONNECTION_STATUS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload.data,\n        etag: action.payload.etag,\n      }),\n      [ACTION_TYPES.GET_CONNECTION_STATUS_REJECTED]: () => ({\n        status: 'rejected',\n        data: [],\n      }),\n      [ACTION_TYPES.SET_ETAG]: (state, action) => ({\n        ...state,\n        etag: action.etag,\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  inventoryEntitiesReducer:\n    (props = { INVENTORY_ACTION_TYPES: {} }) =>\n    () =>\n      applyReducerHash({\n        [props.INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: (state) => {\n          return {\n            ...state,\n            columns: [\n              {\n                key: 'display_name',\n                title: 'Name',\n                // eslint-disable-next-line\n                renderFunc: (name, id, { display_name }) => <div><a href={props.urlBuilder(id)}>{display_name}</a></div>\n              },\n              {\n                key: 'system_status',\n                title: 'Status',\n                // eslint-disable-next-line\n                        renderFunc: (name, id) => <div>{props.generateStatus(id)}</div>\n              },\n            ],\n          };\n        },\n      }),\n\n  playbookActivityIntentory: (props) => () =>\n    applyReducerHash({\n      [props.INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: (state) => {\n        return {\n          ...state,\n          columns: [\n            {\n              key: 'display_name',\n              title: 'Name',\n              // eslint-disable-next-line\n              renderFunc: (name, id, { fqdn }) => <div><a href={props.urlBuilder(id)}>{fqdn || name || id}</a></div>\n            },\n            state.columns.find((col) => col.key === 'tags'),\n            {\n              key: 'status',\n              title: 'Status',\n              renderFunc: (status) => props.renderStatus(status),\n            },\n          ],\n        };\n      },\n\n      [ACTION_TYPES.EXPAND_INVENTORY_TABLE]: (state, action) => {\n        return {\n          ...state,\n          rows: state.rows.map((row) => ({\n            ...row,\n            isOpen:\n              row.id === action.payload.id ? action.payload.isOpen : false,\n          })),\n        };\n      },\n    }),\n\n  playbookRuns: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUNS_FULFILLED]: (state, action) => ({\n      status: 'fulfilled',\n      data: action.payload.data,\n      meta: action.payload.meta,\n    }),\n  }),\n\n  cancelPlaybookRuns: applyReducerHash(\n    {\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        value: action.payload,\n      }),\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  playbookRun: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUN_FULFILLED]: (state, action) => ({\n      data: action.payload,\n    }),\n  }),\n\n  playbookRunSystems: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_FULFILLED]: (state, action) => ({\n        ...action.payload,\n      }),\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_PENDING]: (state) => ({\n        ...state,\n        status: 'pending',\n      }),\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_REJECTED]: (state) => ({\n        ...state,\n        data: [],\n        status: 'rejected',\n      }),\n    },\n    {\n      data: [],\n      meta: {},\n    }\n  ),\n\n  playbookRunSystemDetails: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS_FULFILLED]: (\n      state,\n      action\n    ) => ({\n      ...action.payload,\n    }),\n  }),\n\n  runRemediation: applyReducerHash(\n    {\n      [ACTION_TYPES.RUN_REMEDIATION_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.RUN_REMEDIATION_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload.data,\n      }),\n      [ACTION_TYPES.RUN_REMEDIATION_REJECTED]: (state, action) => ({\n        status: action.payload.response.status === 412 ? 'changed' : 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  sources: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_ENDPOINT_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: {\n          ...state.data,\n          [action.payload.id]: action.payload,\n        },\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n  executable: applyReducerHash(\n    {\n      [ACTION_TYPES.CHECK_EXECUTABLE_REJECTED]: () => false,\n      [ACTION_TYPES.CHECK_EXECUTABLE_FULFILLED]: () => true,\n    },\n    false\n  ),\n};\n\nexport default reducers;\n"],"names":["actionWrapper","actionsList","callback","dispatch","Promise","all","map","event","payload","then","PlaybookCardHeader","name","id","remediation","remediationIdx","archived","selector","setExecuteOpen","update","loadRemediation","getConnectionStatus","downloadPlaybook","permission","setActiveAlert","useState","isOpen","setIsOpen","isArchived","setIsArchived","useDispatch","dropdownItems","archiveHandler","patchRemediation","push","DropdownItem","key","isDisabled","isReceptorConfigured","className","hasSmartManagement","permissions","execute","onClick","generateUniqueId","title","description","variant","addNotification","CardHeader","CardActions","Dropdown","isPlain","onSelect","f","toggle","KebabToggle","onToggle","position","type","checked","getSelectedIds","includes","onChange","e","props","target","CardTitle","Stack","hasGutter","StackItem","Link","to","Label","DateFormat","date","updated_at","propTypes","PropTypes","PlaybookCard","complete","total","Card","isCompact","CardBody","Split","SplitItem","system_count","resolved_count","issue_count","CheckCircleIcon","Progress","value","measureLocation","ProgressMeasureLocation","renderProgress","executeOpen","EmptyRemediations","archivedCount","setShowArchived","Bullseye","EmptyState","EmptyStateIcon","icon","WrenchIcon","size","Title","headingLevel","EmptyStateBody","Button","ouiaId","SORTING_ITERATEES","RemediationTable","remediations","loadRemediations","sorter","filter","pagination","shouldUpdateGrid","setShouldUpdateGrid","setRemediationCount","showArchived","status","cards","useContext","PermissionContext","showRefreshMessage","setShowRefreshMessage","activeToastAlert","setActiveToastAlert","selectedRemediation","reduxSelector","state","connectionStatus","runningRemediation","runRemediation","useEffect","column","sortBy","sortDir","pageSize","offset","undefined","meta","Main","Spinner","centered","data","reduce","result","length","register","ExecuteModal","onClose","showRefresh","remediationId","etag","isLoading","issueCount","issues","remediationStatus","getPlaybookRuns","setEtag","activeAlert","PlaybookToastAlerts","Grid","sm","md","lg","idx","GridItem","TestButtons","localStorage","getItem","systems","allHosts","slice","dataProviderC1","dataProviderC2","this","isEnabled","window","insights","chrome","auth","getUser","getHosts","hosts","setState","results","RemediationBtn","dataProvider","children","onRemediationCreated","dataProviderA1","dataProviderA2","dataProviderC3","dataProviderC4","dataProviderC5","dataProviderD1","dataProviderD2","React","defaultProps","document","noReceptorBannerVisible","setNoReceptorBannerVisible","useSorter","useFilter","useSelector","usePagination","remediationCount","filterText","setFilterText","dialogOpen","setDialogOpen","actions","itemsCountInPage","pageDebounced","setValue","reset","selectedIds","getNotification","activeFiltersConfig","filters","category","chips","onDelete","Consumer","read","DeniedState","PageHeader","PageHeaderTitle","PrimaryToolbar","filterConfig","items","label","filterValues","placeholder","_e","bulkSelect","count","isSelected","actionsConfig","valid","byId","keyBy","r","verifyDownload","download","write","setItem","itemCount","NoReceptorBanner","ConfirmationDialog","text","confirmText","del","deleteRemediation","RemediationDetails","lazy","ActivityDetails","ExecutorDetails","Routes","Suspense","fallback","Fragment","Switch","Route","exact","path","component","Home","render","Redirect","childProps","history","createContext","App","hasRead","hasWrite","hasExecute","readPermission","writePermission","executePermission","arePermissionLoaded","unregister","init","hideGlobalFilter","identifyApp","user","entitlements","smart_management","is_entitled","getIsReceptorConfigured","isConfigured","on","domEvent","href","replace","basename","getUserPermissions","remediationsPermissions","permissionList","handlePermissionUpdate","Provider","Component","withRouter","connect","getIssuePrefix","split","getIssueApplication","getSystemName","display_name","hostname","includesIgnoreCase","included","toLowerCase","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","buildIssueUrl","parts","segment","app","urijs","baseURI","pathName","location","pathname","Error","limit","system","hideArchived","ACTION_TYPES","loadRemediationStatus","getRemediationStatus","refreshRemediation","createRemediation","deleteRemediationIssue","issueId","deleteRemediationIssueSystem","patchRemediationIssue","resolution","getResolutions","ruleId","resolutions","exclude","headers","cancelPlaybookRuns","runId","getPlaybookRun","getPlaybookRunSystems","executorId","ansibleHost","getPlaybookRunSystemDetails","expandInventoryTable","getEndpoint","options","sources","selectEntity","selected","deleteSystems","deleteSystemsFromRemediation","checkExecutable","Alert","isInline","actionClose","AlertActionCloseButton","activeAlerts","setActiveAlerts","addActiveAlert","removeAlert","previousAlerts","alert","AlertGroup","isToast","timeout","isLiveRegion","onTimeout","Date","getTime","Modal","ExclamationTriangleIcon","ModalVariant","isFooterLeftAligned","EmptyStateVariant","LockIcon","referrer","back","EmptyExecutePlaybookState","DesktopIcon","remediationName","isUserEntitled","setIsUserEntitled","connected","setConnected","disconnected","setDisconnected","isDebug","pass","fail","connection_status","con","dis","generateRowsStatus","styledConnectionStatus","rows","cells","executor_name","Tooltip","content","connectedCount","acc","systemCount","pluralize","number","str","executor_id","TextContent","Skeleton","Text","TextVariants","ExpandableSection","toggleText","List","ListItem","rel","ExternalLinkAltIcon","Table","TableVariant","TableHeader","TableBody","RemoveSystemModal","onConfirm","appendTo","getElementsByClassName","isFilled","isRequired","calculateChecked","every","has","some","fetchInventoryData","getEntities","page","config","currSystems","hostnameOrId","per_page","hasItems","host","find","SystemsTableWrapper","registry","systemsRef","useRef","getEntitiesRef","activeSystem","entities","Map","loaded","current","curr","forEach","found","resolved","rebootRequired","needs_reboot","calculateSystems","InventoryTable","showTags","noDetail","hideFilters","tableProps","canSelectAll","_i","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","api","remediationSystems","_event","_index","selectedSystems","Array","from","action","SystemsTable","setRegistry","ReducerRegistry","promiseMiddleware","store","connectorUrl","isBeta","origin","normalizeStatus","running","pending","acked","failure","canceled","success","renderStatus","Flex","spacer","default","FlexItem","InProgressIcon","TimesCircleIcon","statusTextClass","StatusSummary","executorStatus","hasCancel","counts","playbookId","runningCount","isNaN","failCount","passCount","statusBar","statusText","enableFlip","capitalize","style","margin","no_executor","no_source","no_receptor","ExclamationCircleIcon","no_rhc","no_smart_management","disabled","loading","SyncIcon","WarningModal","onModalCancel","onConfirmCancel","header","hideTitle","CancelButton","cancelWarningVisible","setcancelWarningVisible","dismissDelay","dismissable","cancelRun","callbacks","cb","identity","fn","add","f1","f2","assertId","defaultSortBy","defaultSortDir","setSortBy","setSortDir","index","direction","onSort","onValueChange","debounce","SEARCH_DEBOUNCE_DELAY","onFilterChange","setPage","setPageDebounced","setPageSize","perPage","onSetPage","tagName","onPerPageSelect","onSelectOne","onSelectPage","rowToId","rowIds","row","mapValues","Object","prototype","hasOwnProperty","call","possibleIds","keys","pickBy","intersection","selectionType","tbodyProps","onRowClick","assert","test","msg","TypeError","checkAllowedKeys","reference","checkRequiredKeys","checkSystems","isArray","validate","middleware","getRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","item","reducers","notifications","notificationsReducer","RebootColumn","issueType","advisor","vulnerabilities","IssuesColumn","sortByConfig","setSortByConfig","StatusIcon","CheckIcon","TimesIcon","sortedIssues","sortIssue","reverse","transforms","sortable","cellWidth","issuesToSystemsIds","uniq","flatMap","computeRebootStats","stats","systemsWithReboot","systemsWithoutReboot","LOAD_ENTITIES_FULFILLED","applyReducerHash","set","selectedRow","clear","get","columns","renderFunc","width","cell","isStatic","selectedRemediationStatus","inventoryEntitiesReducer","urlBuilder","generateStatus","playbookActivityIntentory","fqdn","col","playbookRuns","playbookRun","playbookRunSystems","playbookRunSystemDetails","response","executable"],"sourceRoot":""}