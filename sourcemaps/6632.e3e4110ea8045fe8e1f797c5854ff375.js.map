{"version":3,"file":"js/6632.9bf4195e366f2a99a2d1.js","mappings":"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","sources":["webpack:///./src/api/inventory.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/store/actions/host-actions.js"],"sourcesContent":["import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\n\nexport const selectPlaybookFields = [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields,\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.small}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Unexpected error\n      </Title>\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  FormSelect,\n  FormSelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <FormSelect\n                onChange={(val) => {\n                  setIsLoadingRemediation(true);\n                  api.getRemediation(val).then((remediation) => {\n                    setSelectedPlaybook(remediation);\n                    setIsLoadingRemediation(false);\n                    existingPlaybookSelected &&\n                      input.onChange(remediation.name);\n                    existingPlaybookSelected &&\n                      formOptions.change(EXISTING_PLAYBOOK, remediation);\n                  });\n                }}\n                value={selectedPlaybook?.id || ''}\n                aria-label=\"Select an existing playbook\"\n              >\n                {existingRemediations?.length ? (\n                  [\n                    <FormSelectOption\n                      key=\"select-playbook-placeholder\"\n                      value=\"\"\n                      label=\"Select playbook\"\n                      isDisabled\n                    />,\n                    ...existingRemediations.map(({ id, name }) => (\n                      <FormSelectOption key={id} value={id} label={name} />\n                    )),\n                  ]\n                ) : (\n                  <FormSelectOption\n                    key=\"empty\"\n                    value=\"empty\"\n                    label=\"No existing playbooks\"\n                  />\n                )}\n              </FormSelect>\n            ) : (\n              <Skeleton size={SkeletonSize.lg} />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(val) => {\n                  setNewPlaybookName(val);\n                  existingPlaybookSelected || input.onChange(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n              />\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { dedupeArray, TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = dedupeArray([\n        ...systems,\n        ...(curr.systems || []),\n      ]).filter((id) => selected?.includes(id));\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-systems\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <SystemsTable\n          registry={registry}\n          allSystemsNamed={allSystemsNamed}\n          allSystems={allSystems}\n          hasCheckbox={true}\n          bulkSelect={{\n            id: 'select-systems',\n            count: selected.length,\n            items: [\n              {\n                title: 'Select none (0)',\n                onClick: () => onSelectRows(false),\n              },\n              ...(loaded && rowsLength > 0\n                ? [\n                    {\n                      title: `Select page (${rowsLength})`,\n                      onClick: () => onSelectRows(true),\n                    },\n                  ]\n                : []),\n            ],\n            checked: selected.length > 0,\n            onSelect: (value) => onSelectRows(value),\n          }}\n          onSelectRows\n        />\n      </StackItem>\n      {error && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">{error}</span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-actions\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"rem-c-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"rem-c-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div\n              className=\"ins-c-resolution-option\"\n              sm={12}\n              md={6}\n              lg={4}\n              xl={3}\n              key={resolution.id}\n            >\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() => input.onChange(!input.value)}\n        >\n          Turn {input.value ? 'off' : 'on'} autoreboot\n        </Button>\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      id={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateIcon\n        className=\"pf-u-mb-lg pf-u-mt-sm\"\n        color={\n          failed\n            ? 'var(--pf-global--danger-color--100)'\n            : percent === 100\n            ? 'var(--pf-global--success-color--100)'\n            : undefined\n        }\n        icon={\n          failed\n            ? ExclamationCircleIcon\n            : percent === 100\n            ? CheckCircleIcon\n            : InProgressIcon\n        }\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {failed\n          ? 'Error: Unable to add items to playbook'\n          : percent === 100\n          ? 'Items added to playbook'\n          : 'Adding items to the playbook'}\n      </Title>\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      {(failed || percent === 100) && (\n        <EmptyStateBody className=\"pf-c-progress-message\">\n          {failed ? (\n            'Please try again.'\n          ) : (\n            <div>\n              {`${issues.length} ${pluralize(\n                issues.length,\n                'action'\n              )} affecting \n                        ${systems.length} ${pluralize(\n                systems.length,\n                'system'\n              )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n              <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n            </div>\n          )}\n        </EmptyStateBody>\n      )}\n      {percent === 100 && (\n        <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n          You can remediate these systems directly from Insights by enabling\n          <Button\n            className=\"pf-u-py-0 pf-u-px-xs\"\n            variant=\"link\"\n            ouiaId=\"CloudConnectorButton\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isSmall\n            onClick={() =>\n              (window.location.href = `${\n                window.location.origin\n              }/${getEnvUrl()}settings/connector`)\n            }\n          >\n            Cloud Connector\n          </Button>\n          on eligible systems.\n        </EmptyStateBody>\n      )}\n      {failed && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"TryAgainButton\"\n          onClick={() => {\n            setState({ failed: false, percent: 0 });\n            submitRemediation(false);\n          }}\n        >\n          Try again\n        </Button>\n      )}\n      {percent === 100 && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"ReturnToAppButton\"\n          onClick={() => {\n            onClose();\n            setOpen(false);\n          }}\n        >\n          Return to application\n        </Button>\n      )}\n      <EmptyStateSecondaryActions>\n        {failed && (\n          <Button\n            variant=\"secondary\"\n            ouiaId=\"BackToWizardButton\"\n            onClick={() => {\n              onClose();\n            }}\n          >\n            Go back to the wizard\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            variant=\"link\"\n            component=\"a\"\n            ouiaId=\"OpenPlaybookButton\"\n            href={remediationUrl(playbook.id)}\n            onClick={() => {\n              onClose();\n              setOpen(false);\n            }}\n          >\n            Open playbook {playbook.name}\n          </Button>\n        )}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...(data.systems || [])]\n      )\n    )\n  );\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    setState({ type: 'schema', payload: schemaBuilder(data.issues) });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, []);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems || [],\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== undefined).length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n"],"names":["hosts","HostsApi","undefined","instance","getHostsById","systems","page","perPage","apiHostGetHostById","batchResolutions","issues","api","map","i","id","result","transform","value","key","resolutions","errors","push","warnings","hostsInitialState","isLoading","FETCH_SELECTED_HOSTS","state","payload","results","selectPlaybookFields","name","SELECT_PLAYBOOK","component","validate","type","validatorTypes","PATTERN","pattern","REQUIRED","EXISTING_PLAYBOOK_SELECTED","componentTypes","TEXT_FIELD","hideField","EXISTING_PLAYBOOK","RESOLUTIONS","reviewActionsFields","MANUAL_RESOLUTION","FetchError","props","resolutionsCount","useFieldApi","input","valid","EmptyState","variant","EmptyStateVariant","small","EmptyStateIcon","color","red","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","propTypes","SelectPlaybook","allSystems","formOptions","useFormApi","values","getState","useState","existingRemediations","setExistingRemediations","existingPlaybookSelected","setExistingPlaybookSelected","newPlaybookName","setNewPlaybookName","selectedPlaybook","setSelectedPlaybook","isLoadingRemediation","setIsLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","useEffect","data","fetchData","differenceWith","isEqual","length","change","ISSUES_MULTIPLE","getIssuesMultiple","Stack","hasGutter","StackItem","Alert","isInline","title","Text","pluralize","Popover","bodyContent","Fragment","warning","Button","TextContent","Grid","GridItem","sm","md","lg","Radio","label","isDisabled","defaultChecked","onChange","FormSelect","val","then","remediation","FormSelectOption","Skeleton","SkeletonSize","FormGroup","fieldId","TextInput","autoFocus","description","isRequired","ReviewSystems","registry","dispatch","useDispatch","error","rowsLength","entities","rows","selected","loaded","allSystemsNamed","hostReducer","host","display_name","reduce","acc","curr","tempSystems","dedupeArray","filter","includes","onSelectRows","TOGGLE_BULK_SELECT","SystemsTable","hasCheckbox","bulkSelect","count","items","onClick","checked","onSelect","className","ReducerRegistry","ReviewActions","issue","Object","keys","SYSTEMS","index","direction","sortByState","setSortByState","multiples","some","record","buildRows","setRows","isChecked","Table","TableVariant","compact","onCollapse","event","rowKey","isOpen","cells","transforms","sortable","cellFormatters","expandable","onSort","sortBy","TableHeader","noWrap","TableBody","IssueResolution","issueResolutions","find","r","uniqueResolutions","uniqBy","removedResolutions","shortenIssueId","resolution","action","xl","Tile","SELECTED_RESOLUTIONS","isSelected","split","needs_reboot","alternate","Review","issuesById","records","getResolution","needsReboot","auto_reboot","ExclamationTriangleIcon","onRemediationCreated","resolutionsInitialState","FETCH_RESOLUTIONS","ProgressBar","percent","failed","ProgressVariant","success","danger","info","Progress","onClose","setOpen","submitRemediation","setState","formValues","flat","playbook","large","CheckCircleIcon","InProgressIcon","href","remediationUrl","ouiaId","ExternalLinkAltIcon","iconPosition","isSmall","window","location","origin","getEnvUrl","EmptyStateSecondaryActions","PropTypes","initialState","submitted","reducer","schema","Error","RemediationWizard","basePath","useRef","useReducer","keyBy","fields","WIZARD","isDynamic","inModal","showTitles","nextStep","filteredIssues","showTitle","slice","findIndex","issueResolutionNextStep","substepOf","AUTO_REBOOT","register","applyReducerHash","fetchResolutions","splitArray","forEach","chunk","options","HostHelper","fetchHostsById","fetchHostNames","current","mapperExtension","review","validatorMapper","subscription","FormTemplate","showFormControls","initialValues","componentMapper","WizardMapper","TextField","onSubmit","onCancel","Modal","ModalVariant","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","promiseMiddleware","store","Provider"],"sourceRoot":""}