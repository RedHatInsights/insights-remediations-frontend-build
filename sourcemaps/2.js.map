{"version":3,"sources":["webpack:///./src/components/RemediationDetailsTable.js","webpack:///./src/Utilities/model.js"],"names":["_react","_interopRequireDefault","__webpack_require__","_propTypes","_insightsFrontendComponents","_reactCore","_model","RemediationDetailsTable","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","state","rows","remediation","issues","flatMap","issue","issueIndex","children","isActive","cells","description","resolution","needs_reboot","systems","length","getIssueApplication","isOpen","title","createElement","Fragment","Card","key","className","CardBody","Grid","GridItem","span","system","systemIndex","getSystemName","colSpan","onExpandClicked","bind","_assertThisInitialized2","event","row","rowKey","forEach","childKey","setState","_this2","Stack","gutter","StackItem","Level","LevelItem","TextInput","type","value","placeholder","aria-label","Split","SplitItem","Button","isDisabled","Table","header","hasSort","expandable","onExpandClick","hasCheckbox","React","Component","propTypes","PropTypes","object","_ref","id","split","_ref2","display_name","hostname"],"mappings":"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","file":"js/2.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Table } from '@red-hat-insights/insights-frontend-components';\n\nimport { Level, LevelItem,\n    TextInput,\n    Button,\n    Card, CardBody,\n    Stack, StackItem,\n    Grid, GridItem,\n    Split, SplitItem } from '@patternfly/react-core';\nimport { getIssueApplication, getSystemName } from '../Utilities/model';\nimport './RemediationTable.scss';\n\nclass RemediationDetailsTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows: this.props.remediation.issues.flatMap((issue, issueIndex) => ([\n                {\n                    children: [ 1 ],\n                    isActive: false,\n                    cells: [\n                        issue.description,\n                        issue.resolution.description,\n                        issue.resolution.needs_reboot === true ? 'Yes' : 'No',\n                        issue.systems.length,\n                        getIssueApplication(issue)\n                    ]\n                },\n                {\n                    isOpen: false,\n                    cells: [{\n                        title:\n                            <React.Fragment>\n                                <Card key={ issueIndex } className='ins-c-system-card'>\n                                    <CardBody>\n                                        <Grid>\n                                            <GridItem span={ 9 }> System </GridItem>\n                                            <GridItem span={ 3 }> Status </GridItem>\n                                        </Grid>\n                                    </CardBody>\n                                </Card>\n                                { this.props.remediation.issues[issueIndex].systems.flatMap((system, systemIndex) => ([\n                                    <Card key={ systemIndex } className='ins-c-system-card'>\n                                        <CardBody>\n                                            <Grid>\n                                                <GridItem span={ 9 }> { getSystemName(system) } </GridItem>\n                                                <GridItem span={ 3 }> unknown </GridItem>\n                                            </Grid>\n                                        </CardBody>\n                                    </Card>\n                                ])) }\n                            </React.Fragment>,\n                        colSpan: 4\n                    }]\n                }\n            ]))\n        };\n        this.onExpandClicked = this.onExpandClicked.bind(this);\n    }\n\n    onExpandClicked(event, row, rowKey) {\n        const { rows } = this.state;\n        rows[rowKey].isActive = !row.isActive;\n        row.children.forEach(childKey => rows[childKey].isOpen = !rows[childKey].isOpen);\n        this.setState({ rows });\n    }\n\n    render() {\n\n        const { rows } = this.state;\n\n        return (\n            <Stack gutter=\"md\">\n                <StackItem className='ins-c-remediations-details-table__toolbar'>\n                    <Level>\n                        <LevelItem>\n                            { /* TODO: Fix filtering */ }\n                            <TextInput\n                                type=\"text\"\n                                value= ' '\n                                placeholder=\"Filter\"\n                                aria-label='Filter'\n                            />\n                        </LevelItem>\n                        <LevelItem>\n                            <Split gutter=\"md\">\n                                <SplitItem><Button isDisabled ={ true }> Add Action </Button></SplitItem>\n                                <SplitItem><Button> Remove Action </Button></SplitItem>\n                            </Split>\n                        </LevelItem>\n                    </Level>\n                </StackItem>\n                <StackItem>\n                    <Table\n                        className='ins-c-remediations-details-table'\n                        header={ [\n                            {\n                                title: 'Actions',\n                                hasSort: true\n                            }, {\n                                title: 'Resolution',\n                                hasSort: true\n                            }, {\n                                title: 'Reboot Required',\n                                hasSort: true\n                            }, {\n                                title: '# of systems',\n                                hasSort: true\n                            }, {\n                                title: 'Type',\n                                hasSort: true\n                            }]\n                        }\n                        expandable\n                        onExpandClick={ (event, row, rowKey) => this.onExpandClicked(event, row, rowKey) }\n                        hasCheckbox={ true }\n                        rows= { rows }\n                    />\n                </StackItem>\n            </Stack>\n        );\n    };\n}\n\nRemediationDetailsTable.propTypes = {\n    remediation: PropTypes.object\n};\n\nexport default RemediationDetailsTable;\n","export function getIssueApplication ({ id }) {\n    switch (id.split(':')[0]) {\n        case 'advisor': return 'Advisor';\n        case 'compliance': return 'Compliance';\n        case 'vulnerabilities': return 'Vulnerability';\n        default: return 'Unknown';\n    }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName ({ display_name, hostname, id }) {\n    if (display_name && display_name !== 'null') {\n        return display_name;\n    }\n\n    if (hostname && hostname !== 'null') {\n        return hostname;\n    }\n\n    return id;\n}\n"],"sourceRoot":""}