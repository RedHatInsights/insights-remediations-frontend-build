{"version":3,"file":"js/2179.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Utilities/useRemediationsList.js","webpack:///./src/api/inventory.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/common/helpers.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/store/actions/host-actions.js"],"sourcesContent":["import { useAxiosWithPlatformInterceptors } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst { API_BASE } = require('../config');\nimport { useState, useEffect, useRef } from 'react';\n\nexport const useRemediationsList = (remediation) => {\n  const axios = useAxiosWithPlatformInterceptors();\n  const [remediationsList, setRemediationsList] = useState();\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    mounted.current = true;\n    const fetchData = async () => {\n      try {\n        const nameList = await axios.get(\n          `${API_BASE}/remediations/?fields[data]=name`\n        );\n        mounted.current && setRemediationsList(nameList.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted.current = false;\n    };\n  }, [remediation]);\n\n  return remediationsList;\n};\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","export const verifyName = (val, remediationsList) => {\n  const compareData = () => {\n    const trimmedVal = val.trim();\n    const dataHashmap = {};\n    remediationsList &&\n      remediationsList.forEach((item) => {\n        dataHashmap[item.name] = true;\n      });\n\n    if (dataHashmap[trimmedVal]) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return compareData();\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\nimport { verifyName } from './common/helpers';\n\nexport const selectPlaybookFields = (remediationsList) => [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n      (value) =>\n        verifyName(value, remediationsList)\n          ? 'Duplicate names are not allowed'\n          : undefined,\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues, remediationsList) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields(remediationsList),\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.sm}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateHeader\n        titleText=\"Unexpected error\"\n        icon={<EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />}\n        headingLevel=\"h4\"\n      />\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  FormSelect,\n  FormSelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems, remediationsList } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  //cannot use hook here, as it needs to be called in the OnChange function\n  const verifyName = (val) => {\n    setNewPlaybookName(val);\n    existingPlaybookSelected || input.onChange(val);\n    const trimmedVal = val.trim();\n    const compareData = () => {\n      const dataHashmap = {};\n      remediationsList &&\n        remediationsList.forEach((item) => {\n          dataHashmap[item.name] = true;\n        });\n\n      if (dataHashmap[trimmedVal]) {\n        setIsDisabled(true);\n      } else {\n        setIsDisabled(false);\n      }\n    };\n    return compareData();\n  };\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <FormSelect\n                onChange={(_event, val) => {\n                  setIsLoadingRemediation(true);\n                  api.getRemediation(val).then((remediation) => {\n                    setSelectedPlaybook(remediation);\n                    setIsLoadingRemediation(false);\n                    existingPlaybookSelected &&\n                      input.onChange(remediation.name);\n                    existingPlaybookSelected &&\n                      formOptions.change(EXISTING_PLAYBOOK, remediation);\n                  });\n                }}\n                value={selectedPlaybook?.id || ''}\n                aria-label=\"Select an existing playbook\"\n              >\n                {existingRemediations?.length ? (\n                  [\n                    <FormSelectOption\n                      key=\"select-playbook-placeholder\"\n                      data-testid=\"select-playbook-placeholder\"\n                      value=\"\"\n                      label=\"Select playbook\"\n                      isDisabled\n                    />,\n                    ...existingRemediations.map(({ id, name }) => (\n                      <FormSelectOption key={id} value={id} label={name} />\n                    )),\n                  ]\n                ) : (\n                  <FormSelectOption\n                    key=\"empty\"\n                    value=\"empty\"\n                    label=\"No existing playbooks\"\n                  />\n                )}\n              </FormSelect>\n            ) : (\n              <Skeleton size={SkeletonSize.lg} data-testid=\"skeleton-loader\" />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(_event, val) => {\n                  verifyName(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n                validated={\n                  isDisabled &&\n                  !existingPlaybookSelected &&\n                  ValidatedOptions.error\n                }\n              />\n\n              {isDisabled && !existingPlaybookSelected && (\n                <p className=\"pf-v5-u-font-size-sm pf-v5-u-danger-color-100\">\n                  Playbook with the same name already exists.\n                </p>\n              )}\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  remediationsList: propTypes.array,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { dedupeArray, TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n  const [bootcError, setBootcError] = useState(null);\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const bootcIds = useSelector(\n    ({ entities }) =>\n      entities?.rows\n        ?.filter((r) => r.system_profile?.bootc_status?.booted?.image)\n        .map((r) => r.id) || []\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const hasBootc = selected.some((s) => bootcIds.includes(s));\n    const isAdvisor = issues?.some((i) => i?.id?.startsWith('advisor'));\n\n    if (hasBootc && !isAdvisor) {\n      setBootcError(\n        'Image mode systems cannot be added to a remediation playbook.'\n      );\n      return input.onChange({});\n    }\n    setBootcError(null);\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = dedupeArray([\n        ...systems,\n        ...(curr.systems || []),\n      ]).filter((id) => selected?.includes(id));\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack\n      hasGutter\n      data-component-ouia-id=\"wizard-review-systems\"\n      data-testid=\"wizard-review-systems\"\n    >\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <SystemsTable\n          registry={registry}\n          allSystemsNamed={allSystemsNamed}\n          allSystems={allSystems}\n          hasCheckbox={true}\n          bulkSelect={{\n            id: 'select-systems',\n            count: selected.length,\n            items: [\n              {\n                title: 'Select none (0)',\n                onClick: () => onSelectRows(false),\n              },\n              ...(loaded && rowsLength > 0\n                ? [\n                    {\n                      title: `Select page (${rowsLength})`,\n                      onClick: () => onSelectRows(true),\n                    },\n                  ]\n                : []),\n            ],\n            checked: selected.length > 0,\n            onSelect: (value) => onSelectRows(value),\n          }}\n          onSelectRows\n        />\n      </StackItem>\n      {(bootcError || error) && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">\n            {bootcError || error}\n          </span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TableVariant, sortable, expandable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack\n      hasGutter\n      data-component-ouia-id=\"wizard-review-actions\"\n      data-testid=\"wizard-review-actions\"\n    >\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"rem-c-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"rem-c-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div className=\"ins-c-resolution-option\" key={resolution.id}>\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TableVariant, sortable, expandable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Switch,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack\n      hasGutter\n      data-component-ouia-id=\"wizard-review\"\n      data-testid=\"wizard-review\"\n    >\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Switch\n          data-testid=\"autoreboot-switch\"\n          label=\"Turn off autoreboot\"\n          labelOff=\"Turn on autoreboot\"\n          isChecked={input.value}\n          onChange={() => input.onChange(!input.value)}\n        />\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      data-testid={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateActions,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.lg}\n      data-testid=\"wizard-progress\"\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateHeader\n        titleText={\n          <>\n            {failed\n              ? 'Error: Unable to add items to playbook'\n              : percent === 100\n              ? 'Items added to playbook'\n              : 'Adding items to the playbook'}\n          </>\n        }\n        icon={\n          <EmptyStateIcon\n            className=\"pf-u-mb-lg pf-u-mt-sm\"\n            color={\n              failed\n                ? 'var(--pf-global--danger-color--100)'\n                : percent === 100\n                ? 'var(--pf-global--success-color--100)'\n                : undefined\n            }\n            icon={\n              failed\n                ? ExclamationCircleIcon\n                : percent === 100\n                ? CheckCircleIcon\n                : InProgressIcon\n            }\n          />\n        }\n        headingLevel=\"h1\"\n      />\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      <EmptyStateFooter>\n        {(failed || percent === 100) && (\n          <EmptyStateBody className=\"pf-c-progress-message\">\n            {failed ? (\n              'Please try again.'\n            ) : (\n              <div>\n                {`${issues.length} ${pluralize(\n                  issues.length,\n                  'action'\n                )} affecting \n                        ${systems.length} ${pluralize(\n                  systems.length,\n                  'system'\n                )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n                <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n              </div>\n            )}\n          </EmptyStateBody>\n        )}\n        {percent === 100 && (\n          <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n            You can remediate these systems directly from Insights by enabling\n            <Button\n              className=\"pf-u-py-0 pf-u-px-xs\"\n              variant=\"link\"\n              ouiaId=\"CloudConnectorButton\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n              size=\"sm\"\n              onClick={() =>\n                (window.location.href = `${\n                  window.location.origin\n                }/${getEnvUrl()}settings/connector`)\n              }\n            >\n              Cloud Connector\n            </Button>\n            on eligible systems.\n          </EmptyStateBody>\n        )}\n        {failed && (\n          <Button\n            className=\"pf-u-mt-md pf-u-mb-sm\"\n            variant=\"primary\"\n            ouiaId=\"TryAgainButton\"\n            data-testid={'TryAgainButton'}\n            onClick={() => {\n              setState({ failed: false, percent: 0 });\n              submitRemediation(false);\n            }}\n          >\n            Try again\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            className=\"pf-u-mt-md pf-u-mb-sm\"\n            variant=\"primary\"\n            ouiaId=\"ReturnToAppButton\"\n            onClick={() => {\n              onClose();\n              setOpen(false);\n            }}\n          >\n            Return to application\n          </Button>\n        )}\n        <EmptyStateActions>\n          {failed && (\n            <Button\n              variant=\"secondary\"\n              ouiaId=\"BackToWizardButton\"\n              data-testid={'BackToWizardButton'}\n              onClick={() => {\n                onClose();\n              }}\n            >\n              Go back to the wizard\n            </Button>\n          )}\n          {percent === 100 && (\n            <Button\n              variant=\"link\"\n              component=\"a\"\n              ouiaId=\"OpenPlaybookButton\"\n              data-testid={'OpenPlaybookButton'}\n              href={remediationUrl(playbook.id)}\n              onClick={() => {\n                onClose();\n                setOpen(false);\n              }}\n            >\n              Open playbook {playbook.name}\n            </Button>\n          )}\n        </EmptyStateActions>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal } from '@patternfly/react-core';\nimport { Wizard } from '@patternfly/react-core/deprecated';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\nimport { useRemediationsList } from '../../Utilities/useRemediationsList';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...(data.systems || [])]\n      )\n    )\n  );\n  const remediationsList = useRemediationsList();\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    remediationsList &&\n      setState({\n        type: 'schema',\n        payload: schemaBuilder(data.issues, remediationsList),\n      });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, [remediationsList]);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n      remediationsList: remediationsList,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems || [],\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== 'undefined')\n        .length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n  remediationsList: propTypes.array,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n"],"names":["API_BASE","useRemediationsList","remediation","axios","remediationsList","setRemediationsList","useState","mounted","useRef","useEffect","current","async","nameList","get","data","error","console","fetchData","hosts","HostsApi","undefined","getHostsById","systems","page","perPage","apiHostGetHostById","batchResolutions","issues","result","api","map","i","id","resolutions","warnings","errors","value","key","push","e","hostsInitialState","isLoading","state","payload","results","selectPlaybookFields","name","component","validate","type","PATTERN","pattern","REQUIRED","val","trimmedVal","trim","dataHashmap","forEach","item","compareData","verifyName","TEXT_FIELD","hideField","reviewActionsFields","fields","WIZARD","isDynamic","inModal","showTitles","title","description","nextStep","values","filter","issue","some","Object","keys","includes","length","reviewSystemsNextStep","filteredIssues","reviewActionsNextStep","showTitle","slice","findIndex","issueResolutionNextStep","substepOf","FetchError","props","resolutionsCount","input","valid","EmptyState","variant","EmptyStateVariant","sm","EmptyStateHeader","titleText","icon","EmptyStateIcon","color","headingLevel","EmptyStateBody","propTypes","SelectPlaybook","allSystems","formOptions","getState","isDisabled","setIsDisabled","existingRemediations","setExistingRemediations","existingPlaybookSelected","setExistingPlaybookSelected","newPlaybookName","setNewPlaybookName","selectedPlaybook","setSelectedPlaybook","isLoadingRemediation","setIsLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","change","Stack","hasGutter","StackItem","Alert","isInline","Text","Popover","bodyContent","Fragment","warning","Button","TextContent","Grid","GridItem","md","lg","Radio","label","defaultChecked","onChange","FormSelect","_event","then","FormSelectOption","Skeleton","size","FormGroup","fieldId","TextInput","autoFocus","validated","ValidatedOptions","className","isRequired","ReviewSystems","registry","dispatch","useDispatch","bootcError","setBootcError","rowsLength","entities","rows","selected","bootcIds","r","system_profile","bootc_status","booted","image","loaded","allSystemsNamed","hostReducer","host","display_name","hasBootc","s","isAdvisor","startsWith","reduce","acc","curr","tempSystems","onSelectRows","SystemsTable","hasCheckbox","bulkSelect","count","items","onClick","checked","onSelect","ReducerRegistry","ReviewActions","sortByState","setSortByState","index","direction","multiples","record","setRows","isChecked","Table","compact","onCollapse","event","rowKey","isOpen","cells","transforms","sortable","cellFormatters","onSort","sortBy","noWrap","IssueResolution","issueResolutions","find","uniqueResolutions","removedResolutions","Title","resolution","action","Tile","isSelected","split","needs_reboot","alternate","Review","issuesById","records","needsReboot","auto_reboot","Switch","labelOff","onRemediationCreated","resolutionsInitialState","ProgressBar","percent","failed","Progress","ProgressVariant","success","danger","info","onClose","setOpen","submitRemediation","setState","playbook","formValues","flat","EmptyStateFooter","href","ouiaId","iconPosition","window","location","origin","EmptyStateActions","initialState","submitted","reducer","schema","Error","RemediationWizard","basePath","useReducer","register","applyReducerHash","fetchResolutions","chunk","options","fetchHostsById","fetchHostNames","mapperExtension","review","validatorMapper","subscription","FormTemplate","showFormControls","initialValues","componentMapper","onSubmit","onCancel","Modal","ModalVariant","large","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","store","Provider"],"sourceRoot":""}