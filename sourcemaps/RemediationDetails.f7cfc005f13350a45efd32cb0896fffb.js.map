{"version":3,"file":"js/RemediationDetails.1671030939807.85b336af5bd3e4ecb518.js","mappings":"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","sources":["webpack:///./src/components/ResolutionModal/ResolutionStep.js","webpack:///./src/components/ResolutionEditButton.js","webpack:///./src/containers/ConnectedComponents.js","webpack:///./src/components/DeleteButton.js","webpack:///./src/containers/DeleteButtons.js","webpack:///./src/components/RemediationDetailsSystemDropdown.js","webpack:///./src/components/Layouts/IconInline.js","webpack:///./src/components/Modals/SystemsStatusModal.js","webpack:///./src/components/SystemForActionButton.js","webpack:///./src/Utilities/debug.js","webpack:///./src/components/EmptyStates/EmptyActions.js","webpack:///./src/components/RemediationDetailsTable.js","webpack:///./src/components/SystemsTable/RemoveSystemModal.js","webpack:///./src/components/SystemsTable/SystemsTable.js","webpack:///./src/components/RemediationActivityTable.js","webpack:///./src/components/Dialogs/TextInputDialog.js","webpack:///./src/components/RemediationDetailsDropdown.js","webpack:///./src/components/ExecuteButton.js","webpack:///./src/containers/ExecuteButtons.js","webpack:///./src/components/Alerts/UpsellBanner.js","webpack:///./src/components/EmptyStates/ActivityTabUpsell.js","webpack:///./src/skeletons/SkeletonTableToolbar.js","webpack:///./src/skeletons/SkeletonTabs.js","webpack:///./src/skeletons/RemediationDetailsSkeleton.js","webpack:///./src/components/EmptyStates/EmptyActivityTable.js","webpack:///./src/components/RemediationSummary.js","webpack:///./src/routes/RemediationDetails.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Form,\n  Label,\n  Radio,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nimport { Reboot } from '@redhat-cloud-services/frontend-components/Reboot';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport './ChooseResolutionModal.scss';\n\nclass ResolutionStep extends Component {\n  constructor(props) {\n    super(props);\n    this.issue = props.issue;\n    this.state = {\n      selected: props.issue.resolution,\n      resolutions: false,\n    };\n  }\n\n  onRadioChange = (resolution) => {\n    this.setState({ selected: resolution });\n  };\n\n  async componentDidMount() {\n    const resolutions = await this.props.getResolutions(this.issue.id);\n    this.setState({ resolutions: resolutions.value });\n  }\n\n  getSelectedResolution = () => {\n    return this.state.selected;\n  };\n\n  render() {\n    const { resolutions, selected } = this.state;\n    let resolutionsDisplay;\n\n    if (resolutions) {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Form>\n              {resolutions.resolutions.map((resolution) => (\n                <div className=\"ins-c-resolution-option\" key={resolution.id}>\n                  <Radio\n                    label={\n                      <Stack className=\"ins-c-resolution-choice__details\">\n                        <StackItem>{resolution.description}</StackItem>\n                        {/*\n                                                    <StackItem>\n                                                        <Battery label=\"Resolution risk\" severity={ resolution.resolution_risk } />\n                                                    </StackItem>\n                                                    */}\n                        {resolution.needs_reboot && (\n                          <StackItem>\n                            <Reboot red />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    }\n                    aria-label={resolution.description}\n                    id={resolution.id}\n                    name=\"radio\"\n                    defaultChecked={resolution.id === selected.id}\n                    onChange={() => this.onRadioChange(resolution)}\n                  />\n                </div>\n              ))}\n            </Form>\n          </StackItem>\n        </React.Fragment>\n      );\n    } else {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Stack hasGutter>\n        <StackItem>\n          <div>Select resolution for this action.</div>\n        </StackItem>\n        <StackItem>\n          <Split hasGutter>\n            <SplitItem>\n              <Label>Action</Label>\n            </SplitItem>\n            <SplitItem isFilled>\n              <h1 className=\"ins-m-text__bold\">{this.issue.description}</h1>\n            </SplitItem>\n          </Split>\n        </StackItem>\n\n        {resolutionsDisplay}\n      </Stack>\n    );\n  }\n}\n\nResolutionStep.propTypes = {\n  issue: PropTypes.object.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionStep;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport ResolutionStep from './ResolutionModal/ResolutionStep';\n\nconst ResolutionEditButton = ({\n  remediation,\n  issue,\n  onResolutionSelected,\n  getResolutions,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const resolutionStep = useRef();\n\n  const onModalClose = (result) => {\n    setIsOpen(false);\n    const resolution = resolutionStep.current?.getSelectedResolution();\n\n    if (result && issue.resolution.id !== resolution.id) {\n      onResolutionSelected(remediation.id, issue.id, resolution.id);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setIsOpen(true)}>Edit</a>\n      {isOpen && (\n        <Modal\n          variant={ModalVariant.medium}\n          className=\"rem-c-resolution-modal\"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Edit resolution\"\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={onModalClose}>\n              Save\n            </Button>,\n            <Button\n              key=\"cancel\"\n              variant=\"secondary\"\n              onClick={() => setIsOpen(false)}\n            >\n              Cancel\n            </Button>,\n          ]}\n        >\n          <ResolutionStep\n            key=\"ResolutionStep\"\n            issue={issue}\n            ref={resolutionStep}\n            getResolutions={getResolutions}\n          />\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nResolutionEditButton.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  onResolutionSelected: PropTypes.func.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionEditButton;\n","import {\n  refreshRemediation,\n  patchRemediationIssue,\n  getResolutions,\n} from '../actions';\nimport { connect } from 'react-redux';\n\nimport ResolutionEditButton from '../components/ResolutionEditButton';\n\nexport const ConnectResolutionEditButton = connect(\n  (f) => f,\n  (dispatch) => ({\n    onResolutionSelected: async (remediation, issue, resolution) => {\n      await dispatch(patchRemediationIssue(remediation, issue, resolution));\n      dispatch(refreshRemediation(remediation));\n    },\n    getResolutions: (ruleId) => dispatch(getResolutions(ruleId)),\n  })\n)(ResolutionEditButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\n\nimport './DeleteButton.scss';\n\nclass DeleteButton extends Component {\n  state = {\n    dialogOpen: false,\n  };\n\n  onButtonClicked = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  onDialogClose = (result) => {\n    this.setState({ dialogOpen: false });\n    result && this.props.onDelete();\n  };\n\n  render() {\n    const { dialogOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button\n          onClick={this.onButtonClicked}\n          isDisabled={this.props.isDisabled}\n          variant={this.props.variant}\n        >\n          {this.props.label}\n        </Button>\n        {dialogOpen && (\n          <ConfirmationDialog\n            title={this.props.dialogTitle}\n            confirmText={this.props.dialogConfirmationText}\n            text={this.props.dialogMessage}\n            onClose={this.onDialogClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nDeleteButton.propTypes = {\n  label: PropTypes.string,\n  dialogTitle: PropTypes.string,\n  dialogMessage: PropTypes.string,\n  dialogConfirmationText: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  onDelete: PropTypes.func.isRequired,\n  variant: PropTypes.string,\n};\n\nDeleteButton.defaultProps = {\n  label: 'Delete',\n  variant: 'link',\n};\n\nexport default DeleteButton;\n","import { deleteRemediation, loadRemediationStatus } from '../actions';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { loadRemediations, deleteRemediationIssue } from '../actions';\nimport { isBeta } from '../config';\n\nimport DeleteButton from '../components/DeleteButton';\n\nexport const DeleteRemediationsButton = withRouter(\n  connect(\n    (state, { remediations }) => ({\n      dialogMessage: `You will not be able to recover ${\n        remediations.length > 1 ? 'these remediations' : 'this remediation'\n      }`,\n    }),\n    (dispatch, { remediations }) => ({\n      onDelete: async () => {\n        await Promise.all(\n          remediations.map((r) => dispatch(deleteRemediation(r)))\n        );\n        dispatch(loadRemediations());\n      },\n    })\n  )(DeleteButton)\n);\n\nexport const DeleteActionsButton = withRouter(\n  connect(\n    (state, { issues }) => ({\n      label: `Remove action${issues.length > 1 ? 's' : ''}`,\n      dialogTitle: `Remove action${issues.length > 1 ? 's' : ''}`,\n      dialogConfirmationText: `Remove action${issues.length > 1 ? 's' : ''}`,\n    }),\n    (dispatch, { remediation, issues, afterDelete }) => ({\n      onDelete: async () => {\n        await Promise.all(\n          issues.map((issueId) =>\n            dispatch(deleteRemediationIssue(remediation.id, issueId))\n          )\n        );\n        if (isBeta) {\n          dispatch(loadRemediationStatus(remediation.id));\n        }\n\n        afterDelete();\n      },\n    })\n  )(DeleteButton)\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { getSystemName } from '../Utilities/model';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\n\nfunction RemediationDetailsSystemDropdown({\n  remediation,\n  issue,\n  system,\n  onDelete,\n  setActiveAlert,\n}) {\n  const [open, setOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`This playbook will not address ${\n          issue.description\n        } on ${getSystemName(system)}`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n          setActiveAlert({\n            key: generateUniqueId(),\n            title: `Removed systems from ${remediation.name}`,\n            description: '',\n            variant: 'success',\n          });\n        }}\n      />\n\n      <Dropdown\n        onSelect={(f) => f}\n        toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n        isOpen={open}\n        position={DropdownPosition.right}\n        isPlain\n      >\n        <Button onClick={() => setDeleteDialogOpen(true)} variant=\"link\">\n          Remove system\n        </Button>\n      </Dropdown>\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsSystemDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  system: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nconst connected = withRouter(\n  connect(null, (dispatch) => ({\n    onDelete: (id, issue, system) =>\n      dispatch(deleteRemediationIssueSystem(id, issue, system)),\n  }))(RemediationDetailsSystemDropdown)\n);\n\nexport default connected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconInline.scss';\n\nexport const IconInline = ({ icon, text }) => {\n  return (\n    <div className=\"rem-c-icon-inline\">\n      {icon}\n      <span className=\"rem-c-icon-inline__text\">{text}</span>\n    </div>\n  );\n};\n\nIconInline.propTypes = {\n  icon: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\n\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n  ToolbarGroup,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\nimport reducers from '../../store/reducers';\nimport RemediationDetailsSystemDropdown from '../RemediationDetailsSystemDropdown';\nimport ConfirmationDialog from '../ConfirmationDialog';\nimport { getSystemName } from '../../Utilities/model';\nimport { IconInline } from '../Layouts/IconInline';\n\nexport const SystemsStatusModal = ({\n  isOpen,\n  onClose,\n  issue,\n  remediation,\n  onDelete,\n}) => {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [system, setSystem] = useState({});\n  const [systemStatuses, setSystemStatuses] = useState({});\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [filterText, setFilterText] = useState('');\n  const inventory = useRef(null);\n  const { current: urlBuilder } = useRef(inventoryUrlBuilder(issue));\n\n  useEffect(() => {\n    const statuses = {};\n    issue.systems.map((system) => {\n      statuses[system.id] =\n        system.resolved === true ? (\n          <IconInline icon={<CheckIcon />} text=\"Remediated\" />\n        ) : (\n          <IconInline icon={<TimesIcon />} text=\"Not remediated\" />\n        );\n    });\n    setSystemStatuses(statuses);\n  }, []);\n\n  // eslint-disable-next-line react/display-name\n  const detailDropdown = (remediation, issue) => (system) =>\n    (\n      <RemediationDetailsSystemDropdown\n        remediation={remediation}\n        issue={issue}\n        system={system}\n      />\n    );\n\n  const generateStatus = (id) => {\n    return systemStatuses[id];\n  };\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Modal\n        className=\"remediations\"\n        variant={ModalVariant.large}\n        title={`System${issue.systems.length > 1 ? 's' : ''} for action ${\n          issue.description\n        }`}\n        isOpen={isOpen}\n        onClose={onClose}\n        isFooterLeftAligned\n      >\n        <div className=\"rem-c-toolbar__filter\">\n          <InventoryTable\n            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) =>\n              getRegistry().register({\n                ...mergeWithEntities(\n                  reducers.inventoryEntitiesReducer({\n                    INVENTORY_ACTION_TYPES,\n                    detailDropdown: detailDropdown(remediation, issue),\n                    urlBuilder,\n                    generateStatus,\n                  })()\n                ),\n              })\n            }\n            ref={inventory}\n            items={orderBy(\n              issue.systems.filter((s) =>\n                getSystemName(s).includes(filterText)\n              ),\n              [(s) => getSystemName(s), (s) => s.id]\n            )}\n            onRefresh={onRefresh}\n            page={page}\n            total={issue.systems.length}\n            perPage={pageSize}\n            hasCheckbox={false}\n            actions={[\n              {\n                title: ' Remove system',\n                onClick: (event, rowId, rowData) => {\n                  setSystem(rowData);\n                  setDeleteDialogOpen(true);\n                },\n              },\n            ]}\n          >\n            <TableToolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <ConditionalFilter\n                    items={[\n                      {\n                        value: 'display_name',\n                        label: 'Name',\n                        filterValues: {\n                          placeholder: 'Search by name',\n                          type: conditionalFilterType.text,\n                          value: filterText,\n                          onChange: (e, selected) => setFilterText(selected),\n                        },\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </TableToolbar>\n          </InventoryTable>\n        </div>\n      </Modal>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`Removing the system ${getSystemName(system)} from the action ${\n          issue.description\n        }\n                    will remove this system’s remediation from the playbook.`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nSystemsStatusModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  issue: PropTypes.object,\n  remediation: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { SystemsStatusModal } from './Modals/SystemsStatusModal';\nimport './SystemForActionButton.scss';\n\nexport const SystemForActionButton = ({ issue, remediation, title }) => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setOpen(true)}>{title}</a>\n      <SystemsStatusModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        issue={issue}\n        remediation={remediation}\n        onDelete={(id, issue, system) =>\n          dispatch(deleteRemediationIssueSystem(id, issue, system))\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nSystemForActionButton.propTypes = {\n  issue: PropTypes.object.isRequired,\n  remediation: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","const debug = localStorage.getItem('remediations:debug') === 'true';\n\nexport const pagination = debug\n  ? {\n      perPageOptions: [1, 2, 3, 4, 5, 10, 15, 20, 25, 50, 100, 200].map(\n        (i) => ({ title: `${i}`, value: i })\n      ),\n    }\n  : {};\n","import React from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { appUrl } from '../../Utilities/urls';\n\nexport const EmptyActions = (filtered) => {\n  return (\n    <Bullseye className=\"pf-u-pt-2xl\">\n      <EmptyState>\n        {filtered.filtered === true ? (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            No actions found\n          </Title>\n        ) : (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            This playbook is empty\n          </Title>\n        )}\n        <EmptyStateBody>\n          To add an action, select issues identified in\n          <br />\n          <a href={appUrl('advisor').toString()}>Recommendations</a>,&nbsp;\n          <a href={appUrl('compliance').toString()}>Compliance</a> or&nbsp;\n          <a href={appUrl('vulnerabilities').toString()}>Vulnerability</a>&nbsp;\n          and select\n          <br />\n          <strong>Remediate with Ansible.</strong>\n        </EmptyStateBody>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyActions.propTypes = {\n  filtered: PropTypes.bool.isRequired,\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport flatMap from 'lodash/flatMap';\nimport orderBy from 'lodash/orderBy';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport {\n  sortable,\n  TableHeader,\n  Table,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\n\nimport { getIssueApplication, includesIgnoreCase } from '../Utilities/model';\nimport { buildIssueUrl } from '../Utilities/urls';\nimport './RemediationTable.scss';\n\nimport { ConnectResolutionEditButton } from '../containers/ConnectedComponents';\nimport { DeleteActionsButton } from '../containers/DeleteButtons';\nimport { SystemForActionButton } from './SystemForActionButton';\n\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport * as debug from '../Utilities/debug';\n\nimport './RemediationDetailsTable.scss';\nimport { PermissionContext } from '../App';\nimport { EmptyActions } from './EmptyStates/EmptyActions';\n\nfunction resolutionDescriptionCell(remediation, issue) {\n  const url = buildIssueUrl(issue.id);\n\n  if (issue.resolutions_available <= 1) {\n    return url ? (\n      <React.Fragment>\n        <span>\n          <a href={url}>{issue.description}</a>\n          <br />\n          {issue.resolution.description}\n        </span>\n      </React.Fragment>\n    ) : (\n      issue.resolution.description\n    );\n  }\n\n  return url ? (\n    <React.Fragment>\n      <span>\n        <a href={url}>{issue.description}</a>\n        <br />\n        {issue.resolution.description}\n        <br />\n        <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n      </span>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      {issue.resolution.description}\n      <br />\n      <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n    </React.Fragment>\n  );\n}\n\nfunction needsRebootCell(needsReboot) {\n  return <span>{needsReboot ? 'Required' : 'Not required'}</span>;\n}\n\nfunction systemsForAction(issue, remediation, title) {\n  return (\n    <SystemForActionButton\n      key={issue.id}\n      remediation={remediation}\n      issue={issue}\n      title={title}\n    />\n  );\n}\n\nfunction getResolvedSystems(issue) {\n  let count = 0;\n  issue.systems.map((system) => {\n    if (system.resolved) {\n      count++;\n    }\n  });\n  return count;\n}\n\nconst SORTING_ITERATEES = [\n  null, // checkboxes\n  (i) => i.description,\n  null, // resolution steps\n  (i) => i.resolution.needs_reboot,\n  (i) => i.systems.length,\n  (i) => getIssueApplication(i),\n];\n\nconst buildRow = (remediation) => (issue) => {\n  const row = [\n    {\n      isOpen: false,\n      id: issue.id,\n      cells: [\n        {\n          title: resolutionDescriptionCell(remediation, issue),\n        },\n        {\n          title: needsRebootCell(issue.resolution.needs_reboot),\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${issue.systems.length}`\n          ),\n        },\n        {\n          title: getIssueApplication(issue),\n          props: { className: 'rem-m-nowrap' },\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${getResolvedSystems(issue)}/${issue.systems.length} remediated`\n          ),\n        },\n      ],\n    },\n  ];\n\n  return row;\n};\n\nfunction RemediationDetailsTable(props) {\n  const pagination = usePagination();\n  const sorter = useSorter(1, 'asc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const { setActiveAlert } = props;\n  const permission = useContext(PermissionContext);\n  const [filterText, setFilterText] = useState('');\n  const [prevRemediationsCount, setPrevRemediationsCount] = useState(0); // eslint-disable-line\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  sorter.onChange(pagination.reset);\n  filter.onChange(pagination.reset);\n\n  const filtered = props.remediation.issues.filter((i) =>\n    includesIgnoreCase(i.description, filter.value.trim())\n  );\n  const sorted = orderBy(\n    filtered,\n    [SORTING_ITERATEES[sorter.sortBy]],\n    [sorter.sortDir]\n  );\n  const paged = sorted.slice(\n    pagination.offset,\n    pagination.offset + pagination.pageSize\n  );\n\n  const rows = flatMap(paged, buildRow(props.remediation));\n\n  selector.register(rows);\n  const selectedIds = selector.getSelectedIds();\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Action', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"test\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: [\n            {\n              label: 'Search actions',\n              type: 'text',\n              filterValues: {\n                id: 'filter-by-string',\n                key: 'filter-by-string',\n                placeholder: 'Search',\n                value: filterText,\n                onChange: (_e, value) => {\n                  setFilterText(value);\n                },\n              },\n            },\n          ],\n        }}\n        bulkSelect={{\n          items: [\n            {\n              title: 'Select all',\n              onClick: () => selector.props.onSelect('page', true, 0),\n            },\n            {\n              title: 'Select none',\n              onClick: () => selector.props.onSelect('none'),\n            },\n          ],\n          checked:\n            selectedIds.length && filtered.length > selectedIds.length\n              ? null\n              : selectedIds.length,\n          count: selectedIds.length,\n          onSelect: (isSelected, e) =>\n            selector.props.onSelect(e, isSelected, -1),\n        }}\n        actionsConfig={{\n          actions: [\n            <DeleteActionsButton\n              key={props.remediation.id}\n              variant=\"secondary\"\n              isDisabled={!selectedIds.length}\n              remediation={props.remediation}\n              issues={selectedIds}\n              afterDelete={() => {\n                setActiveAlert({\n                  key: generateUniqueId(),\n                  title: `Removed ${selectedIds.length} actions from ${props.remediation.name}`,\n                  description: '',\n                  variant: 'success',\n                });\n                selector.reset;\n              }}\n            />,\n          ],\n        }}\n        pagination={{ ...pagination.props, itemCount: filtered.length }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {rows.length > 0 ? (\n        <Table\n          variant={TableVariant.compact}\n          aria-label=\"Actions\"\n          canSelectAll={false}\n          className=\"ins-c-remediation-details-table\"\n          cells={[\n            {\n              title: 'Actions',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable],\n            },\n            {\n              title: 'Systems',\n              transforms: [sortable],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable],\n            },\n          ]}\n          rows={rows}\n          {...sorter.props}\n          {...(permission.permissions.write && { ...selector.props })}\n        >\n          <TableHeader />\n          <TableBody {...selector.tbodyProps} />\n        </Table>\n      ) : filter.value ? (\n        <EmptyActions filtered={true} />\n      ) : (\n        <EmptyActions filtered={false} />\n      )}\n      {rows.length > 0 && (\n        <TableToolbar isFooter>\n          <Pagination\n            variant=\"bottom\"\n            dropDirection=\"up\"\n            itemCount={filtered.length}\n            {...pagination.props}\n            {...debug.pagination}\n          />\n        </TableToolbar>\n      )}\n    </div>\n  );\n}\n\nRemediationDetailsTable.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  status: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default RemediationDetailsTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { pluralize } from '../statusHelper';\n\nconst RemoveSystemModal = ({\n  isOpen,\n  selected,\n  onConfirm,\n  onClose,\n  remediationName,\n}) => (\n  <Modal\n    variant={ModalVariant.medium}\n    title={`Remove selected systems from ${remediationName}`}\n    isOpen={isOpen}\n    onClose={onClose}\n    appendTo={document.getElementsByClassName('remediations')[0]}\n    actions={[\n      <Button\n        key=\"remove-confirm\"\n        variant=\"danger\"\n        onClick={onConfirm}\n        ouiaId=\"confirm-delete\"\n      >\n        Remove\n      </Button>,\n      <Button key=\"remove-cancel\" variant=\"link\" onClick={onClose}>\n        Cancel\n      </Button>,\n    ]}\n  >\n    <Split hasGutter>\n      <SplitItem>\n        <ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" />\n      </SplitItem>\n      <SplitItem isFilled>\n        <Stack hasGutter>\n          <StackItem>\n            This action will remove{' '}\n            {selected.length === 1 ? (\n              <span>\n                <b> {selected[0]?.display_name} </b> system\n              </span>\n            ) : (\n              <span>\n                <b> {selected.length} </b> systems\n              </span>\n            )}{' '}\n            from <b>{remediationName}</b> Remediation.\n          </StackItem>\n          <StackItem>\n            Removing {pluralize(selected.length, 'system')} from this\n            Remediation will remove it from all associated issues in{' '}\n            <b>{remediationName}</b> Remediation. Be careful as you can end up\n            with Remediation without any systems.\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  </Modal>\n);\n\nRemoveSystemModal.propTypes = {\n  selected: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      display_name: PropTypes.string,\n    })\n  ).isRequired,\n  remediationName: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default RemoveSystemModal;\n","import React, { useEffect, useRef, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { remediationSystems } from '../../store/reducers';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { deleteSystems, selectEntity, loadRemediation } from '../../actions';\nimport './SystemsTable.scss';\nimport RemoveSystemModal from './RemoveSystemModal';\nimport { generateUniqueId } from '../Alerts/PlaybookToastAlerts';\nimport {\n  calculateChecked,\n  calculateSystems,\n  fetchInventoryData,\n  mergedColumns,\n} from './helpers';\n\nconst SystemsTableWrapper = ({\n  remediation,\n  registry,\n  refreshRemediation,\n  setActiveAlert,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const systemsRef = useRef();\n  const getEntitiesRef = useRef(() => undefined);\n  const activeSystem = useRef(undefined);\n  const dispatch = useDispatch();\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n\n  const onConfirm = () => {\n    (async () => {\n      const selectedSystems =\n        selected.size > 0\n          ? Array.from(selected, ([, value]) => value)\n          : [\n              {\n                ...activeSystem.current,\n              },\n            ];\n      const action = deleteSystems(selectedSystems, remediation);\n      dispatch(action);\n      await action.payload;\n      refreshRemediation();\n    })();\n    activeSystem.current = undefined;\n    setActiveAlert({\n      key: generateUniqueId(),\n      title: `Removed ${selected.size} ${\n        selected.size > 1 ? 'systems' : 'system'\n      } from playbook`,\n      description: '',\n      variant: 'success',\n    });\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    systemsRef.current = calculateSystems(remediation);\n  }, [remediation.id]);\n\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      noDetail\n      hideFilters={{\n        all: true,\n        name: false,\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n      columns={(defaultColumns) => mergedColumns(defaultColumns)}\n      bulkSelect={{\n        count: selected ? selected.size : 0,\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: () => {\n              dispatch(selectEntity(-1, false));\n            },\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select page (${rows.length})`,\n                  onClick: () => {\n                    dispatch(selectEntity(0, true));\n                  },\n                }\n              : {}),\n          },\n        ],\n        checked: calculateChecked(rows, selected),\n        onSelect: (value) => {\n          dispatch(selectEntity(0, value));\n        },\n      }}\n      getEntities={async (_i, config) =>\n        fetchInventoryData(config, systemsRef.current, getEntitiesRef.current)\n      }\n      onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities, api }) => {\n        getEntitiesRef.current = api?.getEntities;\n        registry?.register?.({\n          ...mergeWithEntities(remediationSystems(INVENTORY_ACTION_TYPES)),\n        });\n      }}\n      actions={[\n        {\n          title: 'Remove system',\n          onClick: (_event, _index, { id, display_name }) => {\n            activeSystem.current = {\n              id,\n              display_name,\n              issues: remediation.issues.filter((issue) =>\n                issue.systems.find(({ id: systemId }) => systemId === id)\n              ),\n            };\n            setIsOpen(true);\n          },\n        },\n      ]}\n    >\n      {loaded && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsOpen(true)}\n          isDisabled={selected.size === 0}\n        >\n          Remove system\n        </Button>\n      )}\n      <RemoveSystemModal\n        isOpen={isOpen}\n        onConfirm={onConfirm}\n        selected={\n          selected.size > 0\n            ? Array.from(selected, ([, value]) => value)\n            : [activeSystem.current]\n        }\n        onClose={() => {\n          activeSystem.current = undefined;\n          setIsOpen(false);\n        }}\n        remediationName={remediation.name}\n      />\n    </InventoryTable>\n  );\n};\n\nconst SystemsTable = (props) => {\n  const dispatch = useDispatch();\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return registry ? (\n    <Provider store={registry.store}>\n      <SystemsTableWrapper\n        registry={registry}\n        refreshRemediation={() =>\n          dispatch(loadRemediation(props.remediation.id))\n        }\n        setActiveAlert={props.setActiveAlert}\n        {...props}\n      />\n    </Provider>\n  ) : (\n    <Fragment />\n  );\n};\n\nSystemsTable.propTypes = {\n  remediation: PropTypes.shape({\n    id: PropTypes.string,\n    issues: PropTypes.arrayOf(\n      PropTypes.shape({\n        systems: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string,\n            display_name: PropTypes.string,\n            resolved: PropTypes.bool,\n          })\n        ),\n      })\n    ),\n  }),\n};\n\nSystemsTableWrapper.propTypes = {\n  ...SystemsTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  refreshRemediation: PropTypes.func,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default SystemsTable;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  expandable,\n} from '@patternfly/react-table';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport { StatusSummary, normalizeStatus } from './statusHelper';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationActivityTable.scss';\n\nconst RemediationActivityTable = ({ remediation, playbookRuns }) => {\n  const [rows, setRows] = useState([]);\n  const permission = useContext(PermissionContext);\n\n  const generateRows = (playbookRuns) => {\n    return playbookRuns.reduce(\n      (acc, playbooks, i) => [\n        ...acc,\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: (\n                <Link to={`/${remediation.id}/${playbooks.id}`}>\n                  <DateFormat type=\"exact\" date={playbooks.created_at} />\n                </Link>\n              ),\n              cellFormatters: [expandable],\n            },\n            `${playbooks.created_by.first_name} ${playbooks.created_by.last_name}`,\n            {\n              title: (\n                <StatusSummary\n                  executorStatus={normalizeStatus(playbooks.status)}\n                  counts={playbooks.executors.reduce(\n                    (acc, ex) => ({\n                      pending: acc.pending + ex.counts.pending,\n                      running: acc.running + ex.counts.running,\n                      success: acc.success + ex.counts.success,\n                      failure: acc.failure + ex.counts.failure,\n                      canceled: acc.canceled + ex.counts.canceled,\n                      acked: acc.acked + ex.counts.acked,\n                    }),\n                    {\n                      pending: 0,\n                      running: 0,\n                      success: 0,\n                      failure: 0,\n                      canceled: 0,\n                      acked: 0,\n                    }\n                  )}\n                  hasCancel\n                  remediationName={remediation.name}\n                  remediationId={remediation.id}\n                  playbookId={playbooks.id}\n                  permission={permission}\n                />\n              ),\n            },\n          ],\n        },\n        {\n          parent: 2 * i,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <Table\n                  aria-label=\"Compact expandable table\"\n                  cells={['Connection', 'Systems', 'Playbook run status']}\n                  rows={playbooks.executors.map((e) => ({\n                    cells: [\n                      {\n                        title: (\n                          <Link\n                            to={`/${remediation.id}/${playbooks.id}/${e.executor_id}`}\n                          >\n                            {e.executor_name}\n                          </Link>\n                        ),\n                      },\n                      e.system_count,\n                      {\n                        title: (\n                          <StatusSummary\n                            executorStatus={normalizeStatus(e.status)}\n                            counts={e.counts}\n                            permission={permission}\n                          />\n                        ),\n                      },\n                    ],\n                  }))}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              ),\n            },\n          ],\n        },\n      ],\n      []\n    );\n  };\n\n  useEffect(() => {\n    if (playbookRuns && playbookRuns.length) {\n      setRows(() => generateRows(playbookRuns));\n    }\n  }, [playbookRuns]);\n\n  const handleOnCollapse = (event, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const columns = ['Run on', 'Run by', 'Status'];\n\n  return (\n    <Table\n      className=\"rem-c-activity-table\"\n      aria-label=\"Collapsible table\"\n      onCollapse={handleOnCollapse}\n      rows={rows}\n      cells={columns}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nRemediationActivityTable.propTypes = {\n  remediation: PropTypes.object,\n  playbookRuns: PropTypes.array,\n};\n\nexport default RemediationActivityTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  FormGroup,\n  Modal,\n  TextInput,\n  ModalVariant,\n} from '@patternfly/react-core';\n\nexport default function TextInputDialog(props) {\n  const [value, setValue] = useState(props.value || '');\n  const [valid, setValid] = useState(true);\n  const { title, onCancel, onSubmit, ariaLabel, className } = props;\n\n  function onChange(value) {\n    setValue(value);\n\n    if (props.pattern) {\n      setValid(props.pattern.test(value));\n    }\n  }\n\n  return (\n    <Modal\n      title={title}\n      isOpen={true}\n      onClose={(event) => onCancel(event)}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onSubmit(value)}\n          isDisabled={!valid}\n          ouiaId=\"save\"\n        >\n          Save\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"secondary\"\n          onClick={onCancel}\n          ouiaId=\"cancel\"\n        >\n          Cancel\n        </Button>,\n      ]}\n      variant={ModalVariant.small}\n      className={className}\n    >\n      <FormGroup\n        fieldId=\"remediation-name\"\n        helperTextInvalid=\"Playbook name has to contain alphanumeric characters\"\n        isValid={valid}\n      >\n        <TextInput\n          value={value}\n          type=\"text\"\n          onChange={onChange}\n          aria-label={ariaLabel || 'input text'}\n          autoFocus\n          isValid={valid}\n        />\n      </FormGroup>\n    </Modal>\n  );\n}\n\nTextInputDialog.propTypes = {\n  title: PropTypes.string.isRequired,\n  onCancel: PropTypes.func,\n  onSubmit: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n  pattern: PropTypes.instanceOf(RegExp),\n};\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport TextInputDialog from './Dialogs/TextInputDialog';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\nimport { deleteRemediation, patchRemediation } from '../actions';\n\nimport { PermissionContext } from '../App';\n\nconst playbookNamePattern = /^$|^.*[\\w\\d]+.*$/;\nconst EMPTY_NAME = 'Unnamed Playbook';\n\nfunction RemediationDetailsDropdown({\n  remediation,\n  onRename,\n  onDelete,\n  setActiveAlert,\n}) {\n  const [open, setOpen] = useState(false);\n  const [renameDialogOpen, setRenameDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const permission = useContext(PermissionContext);\n\n  return (\n    <React.Fragment>\n      {renameDialogOpen && (\n        <TextInputDialog\n          title=\"Edit playbook name\"\n          ariaLabel=\"Playbook name\"\n          value={remediation.name}\n          onCancel={() => setRenameDialogOpen(false)}\n          onSubmit={(name) => {\n            setRenameDialogOpen(false);\n            onRename(remediation.id, name);\n            setActiveAlert({\n              key: generateUniqueId(),\n              title: `Updated playbook name to ${name}`,\n              description: '',\n              variant: 'success',\n            });\n          }}\n          pattern={playbookNamePattern}\n        />\n      )}\n\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        title=\"Remove playbook?\"\n        text=\"You will not be able to recover this Playbook\"\n        confirmText=\"Remove playbook\"\n        onClose={(confirm) => {\n          setDeleteDialogOpen(false);\n          if (confirm) {\n            onDelete(remediation.id);\n            setActiveAlert({\n              key: generateUniqueId(),\n              title: `Deleted playbook ${remediation.name}`,\n              variant: 'success',\n            });\n          }\n        }}\n      />\n\n      {permission.permissions.write && (\n        <Dropdown\n          onSelect={(f) => f}\n          toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n          isOpen={open}\n          position={DropdownPosition.right}\n          isPlain\n        >\n          <Button onClick={() => setRenameDialogOpen(true)} variant=\"link\">\n            Rename\n          </Button>\n          <Button\n            className=\" rem-c-button__danger-link\"\n            onClick={() => setDeleteDialogOpen(true)}\n            variant=\"link\"\n          >\n            Delete\n          </Button>\n        </Dropdown>\n      )}\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  onRename: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nconst connected = withRouter(\n  connect(null, (dispatch, { history }) => ({\n    onRename: (id, name) => {\n      if (!name) {\n        name = EMPTY_NAME;\n      }\n\n      dispatch(patchRemediation(id, { name }));\n    },\n    onDelete: async (id) => {\n      await dispatch(deleteRemediation(id));\n      history.push('/');\n    },\n  }))(RemediationDetailsDropdown)\n);\n\nexport default connected;\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport './ExecuteButton.scss';\nimport './Status.scss';\n\nconst ExecuteButton = ({\n  isLoading,\n  isDisabled,\n  disabledStateText,\n  data,\n  getConnectionStatus,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  remediationStatus,\n  setEtag,\n  setActiveAlert,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n\n  const isEnabled = () =>\n    true || localStorage.getItem('remediations:fifi:debug') === 'true';\n\n  useEffect(() => {\n    if (remediationStatus === 'changed') {\n      getConnectionStatus(remediationId);\n      setShowRefreshMessage(true);\n    } else if (remediationStatus === 'fulfilled') {\n      setOpen(false);\n    }\n  }, [remediationStatus]);\n\n  const buttonWithTooltip = () => {\n    return isDisabled ? (\n      <Tooltip content={disabledStateText} position=\"auto\">\n        <Button isAriaDisabled>Execute playbook</Button>\n      </Tooltip>\n    ) : (\n      <Button\n        onClick={() => {\n          setOpen(true);\n          getConnectionStatus(remediationId);\n        }}\n      >\n        Execute playbook\n      </Button>\n    );\n  };\n\n  return isEnabled() ? (\n    <React.Fragment>\n      {buttonWithTooltip()}\n      {open && (\n        <ExecuteModal\n          isOpen={open}\n          onClose={() => {\n            setShowRefreshMessage(false);\n            setOpen(false);\n          }}\n          showRefresh={showRefreshMessage}\n          remediationId={remediationId}\n          remediationName={remediationName}\n          data={data}\n          etag={etag}\n          isLoading={isLoading}\n          issueCount={issueCount}\n          runRemediation={runRemediation}\n          setEtag={setEtag}\n          setActiveAlert={setActiveAlert}\n        />\n      )}\n    </React.Fragment>\n  ) : null;\n};\n\nExecuteButton.propTypes = {\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  getConnectionStatus: PropTypes.func,\n  runRemediation: PropTypes.func,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  remediationStatus: PropTypes.string,\n  issueCount: PropTypes.number,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  disabledStateText: PropTypes.string,\n  setActiveAlert: PropTypes.func,\n};\n\nExecuteButton.defaultProps = {\n  data: [],\n  isDisabled: false,\n};\n\nexport default ExecuteButton;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  getEndpoint,\n  checkExecutable,\n} from '../actions';\n\nimport ExecuteButton from '../components/ExecuteButton';\n\nexport const ExecutePlaybookButton = withRouter(\n  connect(\n    ({\n      connectionStatus: { data, status, etag },\n      selectedRemediation,\n      runRemediation,\n      sources,\n      executable,\n    }) => ({\n      data,\n      isLoading: status !== 'fulfilled',\n      issueCount: selectedRemediation.remediation.issues.length,\n      etag,\n      remediationStatus: runRemediation.status,\n      sources,\n      executable,\n    }),\n    (dispatch) => ({\n      getConnectionStatus: (id) => {\n        dispatch(getConnectionStatus(id));\n      },\n      runRemediation: (id, etag, exclude) => {\n        dispatch(runRemediation(id, etag, exclude)).then(() =>\n          dispatch(getPlaybookRuns(id))\n        );\n      },\n      setEtag: (etag) => {\n        dispatch(setEtag(etag));\n      },\n      getEndpoint: (id) => {\n        dispatch(getEndpoint(id));\n      },\n      checkExecutable: (id) => {\n        dispatch(checkExecutable(id));\n      },\n    })\n  )(ExecuteButton)\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst UpsellBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Put Insights into action\"\n      actionClose={<AlertActionCloseButton onClose={onClose} />}\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Enable push-button remediation across your hybrid cloud environment\n          with Red Hat Smart Management.\n        </StackItem>\n        <StackItem>\n          <a href=\"https://www.redhat.com/en/technologies/management/smart-management\">\n            Learn more\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default UpsellBanner;\n\nUpsellBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nUpsellBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React from 'react';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { CloudIcon } from '@patternfly/react-icons';\n\n// TODO: Fill Learn more link\n\nconst ActivityTabUpsell = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={CloudIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Get more with Find it Fix it capabilities\n      </Title>\n      <EmptyStateBody>\n        Upgrade to Red Hat Smart Management to remediate all your systems,\n        across regions and geographies directly from Red Hat Insights.\n      </EmptyStateBody>\n      <Button\n        variant=\"link\"\n        component=\"a\"\n        ouiaId=\"learn_more\"\n        href=\"https://www.redhat.com/en/technologies/management/smart-management\"\n      >\n        Learn more\n      </Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivityTabUpsell;\n","import React, { Fragment } from 'react';\nimport { Toolbar, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { Button, InputGroup, TextInput } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nconst SkeletonTableToolbar = () => {\n  const items = (\n    <Fragment>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <DropdownToggle\n              isDisabled\n              splitButtonItems={[\n                <DropdownToggleCheckbox\n                  id=\"skeleton-dropdown\"\n                  key=\"skeleton-dropdown\"\n                  aria-label=\"Loading Select all\"\n                />,\n              ]}\n              id=\"skeleton-dropdown-toggle\"\n            />\n          }\n        />\n      </ToolbarItem>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            value=\"Search\"\n            isDisabled\n            name=\"skeleton-search\"\n            id=\"skeleton-search\"\n            type=\"search\"\n            aria-label=\"search loading\"\n          />\n          <Button\n            isDisabled\n            variant=\"control\"\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button isDisabled variant=\"primary\">\n          Remove action\n        </Button>\n      </ToolbarItem>\n    </Fragment>\n  );\n\n  return (\n    <Toolbar id=\"skeleton-toolbar\">\n      <ToolbarContent> {items} </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default SkeletonTableToolbar;\n","import React from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst SkeletonTabs = () => {\n  return (\n    <Tabs activeKey={0} className=\"ins-s-tabs\">\n      <Tab eventKey={0} title={<TabTitleText>Actions</TabTitleText>} />\n      <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>} />\n      <Tab eventKey={2} title={<TabTitleText>Activity</TabTitleText>} />\n    </Tabs>\n  );\n};\n\nexport default SkeletonTabs;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport SkeletonTable from './SkeletonTable';\nimport SkeletonTableToolbar from './SkeletonTableToolbar';\nimport SkeletonTabs from './SkeletonTabs';\n\nimport {\n  Dropdown,\n  KebabToggle,\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst RemediationDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"rem-c-page-details__header\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to=\"/\"> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Level className=\"rem-l-level\">\n          <LevelItem>\n            <PageHeaderTitle\n              className=\"rem-s-page-header\"\n              title={\n                <React.Fragment>\n                  <Skeleton size=\"md\" />\n                </React.Fragment>\n              }\n            />\n          </LevelItem>\n          <LevelItem>\n            <Split hasGutter>\n              <SplitItem>\n                <Button isDisabled variant=\"link\">\n                  Download playbook\n                </Button>\n              </SplitItem>\n              <SplitItem>\n                <Dropdown\n                  toggle={<KebabToggle isDisabled={true} />}\n                  isOpen={false}\n                  isPlain\n                />\n              </SplitItem>\n            </Split>\n          </LevelItem>\n        </Level>\n        <RemediationSummarySkeleton />\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <StackItem className=\"ins-c-playbookSummary__tabs\">\n            <SkeletonTabs />\n            <SkeletonTableToolbar />\n            <SkeletonTable />\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default RemediationDetailsSkeleton;\n\nconst RemediationSummarySkeleton = () => {\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{ x: 'Resolved', y: 1 }}\n          labels={({ datum }) => (datum.x ? `${datum.x}: ${datum.y}%` : null)}\n          title={'Loading'}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Latest activity\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacer-lg' }}>\n                <DescriptionList title=\"Autoreboot\">\n                  <Skeleton size=\"md\" />\n                </DescriptionList>\n              </FlexItem>\n            </Flex>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n","import React from 'react';\n\nimport { EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nimport './EmptyActivityTable.scss';\n\nconst EmptyActivityTable = () => (\n  <Table\n    aria-label=\"No activity\"\n    cells={['Run on', 'Run by', 'Status']}\n    ouiaId=\"activity-table\"\n    rows={[\n      {\n        cells: [\n          {\n            title: (\n              <EmptyState className=\"rem-c-activity-table__empty\">\n                <Title headingLevel=\"h5\" size=\"lg\">\n                  No activity\n                </Title>\n                <EmptyStateBody>\n                  Execute this playbook to see a history and summary of the\n                  activity.\n                </EmptyStateBody>\n              </EmptyState>\n            ),\n            props: { colSpan: 3 },\n          },\n        ],\n      },\n    ]}\n  >\n    <TableHeader />\n    <TableBody />\n  </Table>\n);\n\nexport default EmptyActivityTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\nimport {\n  CheckCircleIcon,\n  OffIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport DescriptionList from '../components/Layouts/DescriptionList';\nimport classnames from 'classnames';\nimport { StatusSummary } from '../components/statusHelper';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport './RemediationSummary.scss';\n\nexport const RemediationSummary = ({\n  remediation,\n  playbookRuns,\n  switchAutoReboot,\n  context,\n}) => {\n  const handleRebootChange = (autoReboot) => {\n    switchAutoReboot(remediation.id, autoReboot);\n  };\n\n  const generateNumIssuesReboot = () => {\n    let count = 0;\n    for (const issue of remediation.issues) {\n      if (issue.resolution.needs_reboot) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  const generateNumRebootString = (num) => {\n    return `${num} issue${num === 1 ? '' : 's'} require${\n      num === 1 ? 's' : ''\n    } reboot to remediate`;\n  };\n\n  const pluralize = (number, str) =>\n    number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\n  const rebootEnabled = () => {\n    return (\n      <div>\n        <CheckCircleIcon className=\"rem-c-success\" />\n        <b className=\"ins-c-remediation-summary__reboot--enabled\"> Enabled </b>\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn off\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const rebootDisabled = (required) => {\n    return (\n      <div>\n        <OffIcon />\n        <b\n          className={`ins-c-remediation-summary__reboot--disabled${\n            required ? '--warning' : ''\n          }`}\n        >\n          Off\n        </b>\n        {required && (\n          <React.Fragment>\n            <ExclamationTriangleIcon className=\"ins-c-remediation-summary__reboot--required--icon\" />\n            <b className=\"ins-c-remediation-summary__reboot--required\">\n              {generateNumRebootString(generateNumIssuesReboot())}\n            </b>\n          </React.Fragment>\n        )}\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn on\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const generateAutoRebootStatus = (status, needsReboot) => {\n    return status ? rebootEnabled() : rebootDisabled(needsReboot);\n  };\n\n  const renderAutoReboot = (remediation) => {\n    return (\n      <DescriptionList\n        className=\"rem-c-playbookSummary__settings\"\n        title=\"Autoreboot\"\n      >\n        <Flex>\n          <FlexItem\n            className={classnames(\n              'ins-c-reboot-status',\n              {\n                'ins-c-reboot-status__enabled':\n                  remediation.auto_reboot && remediation.needs_reboot,\n              },\n              { 'ins-c-reboot-status__disabled': !remediation.auto_reboot }\n            )}\n            spacer={{ default: 'spacer-xl' }}\n          >\n            {generateAutoRebootStatus(\n              remediation.auto_reboot,\n              remediation.needs_reboot\n            )}\n          </FlexItem>\n        </Flex>\n      </DescriptionList>\n    );\n  };\n\n  const renderLatestActivity = (playbookRuns) => {\n    if (playbookRuns.length) {\n      const mostRecent = playbookRuns[0];\n      return (\n        <FlexItem spacer={{ default: 'spacer-xl' }}>\n          <DescriptionList\n            needsPointer\n            className=\"rem-c-description-list-latest-activity\"\n            title=\"Latest activity\"\n          >\n            <StatusSummary\n              executorStatus={mostRecent.status}\n              counts={mostRecent.executors.reduce(\n                (acc, ex) => ({\n                  pending: acc.pending + ex.counts.pending,\n                  running: acc.running + ex.counts.running,\n                  success: acc.success + ex.counts.success,\n                  failure: acc.failure + ex.counts.failure,\n                  canceled: acc.canceled + ex.counts.canceled,\n                  acked: acc.acked + ex.counts.acked,\n                }),\n                {\n                  pending: 0,\n                  running: 0,\n                  success: 0,\n                  failure: 0,\n                  canceled: 0,\n                  acked: 0,\n                }\n              )}\n              permission={{}}\n            />\n            <span className=\"rem-c-description-list-latest-activity__date\">\n              <DateFormat type=\"relative\" date={mostRecent.updated_at} />\n            </span>\n            <Link to={`/${mostRecent.remediation_id}/${mostRecent.id}`}>\n              View\n            </Link>\n          </DescriptionList>\n        </FlexItem>\n      );\n    }\n  };\n\n  const getResolvedCount = (issues) => {\n    let count = 0;\n    issues.map((i) => i.systems.every((s) => s.resolved) && count++);\n    return count;\n  };\n\n  const { stats } = remediation;\n\n  const totalSystems = stats.systemsWithReboot + stats.systemsWithoutReboot;\n\n  const resolvedCount = getResolvedCount(remediation.issues);\n\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{\n            x: 'Resolved',\n            y: (resolvedCount / remediation.issues.length) * 100,\n          }}\n          labels={({ data }) => (data.x ? `${data.x}: ${data.y}%` : null)}\n          title={`${resolvedCount}/${remediation.issues.length}`}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      {pluralize(totalSystems, 'system')}\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  {playbookRuns && renderLatestActivity(playbookRuns)}\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>{renderAutoReboot(remediation)}</StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRemediationSummary.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  playbookRuns: PropTypes.array,\n  switchAutoReboot: PropTypes.func.isRequired,\n  context: PropTypes.object.isRequired,\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\nimport RemediationDetailsTable from '../components/RemediationDetailsTable';\nimport SystemsTable from '../components/SystemsTable/SystemsTable';\nimport RemediationActivityTable from '../components/RemediationActivityTable';\nimport RemediationDetailsDropdown from '../components/RemediationDetailsDropdown';\nimport { normalizeStatus } from '../components/statusHelper';\nimport { isBeta } from '../config';\nimport { ExecutePlaybookButton } from '../containers/ExecuteButtons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport UpsellBanner from '../components/Alerts/UpsellBanner';\nimport ActivityTabUpsell from '../components/EmptyStates/ActivityTabUpsell';\nimport DeniedState from '../components/DeniedState';\nimport SkeletonTable from '../skeletons/SkeletonTable';\nimport PlaybookToastAlerts, {\n  generateUniqueId,\n} from '../components/Alerts/PlaybookToastAlerts';\nimport '../components/Status.scss';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Split,\n  SplitItem,\n  Tabs,\n  Tab,\n} from '@patternfly/react-core';\n\nimport RemediationDetailsSkeleton from '../skeletons/RemediationDetailsSkeleton';\nimport EmptyActivityTable from '../components/EmptyStates/EmptyActivityTable';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationDetails.scss';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport { RemediationSummary } from '../components/RemediationSummary';\n\nconst tabMapper = ['issues', 'systems', 'activity'];\n\nconst RemediationDetails = ({\n  match,\n  location,\n  selectedRemediation,\n  selectedRemediationStatus,\n  history,\n  loadRemediation,\n  loadRemediationStatus,\n  switchAutoReboot,\n  playbookRuns,\n  getPlaybookRuns,\n  checkExecutable,\n  executable,\n}) => {\n  const id = match.params.id;\n  const [upsellBannerVisible, setUpsellBannerVisible] = useState(\n    localStorage.getItem('remediations:bannerStatus') !== 'dismissed'\n  );\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const [activeTabKey, setActiveTabKey] = useState(0);\n  const [activeToastAlert, setActiveToastAlert] = useState({\n    key: '',\n    title: '',\n    description: '',\n    variant: '',\n  });\n\n  const context = useContext(PermissionContext);\n\n  const { isFedramp } = useChrome();\n  const handleUpsellToggle = () => {\n    setUpsellBannerVisible(false);\n    localStorage.setItem('remediations:bannerStatus', 'dismissed');\n  };\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n    history.push(`?${tabMapper[tabIndex]}`);\n  };\n\n  const getDisabledStateText = () => {\n    if (!context.permissions.execute) {\n      return 'You do not have the required execute permissions to perform this action.';\n    } else if (!executable) {\n      return 'Your account must be entitled to Smart Management to execute playbooks.';\n    }\n    return 'Unable to execute playbook.';\n  };\n\n  useEffect(() => {\n    loadRemediation(id).catch((e) => {\n      if (e && e.response && e.response.status === 404) {\n        history.push('/');\n        return;\n      }\n\n      throw e;\n    });\n\n    const tabIndex = tabMapper.findIndex(\n      (item) => item === location.search.split('?')[1]\n    );\n    setActiveTabKey(tabIndex !== -1 ? tabIndex : 0);\n    history.push(`?${tabMapper[tabIndex !== -1 ? tabIndex : 0]}`);\n\n    if (isBeta) {\n      loadRemediationStatus(id);\n    }\n    checkExecutable(id);\n  }, []);\n\n  useEffect(() => {\n    getPlaybookRuns(id);\n  }, [getPlaybookRuns]);\n\n  useEffect(() => {\n    playbookRuns;\n    if (\n      playbookRuns &&\n      playbookRuns.length &&\n      normalizeStatus(playbookRuns[0].status) === 'running'\n    ) {\n      const interval = setInterval(() => getPlaybookRuns(id), 10000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playbookRuns]);\n\n  const renderActivityState = (isEntitled, playbookRuns, remediation) => {\n    if (!isEntitled) {\n      return <ActivityTabUpsell />;\n    }\n\n    if (Array.isArray(playbookRuns) && playbookRuns.length) {\n      return (\n        <RemediationActivityTable\n          remediation={remediation}\n          playbookRuns={playbookRuns}\n        />\n      );\n    }\n\n    if (Array.isArray(playbookRuns) && !playbookRuns.length) {\n      return <EmptyActivityTable />;\n    }\n\n    return <SkeletonTable />;\n  };\n\n  const { status, remediation } = selectedRemediation;\n\n  if (remediation) {\n    document.title = `${remediation.name} | Remediations | Red Hat Insights`;\n  }\n\n  if (status !== 'fulfilled' && status !== 'rejected') {\n    return <RemediationDetailsSkeleton />;\n  }\n\n  if (status === 'rejected') {\n    return <InvalidObject />;\n  }\n\n  if (status === 'fulfilled') {\n    return context.permissions.read === false ? (\n      <DeniedState />\n    ) : (\n      <div className=\"page__remediation-details\">\n        <PageHeader>\n          {activeToastAlert.title && (\n            <PlaybookToastAlerts\n              key={activeToastAlert.key}\n              title={activeToastAlert.title}\n              description={activeToastAlert.description}\n              variant={activeToastAlert.variant}\n            />\n          )}\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to=\"/\"> Remediations </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive> {remediation.name} </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className=\"rem-l-level\">\n            <LevelItem>\n              <PageHeaderTitle title={remediation.name} />\n            </LevelItem>\n            <LevelItem>\n              <Split hasGutter>\n                <SplitItem>\n                  <ExecutePlaybookButton\n                    isDisabled={\n                      !context.permissions.execute || !executable || isFedramp\n                    }\n                    disabledStateText={getDisabledStateText()}\n                    remediationId={remediation.id}\n                    remediationName={remediation.name}\n                    setActiveAlert={setActiveToastAlert}\n                  ></ExecutePlaybookButton>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    isDisabled={!remediation.issues.length}\n                    variant=\"secondary\"\n                    onClick={() => {\n                      downloadPlaybook(remediation.id);\n                      setActiveToastAlert({\n                        key: generateUniqueId(),\n                        title: 'Preparing playbook for download.',\n                        description:\n                          'Once complete, your download will start automatically.',\n                        variant: 'info',\n                      });\n                    }}\n                  >\n                    Download playbook\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <RemediationDetailsDropdown\n                    remediation={remediation}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </SplitItem>\n              </Split>\n            </LevelItem>\n          </Level>\n          <RemediationSummary\n            remediation={remediation}\n            playbookRuns={playbookRuns}\n            switchAutoReboot={switchAutoReboot}\n            context={context}\n          />\n        </PageHeader>\n        <Main>\n          <Stack hasGutter>\n            {!executable && upsellBannerVisible && (\n              <StackItem>\n                <UpsellBanner onClose={() => handleUpsellToggle()} />\n              </StackItem>\n            )}\n            {executable && noReceptorBannerVisible && (\n              <StackItem>\n                <NoReceptorBanner onClose={() => handleNoReceptorToggle()} />\n              </StackItem>\n            )}\n            <StackItem className=\"ins-c-playbookSummary__tabs\">\n              <Tabs activeKey={activeTabKey} onSelect={handleTabClick}>\n                <Tab eventKey={0} title=\"Actions\">\n                  <RemediationDetailsTable\n                    remediation={remediation}\n                    status={selectedRemediationStatus}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </Tab>\n                <Tab eventKey={1} title=\"Systems\">\n                  <SystemsTable\n                    remediation={remediation}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </Tab>\n                <Tab eventKey={2} title=\"Activity\">\n                  {renderActivityState(executable, playbookRuns, remediation)}\n                </Tab>\n              </Tabs>\n            </StackItem>\n          </Stack>\n        </Main>\n      </div>\n    );\n  }\n};\n\nRemediationDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n  location: PropTypes.object,\n  selectedRemediation: PropTypes.object,\n  selectedRemediationStatus: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  loadRemediationStatus: PropTypes.func.isRequired,\n  switchAutoReboot: PropTypes.func.isRequired,\n  deleteRemediation: PropTypes.func.isRequired,\n  executePlaybookBanner: PropTypes.shape({\n    isVisible: PropTypes.bool,\n  }),\n  addNotification: PropTypes.func.isRequired,\n  playbookRuns: PropTypes.array,\n  getPlaybookRuns: PropTypes.func,\n  checkExecutable: PropTypes.func,\n};\n\nexport default withRouter(\n  connect(\n    ({\n      selectedRemediation,\n      selectedRemediationStatus,\n      executePlaybookBanner,\n      playbookRuns,\n      executable,\n    }) => ({\n      selectedRemediation,\n      selectedRemediationStatus,\n      executePlaybookBanner,\n      playbookRuns: playbookRuns.data,\n      remediation: selectedRemediation.remediation,\n      executable,\n    }),\n    (dispatch) => ({\n      loadRemediation: (id) => dispatch(actions.loadRemediation(id)),\n      loadRemediationStatus: (id) =>\n        dispatch(actions.loadRemediationStatus(id)),\n      // eslint-disable-next-line camelcase\n      switchAutoReboot: (id, auto_reboot) =>\n        dispatch(actions.patchRemediation(id, { auto_reboot })),\n      deleteRemediation: (id) => dispatch(actions.deleteRemediation(id)),\n      addNotification: (content) => dispatch(addNotification(content)),\n      getPlaybookRuns: (id) => dispatch(actions.getPlaybookRuns(id)),\n      checkExecutable: (id) => dispatch(actions.checkExecutable(id)),\n    })\n  )(RemediationDetails)\n);\n"],"names":["ResolutionStep","props","resolution","setState","selected","state","issue","resolutions","this","getResolutions","id","value","resolutionsDisplay","StackItem","Form","map","className","key","Radio","label","Stack","description","needs_reboot","Reboot","red","name","defaultChecked","onChange","onRadioChange","Skeleton","hasGutter","Split","SplitItem","Label","isFilled","Component","propTypes","PropTypes","ResolutionEditButton","remediation","onResolutionSelected","useState","isOpen","setIsOpen","resolutionStep","useRef","onClick","Modal","variant","ModalVariant","onClose","title","actions","Button","result","current","getSelectedResolution","ref","ConnectResolutionEditButton","connect","f","dispatch","patchRemediationIssue","refreshRemediation","ruleId","DeleteButton","dialogOpen","onDelete","onButtonClicked","isDisabled","ConfirmationDialog","dialogTitle","confirmText","dialogConfirmationText","text","dialogMessage","onDialogClose","defaultProps","withRouter","remediations","length","Promise","all","r","deleteRemediation","loadRemediations","DeleteActionsButton","issues","afterDelete","issueId","deleteRemediationIssue","isBeta","loadRemediationStatus","RemediationDetailsSystemDropdown","system","setActiveAlert","open","setOpen","deleteDialogOpen","setDeleteDialogOpen","getSystemName","generateUniqueId","Dropdown","onSelect","toggle","KebabToggle","onToggle","position","DropdownPosition","isPlain","deleteRemediationIssueSystem","IconInline","icon","SystemsStatusModal","setSystem","systemStatuses","setSystemStatuses","page","setPage","pageSize","setPageSize","filterText","setFilterText","inventory","urlBuilder","inventoryUrlBuilder","useEffect","statuses","systems","resolved","CheckIcon","TimesIcon","detailDropdown","generateStatus","isFooterLeftAligned","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","reducers","items","orderBy","filter","s","includes","onRefresh","options","per_page","onRefreshData","total","perPage","hasCheckbox","event","rowId","rowData","TableToolbar","ToolbarGroup","ToolbarItem","ConditionalFilter","filterValues","placeholder","type","conditionalFilterType","e","SystemForActionButton","useDispatch","pagination","localStorage","getItem","perPageOptions","i","EmptyActions","filtered","Bullseye","EmptyState","Title","size","headingLevel","EmptyStateBody","href","appUrl","toString","resolutionDescriptionCell","url","buildIssueUrl","resolutions_available","systemsForAction","getResolvedSystems","count","SORTING_ITERATEES","getIssueApplication","RemediationDetailsTable","usePagination","sorter","useSorter","useFilter","selector","useSelector","permission","useContext","PermissionContext","setValue","reset","includesIgnoreCase","trim","paged","sortBy","sortDir","slice","offset","rows","flatMap","needsReboot","cells","selectedIds","getSelectedIds","activeFiltersConfig","filters","category","chips","PrimaryToolbar","filterConfig","_e","bulkSelect","checked","isSelected","actionsConfig","itemCount","Table","TableVariant","canSelectAll","transforms","sortable","permissions","write","TableHeader","TableBody","tbodyProps","isFooter","Pagination","dropDirection","debug","status","RemoveSystemModal","onConfirm","remediationName","appendTo","document","getElementsByClassName","ouiaId","ExclamationTriangleIcon","display_name","pluralize","isRequired","SystemsTableWrapper","registry","systemsRef","getEntitiesRef","activeSystem","undefined","entities","Map","loaded","calculateSystems","showTags","noDetail","hideFilters","tableProps","columns","defaultColumns","mergedColumns","selectEntity","calculateChecked","getEntities","_i","config","fetchInventoryData","api","remediationSystems","_event","_index","find","selectedSystems","Array","from","action","deleteSystems","payload","SystemsTable","setRegistry","ReducerRegistry","promiseMiddleware","Provider","store","loadRemediation","Fragment","RemediationActivityTable","playbookRuns","setRows","reduce","acc","playbooks","Link","to","DateFormat","date","created_at","cellFormatters","expandable","created_by","first_name","last_name","executorStatus","normalizeStatus","counts","executors","ex","pending","running","success","failure","canceled","acked","hasCancel","remediationId","playbookId","parent","fullWidth","executor_id","executor_name","system_count","generateRows","onCollapse","collapseRows","TextInputDialog","valid","setValid","onCancel","onSubmit","ariaLabel","FormGroup","fieldId","helperTextInvalid","isValid","TextInput","pattern","test","autoFocus","RegExp","playbookNamePattern","RemediationDetailsDropdown","onRename","renameDialogOpen","setRenameDialogOpen","confirm","history","patchRemediation","push","ExecuteButton","isLoading","disabledStateText","data","getConnectionStatus","issueCount","runRemediation","etag","remediationStatus","setEtag","showRefreshMessage","setShowRefreshMessage","Tooltip","content","isAriaDisabled","ExecuteModal","showRefresh","ExecutePlaybookButton","connectionStatus","selectedRemediation","sources","executable","exclude","then","getPlaybookRuns","getEndpoint","checkExecutable","UpsellBanner","Alert","isInline","actionClose","AlertActionCloseButton","EmptyStateIcon","CloudIcon","component","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","InputGroup","Toolbar","ToolbarContent","Tabs","activeKey","Tab","eventKey","TabTitleText","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Level","LevelItem","PageHeaderTitle","RemediationSummarySkeleton","Main","SkeletonTable","ChartDonutUtilization","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","subTitle","subTitleComponent","ChartLabel","thresholds","color","height","width","padding","bottom","left","right","top","Flex","FlexItem","spacer","default","DescriptionList","colSpan","RemediationSummary","number","str","switchAutoReboot","context","handleRebootChange","autoReboot","rebootDisabled","required","OffIcon","num","generateNumIssuesReboot","auto_reboot","generateAutoRebootStatus","CheckCircleIcon","stats","totalSystems","systemsWithReboot","systemsWithoutReboot","resolvedCount","every","mostRecent","needsPointer","updated_at","remediation_id","renderLatestActivity","classnames","renderAutoReboot","tabMapper","RemediationDetails","match","location","selectedRemediationStatus","params","upsellBannerVisible","setUpsellBannerVisible","noReceptorBannerVisible","setNoReceptorBannerVisible","activeTabKey","setActiveTabKey","activeToastAlert","setActiveToastAlert","isFedramp","useChrome","response","tabIndex","findIndex","item","search","split","interval","setInterval","clearInterval","InvalidObject","read","DeniedState","PlaybookToastAlerts","execute","downloadPlaybook","setItem","NoReceptorBanner","isEntitled","isArray","renderActivityState","executePlaybookBanner","isVisible","addNotification"],"sourceRoot":""}