{"version":3,"file":"js/ExecutorDetails.1672841401203.d3104bbf12ff5bc781c8.js","mappings":"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","sources":["webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails/Columns.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.js","webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.scss","webpack:///./src/components/SystemDetails.scss"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon className=\"rem-c-failure\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Run failed\n      </Title>\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <Button variant=\"link\">Learn more</Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React from 'react';\nimport { renderStatus, normalizeStatus } from '../statusHelper';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\n\nconst urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\nexport default [\n  {\n    key: 'display_name',\n    title: 'Name',\n    // eslint-disable-next-line\n    renderFunc: (name, id, { fqdn }) => <div><a href={urlBuilder(id)}>{fqdn || name || id}</a></div>\n  },\n  'tags',\n  {\n    key: 'status',\n    title: 'Status',\n    // eslint-disable-next-line\n    renderFunc: (status) => (\n      <div className=\"rem-c-status-bar\">\n        {renderStatus(normalizeStatus(status))}\n      </div>\n    ),\n  },\n];\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  ToolbarItem,\n  Toolbar,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../../store/reducers';\nimport DescriptionList from '../Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../../actions';\nimport { downloadPlaybook } from '../../api';\nimport { normalizeStatus, StatusSummary } from '../statusHelper';\nimport PlaybookSystemDetails from '../SystemDetails';\nimport ExecutorDetailsSkeleton from '../../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from '../Alerts/RunFailed';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../../App';\nimport { register } from '../../store';\nimport { mergedColumns } from '../SystemsTable/helpers';\nimport columns from './Columns';\n\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  match: {\n    params: { executor_id, run_id, id },\n  },\n  remediation,\n  playbookRun,\n  playbookRunSystems,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const [executor, setExecutor] = useState({});\n  const [systems, setSystems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const [debouncedGetPlaybookRunSystems, setDebounce] = useState();\n  const inventory = useRef(null);\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        options.per_page,\n        options.per_page * (options.page - 1)\n      );\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n    setDebounce(() => AwesomeDebouncePromise(getPlaybookRunSystems, 500));\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n\n    if (playbookRunSystems.status !== 'pending') {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        pageSize,\n        pageSize * (page - 1),\n        filter\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  useEffect(() => {\n    setSystems(() =>\n      playbookRunSystems.data.map(({ system_id, system_name, status }) => ({\n        id: system_id,\n        display_name: system_name,\n        status,\n        isOpen: openId === system_id,\n        children: <PlaybookSystemDetails systemId={system_id} />,\n      }))\n    );\n  }, [playbookRunSystems]);\n\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              columns={mergedColumns(columns)}\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                    })()\n                  ),\n                })\n              }\n              items={playbookRunSystems.status !== 'pending' ? systems : []}\n              isLoaded={playbookRunSystems.status !== 'pending'}\n              onRefresh={onRefresh}\n              page={page}\n              total={playbookRunSystems.meta.total}\n              perPage={pageSize}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n            >\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <ConditionalFilter\n                      items={[\n                        {\n                          value: 'display_name',\n                          label: 'Name',\n                          filterValues: {\n                            placeholder: 'Filter by name',\n                            type: conditionalFilterType.text,\n                            value: filter,\n                            onChange: (e, selected) => {\n                              setFilter(selected);\n                              setPage(1);\n                              debouncedGetPlaybookRunSystems(\n                                id,\n                                run_id,\n                                executor_id,\n                                pageSize,\n                                0,\n                                selected\n                              );\n                            },\n                          },\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => downloadPlaybook(remediation.id)}\n                    >\n                      Download playbook\n                    </Button>\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </InventoryTable>\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  match: PropTypes.object,\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystems: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystems: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystems,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    playbookRunSystems,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystems: (\n      remediationId,\n      runId,\n      executorId,\n      limit,\n      offset,\n      ansibleHost\n    ) =>\n      dispatch(\n        getPlaybookRunSystems(\n          remediationId,\n          runId,\n          executorId,\n          limit,\n          offset,\n          ansibleHost\n        )\n      ),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from './SkeletonTable';\n\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardHeader className=\"rem-m-card__header-bold\">\n              <Button>Download playbook</Button>\n            </CardHeader>\n\n            <CardBody>\n              <SkeletonTable />\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};"],"names":["React","PropTypes","Button","EmptyState","EmptyStateBody","EmptyStateIcon","Title","Bullseye","ExclamationCircleIcon","RunFailed","name","propTypes","string","renderStatus","normalizeStatus","inventoryUrlBuilder","urlBuilder","id","key","title","renderFunc","fqdn","status","useEffect","useState","useRef","useContext","connect","Link","AwesomeDebouncePromise","InventoryTable","Main","PageHeader","PageHeaderTitle","DateFormat","Skeleton","ConditionalFilter","conditionalFilterType","Card","CardHeader","CardBody","Stack","StackItem","Breadcrumb","BreadcrumbItem","Split","SplitItem","ToolbarItem","Toolbar","ToolbarContent","InProgressIcon","reducers","DescriptionList","getPlaybookRuns","getPlaybookRun","getPlaybookRunSystems","getPlaybookRunSystemDetails","expandInventoryTable","loadRemediation","downloadPlaybook","StatusSummary","PlaybookSystemDetails","ExecutorDetailsSkeleton","PermissionContext","register","mergedColumns","columns","refreshInterval","ExecutorDetails","match","params","executor_id","run_id","remediation","playbookRun","playbookRunSystems","playbookRunSystemDetails","onCollapseInventory","executor","setExecutor","systems","setSystems","filter","setFilter","page","setPage","pageSize","setPageSize","openId","setOpenId","firstExpand","setFirstExpand","debouncedGetPlaybookRunSystems","setDebounce","inventory","onRefresh","options","current","per_page","onRefreshData","clearInterval","data","executors","find","map","system_id","system_name","display_name","isOpen","children","renderInventorycard","INVENTORY_ACTION_TYPES","mergeWithEntities","playbookActivityIntentory","meta","total","_e","_i","setInterval","undefined","value","label","filterValues","placeholder","type","text","onChange","e","selected","renderMain","running","success","failure","canceled","epicFailure","executor_name","permission","created_at","counts","created_by","first_name","last_name","object","func","defaultProps","connected","playbookRuns","selectedRemediation","dispatch","runId","remediationId","executorId","limit","offset","ansibleHost","systemId","LogViewer","LogViewerSearch","RemediationsLogViewer","SyntaxHighlighter","yaml","Spinner","registerLanguage","console","shape","SkeletonTable"],"sourceRoot":""}