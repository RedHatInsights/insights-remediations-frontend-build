{"version":3,"file":"js/RemediationDetails.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/Utilities/useRemediationsList.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/components/ResolutionModal/ResolutionStep.js","webpack:///./src/components/ResolutionEditButton.js","webpack:///./src/containers/ConnectedComponents.js","webpack:///./src/components/DeleteButton.js","webpack:///./src/containers/DeleteButtons.js","webpack:///./src/components/RemediationDetailsSystemDropdown.js","webpack:///./src/components/Layouts/IconInline.js","webpack:///./src/components/Modals/SystemsStatusModal.js","webpack:///./src/components/SystemForActionButton.js","webpack:///./src/Utilities/debug.js","webpack:///./src/components/EmptyStates/EmptyActions.js","webpack:///./src/components/RemediationDetailsTable.js","webpack:///./src/components/SystemsTable/RemoveSystemModal.js","webpack:///./src/components/SystemsTable/RebootColumn.js","webpack:///./src/components/SystemsTable/IssuesColumn.js","webpack:///./src/components/SystemsTable/ConnectionStatusCol.js","webpack:///./src/components/SystemsTable/Columns.js","webpack:///./src/components/SystemsTable/SystemsTable.js","webpack:///./src/components/RemediationActivityTable.js","webpack:///./src/Utilities/useVerifyName.js","webpack:///./src/components/Dialogs/TextInputDialog.js","webpack:///./src/components/RemediationDetailsDropdown.js","webpack:///./src/components/ExecuteButton.js","webpack:///./src/containers/ExecuteButtons.js","webpack:///./src/components/Alerts/UpsellBanner.js","webpack:///./src/components/EmptyStates/ActivityTabUpsell.js","webpack:///./src/skeletons/SkeletonTableToolbar.js","webpack:///./src/skeletons/SkeletonTabs.js","webpack:///./src/skeletons/RemediationDetailsSkeleton.js","webpack:///./src/components/EmptyStates/EmptyActivityTable.js","webpack:///./src/components/RemediationSummary.js","webpack:///./src/Utilities/useConnectionStatus.js","webpack:///./src/routes/RemediationDetails.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'preview') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import { useAxiosWithPlatformInterceptors } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst { API_BASE } = require('../config');\nimport { useState, useEffect, useRef } from 'react';\n\nexport const useRemediationsList = (remediation) => {\n  const axios = useAxiosWithPlatformInterceptors();\n  const [remediationsList, setRemediationsList] = useState();\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    mounted.current = true;\n    const fetchData = async () => {\n      try {\n        const nameList = await axios.get(\n          `${API_BASE}/remediations/?fields[data]=name`\n        );\n        mounted.current && setRemediationsList(nameList.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted.current = false;\n    };\n  }, [remediation]);\n\n  return remediationsList;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities,\n  connectedData\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n\n  const updatedResults = data.results.map((result) => {\n    const systemId = result.id;\n    const matchedItem = connectedData.find((item) =>\n      item.system_ids.includes(systemId)\n    );\n    if (matchedItem) {\n      return {\n        ...result,\n        connection_status: matchedItem.connection_status,\n        executor_type: matchedItem.executor_type,\n      };\n    } else {\n      return result;\n    }\n  });\n\n  return {\n    ...data,\n    page,\n    results: updatedResults.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns = (defaultColumns = [], customColumns = []) => {\n  return customColumns.map((column) => {\n    const inventoryColumn = defaultColumns.find(\n      (invColumn) => invColumn.key === column.key\n    );\n\n    return inventoryColumn || column;\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Form,\n  Label,\n  Radio,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nimport { Reboot } from '@redhat-cloud-services/frontend-components/Reboot';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport './ChooseResolutionModal.scss';\n\nclass ResolutionStep extends Component {\n  constructor(props) {\n    super(props);\n    this.issue = props.issue;\n    this.state = {\n      selected: props.issue.resolution,\n      resolutions: false,\n    };\n  }\n\n  onRadioChange = (resolution) => {\n    this.setState({ selected: resolution });\n  };\n\n  async componentDidMount() {\n    const resolutions = await this.props.getResolutions(this.issue.id);\n    this.setState({ resolutions: resolutions.value });\n  }\n\n  getSelectedResolution = () => {\n    return this.state.selected;\n  };\n\n  render() {\n    const { resolutions, selected } = this.state;\n    let resolutionsDisplay;\n\n    if (resolutions) {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Form>\n              {resolutions.resolutions.map((resolution) => (\n                <div className=\"ins-c-resolution-option\" key={resolution.id}>\n                  <Radio\n                    label={\n                      <Stack className=\"ins-c-resolution-choice__details\">\n                        <StackItem>{resolution.description}</StackItem>\n                        {/*\n                                                    <StackItem>\n                                                        <Battery label=\"Resolution risk\" severity={ resolution.resolution_risk } />\n                                                    </StackItem>\n                                                    */}\n                        {resolution.needs_reboot && (\n                          <StackItem>\n                            <Reboot red />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    }\n                    aria-label={resolution.description}\n                    id={resolution.id}\n                    name=\"radio\"\n                    defaultChecked={resolution.id === selected.id}\n                    onChange={() => this.onRadioChange(resolution)}\n                  />\n                </div>\n              ))}\n            </Form>\n          </StackItem>\n        </React.Fragment>\n      );\n    } else {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Stack hasGutter>\n        <StackItem>\n          <div>Select resolution for this action.</div>\n        </StackItem>\n        <StackItem>\n          <Split hasGutter>\n            <SplitItem>\n              <Label>Action</Label>\n            </SplitItem>\n            <SplitItem isFilled>\n              <h1 className=\"ins-m-text__bold\">{this.issue.description}</h1>\n            </SplitItem>\n          </Split>\n        </StackItem>\n\n        {resolutionsDisplay}\n      </Stack>\n    );\n  }\n}\n\nResolutionStep.propTypes = {\n  issue: PropTypes.object.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionStep;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport ResolutionStep from './ResolutionModal/ResolutionStep';\n\nconst ResolutionEditButton = ({\n  remediation,\n  issue,\n  onResolutionSelected,\n  getResolutions,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const resolutionStep = useRef();\n\n  const onModalClose = (result) => {\n    setIsOpen(false);\n    const resolution = resolutionStep.current?.getSelectedResolution();\n\n    if (result && issue.resolution.id !== resolution.id) {\n      onResolutionSelected(remediation.id, issue.id, resolution.id);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setIsOpen(true)}>Edit</a>\n      {isOpen && (\n        <Modal\n          variant={ModalVariant.medium}\n          className=\"rem-c-resolution-modal\"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Edit resolution\"\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={onModalClose}>\n              Save\n            </Button>,\n            <Button\n              key=\"cancel\"\n              variant=\"secondary\"\n              onClick={() => setIsOpen(false)}\n            >\n              Cancel\n            </Button>,\n          ]}\n        >\n          <ResolutionStep\n            key=\"ResolutionStep\"\n            issue={issue}\n            ref={resolutionStep}\n            getResolutions={getResolutions}\n          />\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nResolutionEditButton.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  onResolutionSelected: PropTypes.func.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionEditButton;\n","import {\n  refreshRemediation,\n  patchRemediationIssue,\n  getResolutions,\n} from '../actions';\nimport { connect } from 'react-redux';\n\nimport ResolutionEditButton from '../components/ResolutionEditButton';\n\nexport const ConnectResolutionEditButton = connect(\n  (f) => f,\n  (dispatch) => ({\n    onResolutionSelected: async (remediation, issue, resolution) => {\n      await dispatch(patchRemediationIssue(remediation, issue, resolution));\n      dispatch(refreshRemediation(remediation));\n    },\n    getResolutions: (ruleId) => dispatch(getResolutions(ruleId)),\n  })\n)(ResolutionEditButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\n\nimport './DeleteButton.scss';\n\nclass DeleteButton extends Component {\n  state = {\n    dialogOpen: false,\n  };\n\n  onButtonClicked = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  onDialogClose = (result) => {\n    this.setState({ dialogOpen: false });\n    result && this.props.onDelete();\n  };\n\n  render() {\n    const { dialogOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button\n          onClick={this.onButtonClicked}\n          isDisabled={this.props.isDisabled}\n          variant={this.props.variant}\n        >\n          {this.props.label}\n        </Button>\n        {dialogOpen && (\n          <ConfirmationDialog\n            title={this.props.dialogTitle}\n            confirmText={this.props.dialogConfirmationText}\n            text={this.props.dialogMessage}\n            onClose={this.onDialogClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nDeleteButton.propTypes = {\n  label: PropTypes.string,\n  dialogTitle: PropTypes.string,\n  dialogMessage: PropTypes.string,\n  dialogConfirmationText: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  onDelete: PropTypes.func.isRequired,\n  variant: PropTypes.string,\n};\n\nDeleteButton.defaultProps = {\n  label: 'Delete',\n  variant: 'link',\n};\n\nexport default DeleteButton;\n","import { deleteRemediation, loadRemediationStatus } from '../actions';\nimport { connect } from 'react-redux';\nimport { loadRemediations, deleteRemediationIssue } from '../actions';\n\nimport DeleteButton from '../components/DeleteButton';\n\nexport const DeleteRemediationsButton = connect(\n  (state, { remediations }) => ({\n    dialogMessage: `You will not be able to recover ${\n      remediations.length > 1 ? 'these remediations' : 'this remediation'\n    }`,\n  }),\n  (dispatch, { remediations }) => ({\n    onDelete: async () => {\n      await Promise.all(\n        remediations.map((r) => dispatch(deleteRemediation(r)))\n      );\n      dispatch(loadRemediations());\n    },\n  })\n)(DeleteButton);\n\nexport const DeleteActionsButton = connect(\n  (state, { issues }) => ({\n    label: `Remove action${issues.length > 1 ? 's' : ''}`,\n    dialogTitle: `Remove action${issues.length > 1 ? 's' : ''}`,\n    dialogConfirmationText: `Remove action${issues.length > 1 ? 's' : ''}`,\n  }),\n  (dispatch, { remediation, issues, afterDelete, isBeta }) => ({\n    onDelete: async () => {\n      await Promise.all(\n        issues.map((issueId) =>\n          dispatch(deleteRemediationIssue(remediation.id, issueId))\n        )\n      );\n      if (isBeta) {\n        dispatch(loadRemediationStatus(remediation.id));\n      }\n\n      afterDelete();\n    },\n  })\n)(DeleteButton);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Button } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core/deprecated';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { getSystemName } from '../Utilities/model';\nimport { dispatchNotification } from '../Utilities/dispatcher';\n\nfunction RemediationDetailsSystemDropdown({\n  remediation,\n  issue,\n  system,\n  onDelete,\n}) {\n  const [open, setOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`This playbook will not address ${\n          issue.description\n        } on ${getSystemName(system)}`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n          dispatchNotification({\n            title: `Removed systems from ${remediation.name}`,\n            description: '',\n            variant: 'success',\n            dismissable: true,\n            autoDismiss: true,\n          });\n        }}\n      />\n\n      <Dropdown\n        onSelect={(f) => f}\n        toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n        isOpen={open}\n        position={DropdownPosition.right}\n        isPlain\n      >\n        <Button onClick={() => setDeleteDialogOpen(true)} variant=\"link\">\n          Remove system\n        </Button>\n      </Dropdown>\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsSystemDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  system: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst connected = connect(null, (dispatch) => ({\n  onDelete: (id, issue, system) =>\n    dispatch(deleteRemediationIssueSystem(id, issue, system)),\n}))(RemediationDetailsSystemDropdown);\n\nexport default connected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconInline.scss';\n\nexport const IconInline = ({ icon, text }) => {\n  return (\n    <div className=\"rem-c-icon-inline\">\n      {icon}\n      <span className=\"rem-c-icon-inline__text\">{text}</span>\n    </div>\n  );\n};\n\nIconInline.propTypes = {\n  icon: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\n\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n  ToolbarGroup,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\nimport reducers from '../../store/reducers';\nimport RemediationDetailsSystemDropdown from '../RemediationDetailsSystemDropdown';\nimport ConfirmationDialog from '../ConfirmationDialog';\nimport { getSystemName } from '../../Utilities/model';\nimport { IconInline } from '../Layouts/IconInline';\n\nexport const SystemsStatusModal = ({\n  isOpen,\n  onClose,\n  issue,\n  remediation,\n  onDelete,\n}) => {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [system, setSystem] = useState({});\n  const [systemStatuses, setSystemStatuses] = useState({});\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [filterText, setFilterText] = useState('');\n  const inventory = useRef(null);\n  const { current: urlBuilder } = useRef(inventoryUrlBuilder(issue));\n\n  useEffect(() => {\n    const statuses = {};\n    issue.systems.map((system) => {\n      statuses[system.id] =\n        system.resolved === true ? (\n          <IconInline icon={<CheckIcon />} text=\"Remediated\" />\n        ) : (\n          <IconInline icon={<TimesIcon />} text=\"Not remediated\" />\n        );\n    });\n    setSystemStatuses(statuses);\n  }, []);\n\n  // eslint-disable-next-line react/display-name\n  const detailDropdown = (remediation, issue) => (system) =>\n    (\n      <RemediationDetailsSystemDropdown\n        remediation={remediation}\n        issue={issue}\n        system={system}\n      />\n    );\n\n  const generateStatus = (id) => {\n    return systemStatuses[id];\n  };\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      setPage(options.page);\n      setPageSize(options.per_page);\n      //FIX_ME: onRefreshData is triggered multiple times with same options\n      inventory.current.onRefreshData({ timestamp: Date.now(), ...options });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Modal\n        className=\"remediations\"\n        variant={ModalVariant.large}\n        title={`System${issue.systems.length > 1 ? 's' : ''} for action`}\n        isOpen={isOpen}\n        onClose={onClose}\n        isFooterLeftAligned\n      >\n        <b>Action:</b> {issue.description}\n        <div className=\"rem-c-toolbar__filter\">\n          <InventoryTable\n            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) =>\n              getRegistry().register({\n                ...mergeWithEntities(\n                  reducers.inventoryEntitiesReducer({\n                    INVENTORY_ACTION_TYPES,\n                    detailDropdown: detailDropdown(remediation, issue),\n                    urlBuilder,\n                    generateStatus,\n                  })()\n                ),\n              })\n            }\n            ref={inventory}\n            items={orderBy(\n              issue.systems.filter((s) =>\n                getSystemName(s).includes(filterText)\n              ),\n              [(s) => getSystemName(s), (s) => s.id]\n            )}\n            onRefresh={onRefresh}\n            page={page}\n            total={issue.systems.length}\n            perPage={pageSize}\n            hasCheckbox={false}\n            actions={[\n              {\n                title: ' Remove system',\n                onClick: (event, rowId, rowData) => {\n                  setSystem(rowData);\n                  setDeleteDialogOpen(true);\n                },\n              },\n            ]}\n          >\n            <TableToolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <ConditionalFilter\n                    items={[\n                      {\n                        value: 'display_name',\n                        label: 'Name',\n                        type: conditionalFilterType.text,\n                        filterValues: {\n                          placeholder: 'Search by name',\n                          value: filterText,\n                          onChange: (e, selected) => setFilterText(selected),\n                        },\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </TableToolbar>\n          </InventoryTable>\n        </div>\n      </Modal>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`Removing the system ${getSystemName(system)} from the action ${\n          issue.description\n        }\n                    will remove this system’s remediation from the playbook.`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nSystemsStatusModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  issue: PropTypes.object,\n  remediation: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { SystemsStatusModal } from './Modals/SystemsStatusModal';\nimport './SystemForActionButton.scss';\n\nexport const SystemForActionButton = ({ issue, remediation, title }) => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setOpen(true)}>{title}</a>\n      <SystemsStatusModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        issue={issue}\n        remediation={remediation}\n        onDelete={(id, issue, system) =>\n          dispatch(deleteRemediationIssueSystem(id, issue, system))\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nSystemForActionButton.propTypes = {\n  issue: PropTypes.object.isRequired,\n  remediation: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","const debug = localStorage.getItem('remediations:debug') === 'true';\n\nexport const pagination = debug\n  ? {\n      perPageOptions: [1, 2, 3, 4, 5, 10, 15, 20, 25, 50, 100, 200].map(\n        (i) => ({ title: `${i}`, value: i })\n      ),\n    }\n  : {};\n","import React from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { appUrl } from '../../Utilities/urls';\n\nexport const EmptyActions = (filtered) => {\n  return (\n    <Bullseye className=\"pf-u-pt-2xl\">\n      <EmptyState>\n        {filtered.filtered === true ? (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            No actions found\n          </Title>\n        ) : (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            This playbook is empty\n          </Title>\n        )}\n        <EmptyStateBody>\n          To add an action, select issues identified in\n          <br />\n          <a href={appUrl('advisor').toString()}>Recommendations</a>,&nbsp;\n          <a href={appUrl('compliance').toString()}>Compliance</a> or&nbsp;\n          <a href={appUrl('vulnerabilities').toString()}>Vulnerability</a>&nbsp;\n          and select\n          <br />\n          <strong>Remediate with Ansible.</strong>\n        </EmptyStateBody>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyActions.propTypes = {\n  filtered: PropTypes.bool.isRequired,\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport flatMap from 'lodash/flatMap';\nimport orderBy from 'lodash/orderBy';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport { sortable, TableVariant } from '@patternfly/react-table';\nimport {\n  TableHeader,\n  Table,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { dispatchNotification } from '../Utilities/dispatcher';\n\nimport { getIssueApplication, includesIgnoreCase } from '../Utilities/model';\nimport { buildIssueUrl } from '../Utilities/urls';\nimport './RemediationTable.scss';\n\nimport { ConnectResolutionEditButton } from '../containers/ConnectedComponents';\nimport { DeleteActionsButton } from '../containers/DeleteButtons';\nimport { SystemForActionButton } from './SystemForActionButton';\n\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport * as debug from '../Utilities/debug';\n\nimport './RemediationDetailsTable.scss';\nimport { PermissionContext } from '../App';\nimport { EmptyActions } from './EmptyStates/EmptyActions';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { getResolvedSystems } from '../Utilities/utils';\n\nfunction resolutionDescriptionCell(remediation, issue) {\n  const url = buildIssueUrl(issue.id);\n\n  if (issue.resolutions_available <= 1) {\n    return url ? (\n      <React.Fragment>\n        <span>\n          <a href={url}>{issue.description}</a>\n          <br />\n          {issue.resolution.description}\n        </span>\n      </React.Fragment>\n    ) : (\n      issue.resolution.description\n    );\n  }\n\n  return url ? (\n    <React.Fragment>\n      <span>\n        <a href={url}>{issue.description}</a>\n        <br />\n        {issue.resolution.description}\n        <br />\n        <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n      </span>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      {issue.resolution.description}\n      <br />\n      <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n    </React.Fragment>\n  );\n}\n\nfunction needsRebootCell(needsReboot) {\n  return <span>{needsReboot ? 'Required' : 'Not required'}</span>;\n}\n\nfunction systemsForAction(issue, remediation, title) {\n  return (\n    <SystemForActionButton\n      key={issue.id}\n      remediation={remediation}\n      issue={issue}\n      title={title}\n    />\n  );\n}\n\nconst SORTING_ITERATEES = [\n  null, // checkboxes\n  (i) => i.description,\n  null, // resolution steps\n  (i) => i.resolution.needs_reboot,\n  (i) => i.systems.length,\n  (i) => getIssueApplication(i),\n];\n\nconst buildRow = (remediation) => (issue) => {\n  const row = [\n    {\n      isOpen: false,\n      id: issue.id,\n      cells: [\n        {\n          title: resolutionDescriptionCell(remediation, issue),\n        },\n        {\n          title: needsRebootCell(issue.resolution.needs_reboot),\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${issue.systems.length}`\n          ),\n        },\n        {\n          title: getIssueApplication(issue),\n          props: { className: 'rem-m-nowrap' },\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${getResolvedSystems(issue)}/${issue.systems.length} remediated`\n          ),\n        },\n      ],\n    },\n  ];\n\n  return row;\n};\n\nfunction RemediationDetailsTable(props) {\n  const pagination = usePagination();\n  const sorter = useSorter(1, 'asc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const permission = useContext(PermissionContext);\n  const [filterText, setFilterText] = useState('');\n  const [prevRemediationsCount, setPrevRemediationsCount] = useState(0); // eslint-disable-line\n  const chrome = useChrome();\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  sorter.onChange(pagination.reset);\n  filter.onChange(pagination.reset);\n\n  const filtered = props.remediation.issues.filter((i) =>\n    includesIgnoreCase(i.description, filter.value.trim())\n  );\n  const sorted = orderBy(\n    filtered,\n    [SORTING_ITERATEES[sorter.sortBy]],\n    [sorter.sortDir]\n  );\n  const paged = sorted.slice(\n    pagination.offset,\n    pagination.offset + pagination.pageSize\n  );\n\n  const rows = flatMap(paged, buildRow(props.remediation));\n\n  selector.register(rows);\n  const selectedIds = selector.getSelectedIds();\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Action', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  const bulkSelectCheck = (data) => {\n    return data?.filter((action) => action.selected === true);\n  };\n\n  return (\n    <div className=\"test\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: [\n            {\n              label: 'Search actions',\n              type: 'text',\n              filterValues: {\n                id: 'filter-by-string',\n                key: 'filter-by-string',\n                placeholder: 'Search',\n                value: filterText,\n                onChange: (_e, value) => {\n                  setFilterText(value);\n                },\n              },\n            },\n          ],\n        }}\n        bulkSelect={{\n          isDisabled: rows ? false : true,\n          items: [\n            {\n              title: 'Select none (0)',\n              onClick: () => {\n                selector.props.onSelect('none');\n              },\n            },\n            rows.length > 0\n              ? {\n                  title: `Select page (${rows?.length})`,\n                  onClick: () => {\n                    bulkSelectCheck(rows).length === 0\n                      ? selector.props.onSelect('page', true, 0)\n                      : rows.length === bulkSelectCheck(rows).length\n                      ? selector.props.onSelect('page', false, 0)\n                      : selector.props.onSelect('page', true, 0);\n                  },\n                }\n              : {},\n            rows.length > 0\n              ? {\n                  title: `Select all (${props?.remediation?.issues.length})`,\n                  onClick: () => {\n                    selector.register(props?.remediation.issues);\n                    selectedIds?.length < props?.remediation?.issues.length\n                      ? selector.props.onSelect('page', true, 0)\n                      : selector.props.onSelect('page', false, 0);\n                  },\n                }\n              : {},\n          ],\n          checked:\n            selectedIds.length && filtered.length > selectedIds.length\n              ? null\n              : selectedIds.length,\n          count: selectedIds.length,\n          onSelect: () => {\n            bulkSelectCheck(rows).length === 0\n              ? selector.props.onSelect('page', true, 0)\n              : selector.props.onSelect('page', false, 0);\n          },\n        }}\n        actionsConfig={{\n          actions: [\n            <DeleteActionsButton\n              key={props.remediation.id}\n              variant=\"secondary\"\n              isDisabled={!selectedIds.length}\n              remediation={props.remediation}\n              issues={selectedIds}\n              afterDelete={() => {\n                dispatchNotification({\n                  title: `Removed ${selectedIds.length} actions from ${props.remediation.name}`,\n                  description: '',\n                  variant: 'success',\n                  dismissable: true,\n                  autoDismiss: true,\n                });\n                selector.reset();\n              }}\n              isBeta={chrome?.isBeta?.()}\n            />,\n          ],\n        }}\n        pagination={{ ...pagination.props, itemCount: filtered.length }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {rows.length > 0 ? (\n        <Table\n          variant={TableVariant.compact}\n          aria-label=\"Actions\"\n          canSelectAll={false}\n          className=\"ins-c-remediation-details-table\"\n          cells={[\n            {\n              title: 'Actions',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable],\n            },\n            {\n              title: 'Systems',\n              transforms: [sortable],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable],\n            },\n          ]}\n          rows={rows}\n          {...sorter.props}\n          {...(permission.permissions.write && { ...selector.props })}\n        >\n          <TableHeader />\n          <TableBody {...selector.tbodyProps} />\n        </Table>\n      ) : filter.value ? (\n        <EmptyActions filtered={true} />\n      ) : (\n        <EmptyActions filtered={false} />\n      )}\n      {rows.length > 0 && (\n        <TableToolbar isFooter>\n          <Pagination\n            variant=\"bottom\"\n            dropDirection=\"up\"\n            itemCount={filtered.length}\n            {...pagination.props}\n            {...debug.pagination}\n          />\n        </TableToolbar>\n      )}\n    </div>\n  );\n}\n\nRemediationDetailsTable.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  status: PropTypes.object.isRequired,\n};\n\nexport default RemediationDetailsTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Icon,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { pluralize } from '../statusHelper';\n\nconst RemoveSystemModal = ({\n  isOpen,\n  selected,\n  onConfirm,\n  onClose,\n  remediationName,\n}) => (\n  <Modal\n    variant={ModalVariant.medium}\n    title={`Remove selected systems from ${remediationName}`}\n    isOpen={isOpen}\n    onClose={onClose}\n    appendTo={document.getElementsByClassName('remediations')[0]}\n    actions={[\n      <Button\n        key=\"remove-confirm\"\n        variant=\"danger\"\n        onClick={onConfirm}\n        ouiaId=\"confirm-delete\"\n      >\n        Remove\n      </Button>,\n      <Button key=\"remove-cancel\" variant=\"link\" onClick={onClose}>\n        Cancel\n      </Button>,\n    ]}\n  >\n    <Split hasGutter>\n      <SplitItem>\n        <Icon size=\"xl\" className=\"ins-m-alert\" status=\"warning\">\n          <ExclamationTriangleIcon />\n        </Icon>\n      </SplitItem>\n      <SplitItem isFilled>\n        <Stack hasGutter>\n          <StackItem>\n            This action will remove{' '}\n            {selected.length === 1 ? (\n              <span>\n                <b> {selected[0]?.display_name} </b> system\n              </span>\n            ) : (\n              <span>\n                <b> {selected.length} </b> systems\n              </span>\n            )}{' '}\n            from <b>{remediationName}</b> Remediation.\n          </StackItem>\n          <StackItem>\n            Removing {pluralize(selected.length, 'system')} from this\n            Remediation will remove it from all associated issues in{' '}\n            <b>{remediationName}</b> Remediation. Be careful as you can end up\n            with Remediation without any systems.\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  </Modal>\n);\n\nRemoveSystemModal.propTypes = {\n  selected: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      display_name: PropTypes.string,\n    })\n  ).isRequired,\n  remediationName: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default RemoveSystemModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\nconst RebootColumn = ({ rebootRequired }) => {\n  return (\n    <Fragment>\n      <span>{rebootRequired ? 'Required' : 'Not required'}</span>\n    </Fragment>\n  );\n};\n\nRebootColumn.propTypes = {\n  rebootRequired: PropTypes.bool,\n};\n\nexport default RebootColumn;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { cellWidth, sortable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport RebootColumn from './RebootColumn';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\nimport { buildIssueUrl } from '../../Utilities/urls';\nimport sortBy from 'lodash/sortBy';\n\nconst issueType = {\n  advisor: 'Advisor recommendation',\n  vulnerabilities: 'Vulnerability',\n  'patch-advisory': 'Patch advisory',\n};\n\nconst sortByIndex = (issue) => [\n  issue.description,\n  issue.resolution.needs_reboot,\n  issueType?.[issue.id.split(':')[0]],\n  issue.resolved,\n];\n\nconst IssuesColumn = ({ issues, display_name }) => {\n  const [sortByConfig, setSortByConfig] = useState({\n    index: 0,\n    direction: 'asc',\n  });\n  const [isOpen, setIsOpen] = useState();\n  const sortedIssues = sortBy(\n    issues,\n    (sortIssue) => sortByIndex(sortIssue)[sortByConfig.index]\n  );\n  return (\n    <Fragment>\n      <Button variant=\"link\" isInline onClick={() => setIsOpen(true)}>\n        {issues.length}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        title={`Actions for system ${display_name}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Table\n          variant=\"compact\"\n          aria-label={`Issues table for ${display_name}`}\n          rows={(sortByConfig.direction === 'asc'\n            ? sortedIssues\n            : sortedIssues.reverse()\n          ).map((issue) => [\n            {\n              title: (\n                <Fragment>\n                  <div>\n                    <a href={buildIssueUrl(issue.id)}>{issue.description}</a>\n                  </div>\n                  <div>{issue.resolution.description}</div>\n                </Fragment>\n              ),\n            },\n            {\n              title: (\n                <Fragment>\n                  <RebootColumn\n                    rebootRequired={issue.resolution.needs_reboot}\n                  />\n                </Fragment>\n              ),\n            },\n            issueType?.[issue.id.split(':')[0]] || 'Unknown',\n            {\n              title: (\n                <Fragment>\n                  {issue.resolved ? <CheckIcon /> : <TimesIcon />}{' '}\n                  {issue.resolved ? 'Remediated' : 'Not remediated'}\n                </Fragment>\n              ),\n            },\n          ])}\n          cells={[\n            {\n              title: 'Action',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable, cellWidth(20)],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable, cellWidth(15)],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable, cellWidth(20)],\n            },\n          ]}\n          sortBy={sortByConfig}\n          onSort={(_e, index, direction) =>\n            setSortByConfig({ index, direction })\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </Modal>\n    </Fragment>\n  );\n};\n\nIssuesColumn.propTypes = {\n  issues: PropTypes.arrayOf(PropTypes.shape()),\n  display_name: PropTypes.string,\n};\n\nexport default IssuesColumn;\n","/* eslint-disable react/no-unescaped-entities */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ConnectedIcon,\n  DisconnectedIcon,\n  TimesIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\nimport { Flex, Popover, Title } from '@patternfly/react-core';\n\nconst ConnectionStatusColumn = ({ connection_status, executor_type }) => {\n  let status = connection_status;\n  let execType = executor_type;\n  // Convert to lowercase if connection_status is a string\n  if (typeof connection_status === 'string') {\n    status = connection_status.toLowerCase();\n  }\n  if (typeof executor_type === 'string') {\n    execType = executor_type.toLowerCase();\n  }\n\n  if (status === 403) {\n    return (\n      <Popover\n        triggerAction=\"hover\"\n        headerContent={\n          <Title headingLevel=\"h4\">\n            <UnknownIcon className=\"pf-u-mr-xs\" />\n            Connection status unknown\n          </Title>\n        }\n        position=\"left\"\n        bodyContent={\n          <Flex\n            direction={{ default: 'column' }}\n            spaceItems={{ default: 'spaceItemsNone' }}\n          >\n            <span>\n              <UnknownIcon className=\"pf-u-mr-xs\" />\n              To view connection status, contact your administrator to request\n              the{' '}\n              <p className=\"pf-v5-u-font-weight-bold\">\n                remediations:remediation:execute{' '}\n              </p>\n              permission within RBAC, and the{' '}\n              <p className=\"pf-v5-u-font-weight-bold\">\n                \"Allow Insights users to use 'Remediations' to send Ansible\n                Playbooks to fix issues on your systems\"\n              </p>{' '}\n              permission within Remote Host Configuration Manager.\n              <a\n                href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/host-communication-with-insights_red-hat-insights-remediation-guide\"\n                style={{ textDecoration: 'underline' }}\n                className=\"pf-u-ml-xs\"\n              >\n                Remote Host Configuration Manager.\n              </a>\n            </span>\n          </Flex>\n        }\n      >\n        <Flex>\n          <UnknownIcon className=\"pf-u-mr-xs\" />\n          <p style={{ borderBottomStyle: 'dotted', maxWidth: 'fit-content' }}>\n            Unknown\n          </p>\n        </Flex>\n      </Popover>\n    );\n  } else if (status === 'connected') {\n    return (\n      <span>\n        <ConnectedIcon className=\"pf-u-mr-xs\" /> Connected\n      </span>\n    );\n    //When execType === 'none' connection_status is no_rhc\n  } else if (execType === 'none') {\n    return (\n      <Popover\n        triggerAction=\"hover\"\n        headerContent={\n          <Title headingLevel=\"h4\">\n            <DisconnectedIcon className=\"pf-u-mr-xs\" />\n            Connection not configured\n          </Title>\n        }\n        position=\"left\"\n        bodyContent={\n          <Flex\n            direction={{ default: 'column' }}\n            spaceItems={{ default: 'spaceItemsNone' }}\n          >\n            <span>\n              <TimesIcon className=\"pf-u-mr-xs\" />\n              Connect your system or the Red Hat Satellite instance to which\n              your system is registered to Red Hat Insights.\n            </span>\n            <a\n              href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/host-communication-with-insights_red-hat-insights-remediation-guide\"\n              style={{ textDecoration: 'underline' }}\n            >\n              Please review this documentation\n            </a>\n          </Flex>\n        }\n      >\n        <Flex>\n          <DisconnectedIcon className=\"pf-u-mr-xs\" />\n          <p style={{ borderBottomStyle: 'dotted', maxWidth: 'fit-content' }}>\n            Not configured\n          </p>\n        </Flex>\n      </Popover>\n    );\n  } else if (status === 'disconnected') {\n    if (execType === 'rhc') {\n      return (\n        <Popover\n          triggerAction=\"hover\"\n          headerContent={\n            <Title headingLevel=\"h4\">\n              <DisconnectedIcon className=\"pf-u-mr-xs\" />\n              System is disconnected\n            </Title>\n          }\n          position=\"left\"\n          bodyContent={\n            <Flex\n              direction={{ default: 'column' }}\n              spaceItems={{ default: 'spaceItemsNone' }}\n            >\n              <span>\n                <TimesIcon className=\"pf-u-mr-xs\" />\n                Red Hat Insights has been disconnected from this system\n              </span>\n              <a\n                href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/host-communication-with-insights_red-hat-insights-remediation-guide\"\n                style={{ textDecoration: 'underline' }}\n              >\n                Please review this documentation\n              </a>\n            </Flex>\n          }\n        >\n          <Flex>\n            <DisconnectedIcon className=\"pf-u-mr-xs\" />\n            <p style={{ borderBottomStyle: 'dotted', maxWidth: 'fit-content' }}>\n              Disconnected\n            </p>\n          </Flex>\n        </Popover>\n      );\n    } else if (execType === 'rhc-satellite') {\n      return (\n        <Popover\n          triggerAction=\"hover\"\n          headerContent={\n            <Title headingLevel=\"h4\">\n              <DisconnectedIcon className=\"pf-u-mr-xs\" />\n              System is disconnected\n            </Title>\n          }\n          position=\"left\"\n          bodyContent={\n            <Flex\n              direction={{ default: 'column' }}\n              spaceItems={{ default: 'spaceItemsNone' }}\n            >\n              <span>\n                <TimesIcon className=\"pf-u-mr-xs\" /> Red Hat Insights has been\n                disconnected from the Red Hat Satellite instance that this\n                system is registered to.\n              </span>\n              <a\n                href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/host-communication-with-insights_red-hat-insights-remediation-guide\"\n                style={{ textDecoration: 'underline' }}\n              >\n                Please review this documentation\n              </a>\n            </Flex>\n          }\n        >\n          <Flex>\n            <DisconnectedIcon className=\"pf-u-mr-xs\" />\n            <p style={{ borderBottomStyle: 'dotted', maxWidth: 'fit-content' }}>\n              Disconnected\n            </p>\n          </Flex>\n        </Popover>\n      );\n    }\n  }\n};\n\nConnectionStatusColumn.propTypes = {\n  connection_status: PropTypes.string,\n  executor_type: PropTypes.string,\n};\n\nexport default ConnectionStatusColumn;\n","import React from 'react';\nimport IssuesColumn from './IssuesColumn';\nimport RebootColumn from './RebootColumn';\nimport ConnectionStatusColumn from './ConnectionStatusCol';\n\nexport default [\n  {\n    key: 'display_name',\n  },\n  {\n    key: 'tags',\n  },\n  {\n    key: 'system_profile',\n  },\n  {\n    key: 'issues',\n    title: 'Issues',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (issues, _, { display_name }) => (\n      <IssuesColumn issues={issues} display_name={display_name} />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n  {\n    key: 'rebootRequired',\n    title: 'Reboot required',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (rebootRequired) => (\n      <RebootColumn rebootRequired={rebootRequired} />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n  {\n    key: 'connection_status',\n    title: 'Connection Status',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (connection_status, _, { executor_type }) => (\n      <ConnectionStatusColumn\n        connection_status={connection_status}\n        executor_type={executor_type}\n      />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n];\n","import React, { useEffect, useRef, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { remediationSystems } from '../../store/reducers';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { deleteSystems, selectEntity, loadRemediation } from '../../actions';\nimport './SystemsTable.scss';\nimport RemoveSystemModal from './RemoveSystemModal';\nimport { dispatchNotification } from '../../Utilities/dispatcher';\nimport {\n  calculateSystems,\n  fetchInventoryData,\n  mergedColumns,\n  calculateChecked,\n} from './helpers';\nimport systemsColumns from './Columns';\n\nconst SystemsTableWrapper = ({\n  remediation,\n  registry,\n  refreshRemediation,\n  connectedData,\n  areDetailsLoading,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const systemsRef = useRef();\n  const getEntitiesRef = useRef(() => undefined);\n  const activeSystem = useRef(undefined);\n  const dispatch = useDispatch();\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n\n  const onConfirm = () => {\n    (async () => {\n      const selectedSystems =\n        selected.size > 0\n          ? Array.from(selected, ([, value]) => value)\n          : [\n              {\n                ...activeSystem.current,\n              },\n            ];\n      const action = deleteSystems(selectedSystems, remediation);\n      dispatch(action);\n      await action.payload;\n      refreshRemediation();\n    })();\n    activeSystem.current = undefined;\n    dispatchNotification({\n      title: `Removed ${selected.size} ${\n        selected.size > 1 ? 'systems' : 'system'\n      } from playbook`,\n      description: '',\n      variant: 'success',\n      dismissable: true,\n      autoDismiss: true,\n    });\n    setIsOpen(false);\n  };\n\n  const bulkSelectCheck = (data) => {\n    return data?.filter((system) => system.selected === true);\n  };\n  const bulkSelectorSwitch = (selection) => {\n    switch (selection) {\n      case 'none':\n        systemsRef.current.map((system) =>\n          dispatch(selectEntity(system.id, false))\n        );\n        break;\n      case 'page':\n        dispatch(selectEntity(0, true));\n        break;\n      case 'deselect page':\n        rows.map(() => dispatch(selectEntity(0, false)));\n        break;\n      case 'all':\n        systemsRef.current.map((system) =>\n          dispatch(selectEntity(system.id, true))\n        );\n        break;\n      case 'deselect all':\n        systemsRef.current.map((system) =>\n          dispatch(selectEntity(system.id, false))\n        );\n        break;\n    }\n  };\n  useEffect(() => {\n    systemsRef.current = calculateSystems(remediation);\n  }, [remediation.id]);\n  return (\n    !areDetailsLoading && (\n      <InventoryTable\n        variant=\"compact\"\n        showTags\n        noDetail\n        hideFilters={{\n          all: true,\n          name: false,\n        }}\n        tableProps={{\n          canSelectAll: false,\n        }}\n        columns={(defaultColumns) =>\n          mergedColumns(defaultColumns, systemsColumns)\n        }\n        bulkSelect={{\n          isDisabled: rows ? false : true,\n          count: selected ? selected.size : 0,\n          items: [\n            {\n              title: 'Select none (0)',\n              onClick: () => bulkSelectorSwitch('none'),\n            },\n            {\n              ...(loaded && rows && rows.length > 0\n                ? {\n                    title: `Select page (${rows.length})`,\n                    onClick: () => {\n                      !selected //if nothing is selected - select the page\n                        ? bulkSelectorSwitch('page')\n                        : bulkSelectCheck(rows).length === rows.length //it compares the selected rows to the total selected values so you can deselect the page\n                        ? bulkSelectorSwitch('deselect page')\n                        : systemsRef.current.length > selected.size //it compares the total amount of rows to the selected values, so you can select additional page\n                        ? bulkSelectorSwitch('page')\n                        : bulkSelectorSwitch('deselect page');\n                    },\n                  }\n                : {}),\n            },\n            {\n              ...(loaded && rows && rows.length > 0\n                ? {\n                    title: `Select all (${systemsRef.current.length})`,\n                    onClick: () => {\n                      calculateChecked(systemsRef.current, selected)\n                        ? bulkSelectorSwitch('deselect all')\n                        : bulkSelectorSwitch('all');\n                    },\n                  }\n                : {}),\n            },\n          ],\n          checked: calculateChecked(systemsRef.current, selected),\n          onSelect: () => {\n            bulkSelectCheck(rows).length === rows.length\n              ? bulkSelectorSwitch('deselect page')\n              : bulkSelectorSwitch('page');\n          },\n        }}\n        getEntities={async (_i, config) =>\n          fetchInventoryData(\n            config,\n            systemsRef.current,\n            getEntitiesRef.current,\n            connectedData\n          )\n        }\n        onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities, api }) => {\n          getEntitiesRef.current = api?.getEntities;\n          registry?.register?.({\n            ...mergeWithEntities(remediationSystems(INVENTORY_ACTION_TYPES)),\n          });\n        }}\n        actions={[\n          {\n            title: 'Remove system',\n            onClick: (_event, _index, { id, display_name }) => {\n              activeSystem.current = {\n                id,\n                display_name,\n                issues: remediation.issues.filter((issue) =>\n                  issue.systems.find(({ id: systemId }) => systemId === id)\n                ),\n              };\n              setIsOpen(true);\n            },\n          },\n        ]}\n      >\n        {loaded && (\n          <Button\n            variant=\"secondary\"\n            onClick={() => setIsOpen(true)}\n            isDisabled={selected.size === 0}\n          >\n            Remove system\n          </Button>\n        )}\n        <RemoveSystemModal\n          isOpen={isOpen}\n          onConfirm={onConfirm}\n          selected={\n            selected.size > 0\n              ? Array.from(selected, ([, value]) => value)\n              : [activeSystem.current]\n          }\n          onClose={() => {\n            activeSystem.current = undefined;\n            setIsOpen(false);\n          }}\n          remediationName={remediation.name}\n        />\n      </InventoryTable>\n    )\n  );\n};\n\nconst SystemsTable = (props) => {\n  const dispatch = useDispatch();\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return registry ? (\n    <Provider store={registry.store}>\n      <SystemsTableWrapper\n        registry={registry}\n        refreshRemediation={() =>\n          dispatch(loadRemediation(props.remediation.id))\n        }\n        {...props}\n      />\n    </Provider>\n  ) : (\n    <Fragment />\n  );\n};\n\nSystemsTable.propTypes = {\n  remediation: PropTypes.shape({\n    id: PropTypes.string,\n    issues: PropTypes.arrayOf(\n      PropTypes.shape({\n        systems: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string,\n            display_name: PropTypes.string,\n            resolved: PropTypes.bool,\n          })\n        ),\n      })\n    ),\n  }),\n};\n\nSystemsTableWrapper.propTypes = {\n  ...SystemsTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  refreshRemediation: PropTypes.func,\n};\n\nexport default SystemsTable;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport PropTypes from 'prop-types';\n\nimport { expandable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport { StatusSummary, normalizeStatus } from './statusHelper';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationActivityTable.scss';\n\nconst RemediationActivityTable = ({ remediation, playbookRuns }) => {\n  const [rows, setRows] = useState([]);\n  const permission = useContext(PermissionContext);\n\n  const generateRows = (playbookRuns) => {\n    return playbookRuns.reduce(\n      (acc, playbooks, i) => [\n        ...acc,\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: (\n                <Link to={`/${remediation.id}/${playbooks.id}`}>\n                  <DateFormat type=\"exact\" date={playbooks.created_at} />\n                </Link>\n              ),\n              cellFormatters: [expandable],\n            },\n            playbooks.created_by.last_name // for reasons unknown, last_name is not available sometimes\n              ? `${playbooks.created_by.first_name} ${playbooks.created_by.last_name}`\n              : `${playbooks.created_by.username}`,\n            {\n              title: (\n                <StatusSummary\n                  executorStatus={normalizeStatus(playbooks.status)}\n                  counts={playbooks.executors.reduce(\n                    (acc, ex) => ({\n                      pending: acc.pending + ex.counts.pending,\n                      running: acc.running + ex.counts.running,\n                      success: acc.success + ex.counts.success,\n                      failure: acc.failure + ex.counts.failure,\n                      canceled: acc.canceled + ex.counts.canceled,\n                      acked: acc.acked + ex.counts.acked,\n                    }),\n                    {\n                      pending: 0,\n                      running: 0,\n                      success: 0,\n                      failure: 0,\n                      canceled: 0,\n                      acked: 0,\n                    }\n                  )}\n                  hasCancel\n                  remediationName={remediation.name}\n                  remediationId={remediation.id}\n                  playbookId={playbooks.id}\n                  permission={permission}\n                />\n              ),\n            },\n          ],\n        },\n        {\n          parent: 2 * i,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <Table\n                  aria-label=\"Compact expandable table\"\n                  cells={['Connection', 'Systems', 'Playbook run status']}\n                  rows={playbooks.executors.map((e) => ({\n                    cells: [\n                      {\n                        title: (\n                          <Link\n                            to={`/${remediation.id}/${playbooks.id}/${e.executor_id}`}\n                          >\n                            {e.executor_name}\n                          </Link>\n                        ),\n                      },\n                      e.system_count,\n                      {\n                        title: (\n                          <StatusSummary\n                            executorStatus={normalizeStatus(e.status)}\n                            counts={e.counts}\n                            permission={permission}\n                          />\n                        ),\n                      },\n                    ],\n                  }))}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              ),\n            },\n          ],\n        },\n      ],\n      []\n    );\n  };\n\n  useEffect(() => {\n    if (playbookRuns && playbookRuns.length) {\n      setRows(() => generateRows(playbookRuns));\n    }\n  }, [playbookRuns]);\n\n  const handleOnCollapse = (event, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const columns = ['Run on', 'Run by', 'Status'];\n\n  return (\n    <Table\n      className=\"rem-c-activity-table\"\n      aria-label=\"Collapsible table\"\n      onCollapse={handleOnCollapse}\n      rows={rows}\n      cells={columns}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nRemediationActivityTable.propTypes = {\n  remediation: PropTypes.object,\n  playbookRuns: PropTypes.array,\n};\n\nexport default RemediationActivityTable;\n","import { useState, useEffect, useRef } from 'react';\n\nexport const useVerifyName = (name, remediationsList) => {\n  const [isVerifyingName, setIsVerifyingName] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(false);\n  const mounted = useRef(false);\n  const timerRef = useRef(null);\n  const playbookNamePattern = /^(?!\\s).+(?<!\\s)$/;\n\n  useEffect(() => {\n    mounted.current = true;\n    setIsVerifyingName(true);\n\n    //Run a timer 1/2 second after an input, if the user inputs again within\n    //that timer, clear and reset timer\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n\n    const compareData = async () => {\n      const trimmedVal = name.trim();\n\n      const dataHashmap = {};\n      remediationsList &&\n        remediationsList.forEach((item) => {\n          dataHashmap[item.name] = true;\n        });\n\n      if (dataHashmap[trimmedVal] && playbookNamePattern.test(trimmedVal)) {\n        setIsDisabled(true);\n      } else {\n        setIsDisabled(false);\n      }\n    };\n\n    timerRef.current = setTimeout(() => {\n      mounted.current && compareData();\n      setIsVerifyingName(false);\n    }, 500);\n\n    return () => {\n      mounted.current = false;\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, [name, remediationsList]);\n\n  return [isVerifyingName, isDisabled];\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  FormGroup,\n  Modal,\n  TextInput,\n  ModalVariant,\n  Spinner,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { useVerifyName } from '../../Utilities/useVerifyName';\n\nexport default function TextInputDialog(props) {\n  const [value, setValue] = useState(props.value || '');\n  const { title, onCancel, onSubmit, ariaLabel, className } = props;\n\n  const [isVerifyingName, isDisabled] = useVerifyName(\n    value,\n    props.remediationsList\n  );\n\n  return (\n    <Modal\n      title={title}\n      isOpen={true}\n      onClose={(event) => onCancel(event)}\n      actions={[\n        isVerifyingName ? (\n          <Spinner size=\"lg\" className=\"pf-u-mr-sm\" />\n        ) : (\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => onSubmit(value)}\n            isDisabled={isDisabled || value.trim() === ''}\n            ouiaId=\"save\"\n          >\n            Save\n          </Button>\n        ),\n        <Button\n          key=\"cancel\"\n          variant=\"secondary\"\n          onClick={onCancel}\n          ouiaId=\"cancel\"\n        >\n          Cancel\n        </Button>,\n      ]}\n      variant={ModalVariant.small}\n      className={className}\n    >\n      <FormGroup\n        fieldId=\"remediation-name\"\n        helperTextInvalid=\"Playbook name has to contain alphanumeric characters\"\n        isValid={isDisabled}\n      >\n        <TextInput\n          value={value}\n          type=\"text\"\n          onChange={(_event, value) => setValue(value)}\n          aria-label={ariaLabel || 'input text'}\n          autoFocus\n          isValid={!isDisabled}\n          validated={\n            //isDisabled check if item exist in current remList,\n            //if exist and is current rem, dont show error message\n            value === props.value && isDisabled\n              ? ValidatedOptions.default\n              : (value.trim() === '' || isDisabled) && ValidatedOptions.error\n          }\n        />\n        {isDisabled && value !== props.value && (\n          <p className=\"pf-v5-u-font-size-sm pf-v5-u-danger-color-100\">\n            A playbook with the same name already exists within your\n            organization. Try a different name.\n          </p>\n        )}\n        {value.trim() === '' && (\n          <p className=\"pf-v5-u-font-size-sm pf-v5-u-danger-color-100\">\n            Playbook name cannot be empty.\n          </p>\n        )}\n      </FormGroup>\n    </Modal>\n  );\n}\n\nTextInputDialog.propTypes = {\n  title: PropTypes.string.isRequired,\n  onCancel: PropTypes.func,\n  onSubmit: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n  pattern: PropTypes.instanceOf(RegExp),\n  remediationsList: PropTypes.array,\n};\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nimport { Button } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core/deprecated';\nimport TextInputDialog from './Dialogs/TextInputDialog';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediation, patchRemediation } from '../actions';\nimport { dispatchNotification } from '../Utilities/dispatcher';\n\nimport { PermissionContext } from '../App';\n\nconst EMPTY_NAME = 'Unnamed Playbook';\n\nfunction RemediationDetailsDropdown({\n  remediation,\n  onRename,\n  onDelete,\n  remediationsList,\n}) {\n  const [open, setOpen] = useState(false);\n  const [renameDialogOpen, setRenameDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const permission = useContext(PermissionContext);\n  const navigate = useNavigate();\n\n  return (\n    <React.Fragment>\n      {renameDialogOpen && (\n        <TextInputDialog\n          title=\"Edit playbook name\"\n          ariaLabel=\"Playbook name\"\n          value={remediation.name}\n          onCancel={() => setRenameDialogOpen(false)}\n          onSubmit={(name) => {\n            setRenameDialogOpen(false);\n            onRename(remediation.id, name);\n            dispatchNotification({\n              title: `Updated playbook name to ${name}`,\n              description: '',\n              variant: 'success',\n              dismissable: true,\n              autoDismiss: true,\n            });\n          }}\n          remediationsList={remediationsList}\n        />\n      )}\n\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        title=\"Remove playbook?\"\n        text=\"You will not be able to recover this Playbook\"\n        confirmText=\"Remove playbook\"\n        onClose={(confirm) => {\n          setDeleteDialogOpen(false);\n          if (confirm) {\n            onDelete(remediation.id);\n            dispatchNotification({\n              title: `Deleted playbook ${remediation.name}`,\n              variant: 'success',\n              dismissable: true,\n              autoDismiss: true,\n            });\n            navigate('/');\n          }\n        }}\n      />\n\n      {permission.permissions.write && (\n        <Dropdown\n          onSelect={(f) => f}\n          toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n          isOpen={open}\n          position={DropdownPosition.right}\n          isPlain\n        >\n          <Button onClick={() => setRenameDialogOpen(true)} variant=\"link\">\n            Rename\n          </Button>\n          <Button\n            className=\"rem-c-button__danger-link\"\n            onClick={() => setDeleteDialogOpen(true)}\n            variant=\"link\"\n            isDanger\n          >\n            Delete\n          </Button>\n        </Dropdown>\n      )}\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  onRename: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  remediationsList: PropTypes.array,\n};\n\nconst connected = connect(null, (dispatch) => ({\n  onRename: (id, name) => {\n    if (!name) {\n      name = EMPTY_NAME;\n    }\n    const trimmedName = name.trim();\n    dispatch(patchRemediation(id, { name: trimmedName }));\n  },\n  onDelete: (id) => dispatch(deleteRemediation(id)),\n}))(RemediationDetailsDropdown);\n\nexport default connected;\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Button, Flex, Spinner, Title, Tooltip } from '@patternfly/react-core';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport './ExecuteButton.scss';\nimport './Status.scss';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\n\nconst ExecuteButton = ({\n  isLoading,\n  isDisabled,\n  data,\n  getConnectionStatus,\n  issueCount,\n  runRemediation,\n  etag,\n  remediationStatus,\n  setEtag,\n  areDetailsLoading,\n  detailsError,\n  permissions,\n  remediation,\n  connectedSystems,\n  totalSystems,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n  const isEnabled = () =>\n    true || localStorage.getItem('remediations:fifi:debug') === 'true';\n\n  useEffect(() => {\n    if (remediationStatus === 'changed') {\n      getConnectionStatus(remediation.id);\n      setShowRefreshMessage(true);\n    } else if (remediationStatus === 'fulfilled') {\n      setOpen(false);\n    }\n  }, [remediationStatus]);\n\n  const buttonWithTooltip = () => {\n    return (\n      <Tooltip\n        minWidth=\"400px\"\n        aria-label=\"details Tooltip\"\n        content={\n          <>\n            <Flex\n              className=\"pf-v5-u-ml-md\"\n              direction={{ default: 'column' }}\n              spaceItems={{ default: 'spaceItemsNone' }}\n              alignItems={{ default: 'alignItemsFlexStart' }}\n            >\n              <Title headingLevel=\"h6\" className=\"pf-v5-u-mb-md\">\n                Remediations Readiness Check\n              </Title>\n\n              <span className=\"pf-v5-u-font-size-sm\">\n                {connectedSystems === 0 ? (\n                  <TimesIcon className=\"pf-v5-u-mr-sm\" />\n                ) : (\n                  <CheckIcon className=\"pf-v5-u-mr-sm\" />\n                )}\n                Connected Systems ({`${connectedSystems + '/' + totalSystems}`}\n                ). See systems tab.\n              </span>\n\n              <span className=\"pf-v5-u-font-size-sm\">\n                {detailsError === 403 ? (\n                  <TimesIcon className=\"pf-v5-u-mr-sm\" />\n                ) : (\n                  <CheckIcon className=\"pf-v5-u-mr-sm\" />\n                )}\n                <a\n                  href=\"https://console.redhat.com/insights/connector\"\n                  style={{ textDecoration: 'underline', color: 'white' }}\n                  className=\"pf-v5-u-mr-xs\"\n                >\n                  RHC manager\n                </a>\n                is {detailsError === 403 ? 'disabled' : 'enabled'}.\n              </span>\n\n              <span className=\"pf-v5-u-font-size-sm pf-v5-u-mb-sm\">\n                {permissions ? (\n                  <CheckIcon className=\"pf-v5-u-mr-sm\" />\n                ) : (\n                  <TimesIcon className=\"pf-v5-u-mr-sm\" />\n                )}\n                <a\n                  href=\"https://console.redhat.com/iam/user-access/overview\"\n                  style={{ textDecoration: 'underline', color: 'white' }}\n                  className=\"pf-v5-u-mr-xs\"\n                >\n                  User access permissions\n                </a>\n                are {permissions ? '' : 'not'} granted.\n              </span>\n            </Flex>\n          </>\n        }\n      >\n        <Button\n          isAriaDisabled={isDisabled}\n          data-testid=\"execute-button-enabled\"\n          onClick={() => {\n            setOpen(true);\n            getConnectionStatus(remediation.id);\n          }}\n        >\n          Execute playbook\n        </Button>\n      </Tooltip>\n    );\n  };\n\n  return isEnabled() && !areDetailsLoading ? (\n    <React.Fragment>\n      {buttonWithTooltip()}\n      {open && (\n        <ExecuteModal\n          isOpen={open}\n          onClose={() => {\n            setShowRefreshMessage(false);\n            setOpen(false);\n          }}\n          showRefresh={showRefreshMessage}\n          remediationId={remediation.id}\n          remediationName={remediation.name}\n          data={data}\n          etag={etag}\n          isLoading={isLoading}\n          issueCount={issueCount}\n          runRemediation={runRemediation}\n          setEtag={setEtag}\n        />\n      )}\n    </React.Fragment>\n  ) : areDetailsLoading ? (\n    <Spinner size=\"lg\" />\n  ) : null;\n};\n\nExecuteButton.propTypes = {\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  getConnectionStatus: PropTypes.func,\n  runRemediation: PropTypes.func,\n  remediation: PropTypes.string,\n  remediationStatus: PropTypes.string,\n  issueCount: PropTypes.number,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  disabledStateText: PropTypes.string,\n  connectedSystems: PropTypes.number,\n  areDetailsLoading: PropTypes.bool,\n  detailsError: PropTypes.any,\n  permissions: PropTypes.bool,\n  totalSystems: PropTypes.number,\n};\n\nExecuteButton.defaultProps = {\n  data: [],\n  isDisabled: false,\n};\n\nexport default ExecuteButton;\n","import { connect } from 'react-redux';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  getEndpoint,\n  checkExecutable,\n} from '../actions';\nimport ExecuteButton from '../components/ExecuteButton';\n\nexport const ExecutePlaybookButton = connect(\n  ({\n    connectionStatus: { data, status, etag },\n    selectedRemediation,\n    runRemediation,\n    sources,\n    executable,\n  }) => ({\n    data,\n    isLoading: status !== 'fulfilled',\n    issueCount: selectedRemediation.remediation.issues.length,\n    etag,\n    remediationStatus: runRemediation.status,\n    sources,\n    executable,\n  }),\n  (dispatch) => ({\n    getConnectionStatus: (id) => {\n      dispatch(getConnectionStatus(id));\n    },\n    runRemediation: (id, etag, exclude) => {\n      dispatch(runRemediation(id, etag, exclude)).then(() =>\n        dispatch(getPlaybookRuns(id))\n      );\n    },\n    setEtag: (etag) => {\n      dispatch(setEtag(etag));\n    },\n    getEndpoint: (id) => {\n      dispatch(getEndpoint(id));\n    },\n    checkExecutable: (id) => {\n      dispatch(checkExecutable(id));\n    },\n  })\n)(ExecuteButton);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst UpsellBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Put Insights into action\"\n      actionClose={\n        <AlertActionCloseButton\n          onClose={onClose}\n          data-testid=\"upselBanner-close\"\n        />\n      }\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Enable push-button remediation across your hybrid cloud environment\n          with Red Hat Satellite.\n        </StackItem>\n        <StackItem>\n          <a href=\"https://www.redhat.com/en/technologies/management/satellite\">\n            Learn more\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default UpsellBanner;\n\nUpsellBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nUpsellBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React from 'react';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Bullseye,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { CloudIcon } from '@patternfly/react-icons';\n\n// TODO: Fill Learn more link\n\nconst ActivityTabUpsell = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateHeader\n        titleText=\"Get more with Find it Fix it capabilities\"\n        icon={<EmptyStateIcon icon={CloudIcon} />}\n        headingLevel=\"h5\"\n      />\n      <EmptyStateBody>\n        Upgrade to Red Hat Satellite to remediate all your systems, across\n        regions and geographies directly from Red Hat Insights.\n      </EmptyStateBody>\n      <EmptyStateFooter>\n        <Button\n          variant=\"link\"\n          component=\"a\"\n          ouiaId=\"learn_more\"\n          href=\"https://www.redhat.com/en/technologies/management/satellite\"\n        >\n          Learn more\n        </Button>\n      </EmptyStateFooter>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivityTabUpsell;\n","import React, { Fragment } from 'react';\nimport { Toolbar, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  InputGroupItem,\n} from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core/deprecated';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nconst SkeletonTableToolbar = () => {\n  const items = (\n    <Fragment>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <DropdownToggle\n              isDisabled\n              splitButtonItems={[\n                <DropdownToggleCheckbox\n                  id=\"skeleton-dropdown\"\n                  key=\"skeleton-dropdown\"\n                  aria-label=\"Loading Select all\"\n                />,\n              ]}\n              id=\"skeleton-dropdown-toggle\"\n            />\n          }\n        />\n      </ToolbarItem>\n      <ToolbarItem>\n        <InputGroup>\n          <InputGroupItem isFill>\n            <TextInput\n              value=\"Search\"\n              isDisabled\n              name=\"skeleton-search\"\n              id=\"skeleton-search\"\n              type=\"search\"\n              aria-label=\"search loading\"\n            />\n          </InputGroupItem>\n          <InputGroupItem>\n            <Button\n              isDisabled\n              variant=\"control\"\n              aria-label=\"search button for search input\"\n            >\n              <SearchIcon />\n            </Button>\n          </InputGroupItem>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button isDisabled variant=\"primary\">\n          Remove action\n        </Button>\n      </ToolbarItem>\n    </Fragment>\n  );\n\n  return (\n    <Toolbar id=\"skeleton-toolbar\">\n      <ToolbarContent> {items} </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default SkeletonTableToolbar;\n","import React from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst SkeletonTabs = () => {\n  return (\n    <Tabs activeKey={0} className=\"ins-s-tabs\">\n      <Tab eventKey={0} title={<TabTitleText>Actions</TabTitleText>} />\n      <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>} />\n      <Tab eventKey={2} title={<TabTitleText>Activity</TabTitleText>} />\n    </Tabs>\n  );\n};\n\nexport default SkeletonTabs;\n","import React from 'react';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport SkeletonTable from './SkeletonTable';\nimport SkeletonTableToolbar from './SkeletonTableToolbar';\nimport SkeletonTabs from './SkeletonTabs';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { Dropdown, KebabToggle } from '@patternfly/react-core/deprecated';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst RemediationDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"rem-c-page-details__header\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to=\"/\"> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Level className=\"rem-l-level\">\n          <LevelItem>\n            <PageHeaderTitle\n              className=\"rem-s-page-header\"\n              title={\n                <React.Fragment>\n                  <Skeleton size=\"md\" />\n                </React.Fragment>\n              }\n            />\n          </LevelItem>\n          <LevelItem>\n            <Split hasGutter>\n              <SplitItem>\n                <Button isDisabled variant=\"link\">\n                  Download playbook\n                </Button>\n              </SplitItem>\n              <SplitItem>\n                <Dropdown\n                  toggle={<KebabToggle isDisabled={true} />}\n                  isOpen={false}\n                  isPlain\n                />\n              </SplitItem>\n            </Split>\n          </LevelItem>\n        </Level>\n        <RemediationSummarySkeleton />\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <StackItem className=\"ins-c-playbookSummary__tabs\">\n            <SkeletonTabs />\n            <SkeletonTableToolbar />\n            <SkeletonTable />\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default RemediationDetailsSkeleton;\n\nconst RemediationSummarySkeleton = () => {\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{ x: 'Resolved', y: 1 }}\n          labels={({ datum }) => (datum.x ? `${datum.x}: ${datum.y}%` : null)}\n          title={'Loading'}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Latest activity\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacer-lg' }}>\n                <DescriptionList title=\"Autoreboot\">\n                  <Skeleton size=\"md\" />\n                </DescriptionList>\n              </FlexItem>\n            </Flex>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n","import React from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\n\nimport './EmptyActivityTable.scss';\n\nconst EmptyActivityTable = () => (\n  <Table\n    aria-label=\"No activity\"\n    cells={['Run on', 'Run by', 'Status']}\n    ouiaId=\"activity-table\"\n    rows={[\n      {\n        cells: [\n          {\n            title: (\n              <EmptyState className=\"rem-c-activity-table__empty\">\n                <EmptyStateHeader titleText=\"No activity\" headingLevel=\"h5\" />\n                <EmptyStateBody>\n                  Execute this playbook to see a history and summary of the\n                  activity.\n                </EmptyStateBody>\n              </EmptyState>\n            ),\n            props: { colSpan: 3 },\n          },\n        ],\n      },\n    ]}\n  >\n    <TableHeader />\n    <TableBody />\n  </Table>\n);\n\nexport default EmptyActivityTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\nimport {\n  CheckCircleIcon,\n  OffIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport DescriptionList from '../components/Layouts/DescriptionList';\nimport classnames from 'classnames';\nimport { StatusSummary } from '../components/statusHelper';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport './RemediationSummary.scss';\n\nexport const RemediationSummary = ({\n  remediation,\n  playbookRuns,\n  switchAutoReboot,\n  context,\n}) => {\n  const handleRebootChange = (autoReboot) => {\n    switchAutoReboot(remediation.id, autoReboot);\n  };\n\n  const generateNumIssuesReboot = () => {\n    let count = 0;\n    for (const issue of remediation.issues) {\n      if (issue.resolution.needs_reboot) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  const generateNumRebootString = (num) => {\n    return `${num} issue${num === 1 ? '' : 's'} require${\n      num === 1 ? 's' : ''\n    } reboot to remediate`;\n  };\n\n  const pluralize = (number, str) =>\n    number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\n  const rebootEnabled = () => {\n    return (\n      <div>\n        <CheckCircleIcon className=\"rem-c-success\" />\n        <b className=\"ins-c-remediation-summary__reboot--enabled\"> Enabled </b>\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn off\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const rebootDisabled = (required) => {\n    return (\n      <div>\n        <OffIcon />\n        <b\n          className={`ins-c-remediation-summary__reboot--disabled${\n            required ? '--warning' : ''\n          }`}\n        >\n          Off\n        </b>\n        {required && (\n          <React.Fragment>\n            <ExclamationTriangleIcon className=\"ins-c-remediation-summary__reboot--required--icon\" />\n            <b className=\"ins-c-remediation-summary__reboot--required\">\n              {generateNumRebootString(generateNumIssuesReboot())}\n            </b>\n          </React.Fragment>\n        )}\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn on\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const generateAutoRebootStatus = (status, needsReboot) => {\n    return status ? rebootEnabled() : rebootDisabled(needsReboot);\n  };\n\n  const renderAutoReboot = (remediation) => {\n    return (\n      <DescriptionList\n        className=\"rem-c-playbookSummary__settings\"\n        title=\"Autoreboot\"\n      >\n        <Flex>\n          <FlexItem\n            className={classnames(\n              'ins-c-reboot-status',\n              {\n                'ins-c-reboot-status__enabled':\n                  remediation.auto_reboot && remediation.needs_reboot,\n              },\n              { 'ins-c-reboot-status__disabled': !remediation.auto_reboot }\n            )}\n            spacer={{ default: 'spacer-xl' }}\n          >\n            {generateAutoRebootStatus(\n              remediation.auto_reboot,\n              remediation.needs_reboot\n            )}\n          </FlexItem>\n        </Flex>\n      </DescriptionList>\n    );\n  };\n\n  const renderLatestActivity = (playbookRuns) => {\n    if (playbookRuns.length) {\n      const mostRecent = playbookRuns[0];\n      return (\n        <FlexItem spacer={{ default: 'spacer-xl' }}>\n          <DescriptionList\n            needsPointer\n            className=\"rem-c-description-list-latest-activity\"\n            title=\"Latest activity\"\n          >\n            <StatusSummary\n              executorStatus={mostRecent.status}\n              counts={mostRecent.executors.reduce(\n                (acc, ex) => ({\n                  pending: acc.pending + ex.counts.pending,\n                  running: acc.running + ex.counts.running,\n                  success: acc.success + ex.counts.success,\n                  failure: acc.failure + ex.counts.failure,\n                  canceled: acc.canceled + ex.counts.canceled,\n                  acked: acc.acked + ex.counts.acked,\n                }),\n                {\n                  pending: 0,\n                  running: 0,\n                  success: 0,\n                  failure: 0,\n                  canceled: 0,\n                  acked: 0,\n                }\n              )}\n              permission={{}}\n            />\n            <span className=\"rem-c-description-list-latest-activity__date\">\n              <DateFormat type=\"relative\" date={mostRecent.updated_at} />\n            </span>\n            <Link to={`/${mostRecent.remediation_id}/${mostRecent.id}`}>\n              View\n            </Link>\n          </DescriptionList>\n        </FlexItem>\n      );\n    }\n  };\n\n  const getResolvedCount = (issues) => {\n    let count = 0;\n    issues.map((i) => i.systems.every((s) => s.resolved) && count++);\n    return count;\n  };\n\n  const { stats } = remediation;\n\n  const totalSystems = stats.systemsWithReboot + stats.systemsWithoutReboot;\n\n  const resolvedCount = getResolvedCount(remediation.issues);\n\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{\n            x: 'Resolved',\n            y: (resolvedCount / remediation.issues.length) * 100,\n          }}\n          labels={({ data }) => (data.x ? `${data.x}: ${data.y}%` : null)}\n          title={`${resolvedCount}/${remediation.issues.length}`}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      {pluralize(totalSystems, 'system')}\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  {playbookRuns && renderLatestActivity(playbookRuns)}\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>{renderAutoReboot(remediation)}</StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRemediationSummary.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  playbookRuns: PropTypes.array,\n  switchAutoReboot: PropTypes.func.isRequired,\n  context: PropTypes.object.isRequired,\n};\n","import { useAxiosWithPlatformInterceptors } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst { API_BASE } = require('../config');\nimport { useState, useEffect, useRef } from 'react';\n\nexport const useConnectionStatus = (remediation) => {\n  const axios = useAxiosWithPlatformInterceptors();\n  const [connectedSystems, setConnectedSystems] = useState(0);\n  const [totalSystems, setTotalSystems] = useState(0);\n  const [areDetailsLoading, setAreDetailsLoading] = useState(true);\n  const [detailsError, setDetailsError] = useState();\n  const [connectedData, setConnectedData] = useState([]);\n  const mounted = useRef(false);\n  let connectedSystemCount = 0;\n  let totalSystemsCount = 0;\n  useEffect(() => {\n    mounted.current = true;\n    const fetchData = async () => {\n      try {\n        const connection_status = await axios.get(\n          `${API_BASE}/remediations/${remediation.id}/connection_status`\n        );\n        mounted.current &&\n          (connection_status.data.forEach((connected_group) => {\n            (totalSystemsCount += connected_group.system_count),\n              connected_group.connection_status === 'connected' &&\n                (connectedSystemCount = connected_group.system_count);\n          }),\n          setConnectedSystems(connectedSystemCount)),\n          setTotalSystems(totalSystemsCount),\n          setConnectedData(connection_status.data);\n      } catch (error) {\n        console.error(error);\n        setDetailsError(error?.errors[0].status || '');\n        setConnectedData(error?.errors[0].status);\n        //When backend endpoint fails, it will stop here and not continue - forever loading\n        setAreDetailsLoading(false);\n      }\n      setAreDetailsLoading(false);\n    };\n\n    remediation && fetchData();\n    return () => {\n      mounted.current = false;\n    };\n  }, [remediation]);\n\n  return [\n    connectedSystems,\n    totalSystems,\n    areDetailsLoading,\n    detailsError,\n    connectedData,\n  ];\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { useSearchParams, useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\nimport RemediationDetailsTable from '../components/RemediationDetailsTable';\nimport SystemsTable from '../components/SystemsTable/SystemsTable';\nimport RemediationActivityTable from '../components/RemediationActivityTable';\nimport RemediationDetailsDropdown from '../components/RemediationDetailsDropdown';\nimport { normalizeStatus } from '../components/statusHelper';\nimport { ExecutePlaybookButton } from '../containers/ExecuteButtons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport UpsellBanner from '../components/Alerts/UpsellBanner';\nimport ActivityTabUpsell from '../components/EmptyStates/ActivityTabUpsell';\nimport DeniedState from '../components/DeniedState';\nimport SkeletonTable from '../skeletons/SkeletonTable';\nimport '../components/Status.scss';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Split,\n  SplitItem,\n  Tabs,\n  Tab,\n} from '@patternfly/react-core';\n\nimport RemediationDetailsSkeleton from '../skeletons/RemediationDetailsSkeleton';\nimport EmptyActivityTable from '../components/EmptyStates/EmptyActivityTable';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationDetails.scss';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport { RemediationSummary } from '../components/RemediationSummary';\nimport { dispatchNotification } from '../Utilities/dispatcher';\nimport { useConnectionStatus } from '../Utilities/useConnectionStatus';\nimport { useRemediationsList } from '../Utilities/useRemediationsList';\n\nconst RemediationDetails = ({\n  selectedRemediation,\n  selectedRemediationStatus,\n  loadRemediation,\n  loadRemediationStatus,\n  switchAutoReboot,\n  playbookRuns,\n  getPlaybookRuns,\n  checkExecutable,\n  executable,\n}) => {\n  const chrome = useChrome();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const { isFedramp, isBeta } = chrome;\n  const context = useContext(PermissionContext);\n\n  const [upsellBannerVisible, setUpsellBannerVisible] = useState(\n    localStorage.getItem('remediations:bannerStatus') !== 'dismissed'\n  );\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n\n  const handleUpsellToggle = () => {\n    setUpsellBannerVisible(false);\n    localStorage.setItem('remediations:bannerStatus', 'dismissed');\n  };\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const handleTabClick = (event, tabName) =>\n    setSearchParams({\n      ...Object.fromEntries(searchParams),\n      activeTab: tabName,\n    });\n\n  useEffect(() => {\n    loadRemediation(id).catch((e) => {\n      if (e && e.response && e.response.status === 404) {\n        navigate('/');\n        return;\n      }\n\n      throw e;\n    });\n\n    if (isBeta?.()) {\n      loadRemediationStatus(id);\n    }\n    checkExecutable(id);\n  }, []);\n\n  useEffect(() => {\n    getPlaybookRuns(id);\n  }, [getPlaybookRuns]);\n\n  useEffect(() => {\n    playbookRuns;\n    if (\n      playbookRuns &&\n      playbookRuns.length &&\n      normalizeStatus(playbookRuns[0].status) === 'running'\n    ) {\n      const interval = setInterval(() => getPlaybookRuns(id), 10000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playbookRuns]);\n\n  const renderActivityState = (isEntitled, playbookRuns, remediation) => {\n    if (!isEntitled) {\n      return <ActivityTabUpsell />;\n    }\n\n    if (Array.isArray(playbookRuns) && playbookRuns.length) {\n      return (\n        <RemediationActivityTable\n          remediation={remediation}\n          playbookRuns={playbookRuns}\n        />\n      );\n    }\n\n    if (Array.isArray(playbookRuns) && !playbookRuns.length) {\n      return <EmptyActivityTable />;\n    }\n\n    return <SkeletonTable />;\n  };\n\n  const { status, remediation } = selectedRemediation;\n\n  const [\n    connectedSystems,\n    totalSystems,\n    areDetailsLoading,\n    detailsError,\n    connectedData,\n  ] = useConnectionStatus(remediation);\n\n  const remediationsList = useRemediationsList(remediation);\n\n  useEffect(() => {\n    remediation &&\n      chrome.updateDocumentTitle(\n        `${remediation.name} - Remediations - Automation`\n      );\n  }, [chrome, remediation]);\n\n  if (status !== 'fulfilled' && status !== 'rejected') {\n    return <RemediationDetailsSkeleton />;\n  }\n\n  if (status === 'rejected') {\n    return <InvalidObject />;\n  }\n\n  if (status === 'fulfilled') {\n    return context.permissions.read === false ? (\n      <DeniedState />\n    ) : (\n      <div className=\"page__remediation-details\">\n        <PageHeader>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to=\"/\"> Remediations </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive> {remediation.name} </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className=\"rem-l-level\">\n            <LevelItem>\n              <PageHeaderTitle title={remediation.name} />\n            </LevelItem>\n            <LevelItem>\n              <Split hasGutter>\n                <SplitItem>\n                  <ExecutePlaybookButton\n                    isDisabled={\n                      connectedSystems === 0 ||\n                      !context.permissions.execute ||\n                      !executable ||\n                      isFedramp\n                    }\n                    connectedSystems={connectedSystems}\n                    totalSystems={totalSystems}\n                    areDetailsLoading={areDetailsLoading}\n                    detailsError={detailsError}\n                    permissions={context.permissions.execute}\n                    remediation={remediation}\n                  ></ExecutePlaybookButton>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    isDisabled={!remediation.issues.length}\n                    variant=\"secondary\"\n                    onClick={() => {\n                      downloadPlaybook(remediation.id);\n                      dispatchNotification({\n                        title: 'Preparing playbook for download.',\n                        description:\n                          'Once complete, your download will start automatically.',\n                        variant: 'info',\n                        dismissable: true,\n                        autoDismiss: true,\n                      });\n                    }}\n                  >\n                    Download playbook\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <RemediationDetailsDropdown\n                    remediation={remediation}\n                    remediationsList={remediationsList}\n                  />\n                </SplitItem>\n              </Split>\n            </LevelItem>\n          </Level>\n          <RemediationSummary\n            remediation={remediation}\n            playbookRuns={playbookRuns}\n            switchAutoReboot={switchAutoReboot}\n            context={context}\n          />\n        </PageHeader>\n        <Main>\n          <Stack hasGutter>\n            {!executable && upsellBannerVisible && (\n              <StackItem>\n                <UpsellBanner onClose={() => handleUpsellToggle()} />\n              </StackItem>\n            )}\n            {executable && noReceptorBannerVisible && (\n              <StackItem>\n                <NoReceptorBanner onClose={() => handleNoReceptorToggle()} />\n              </StackItem>\n            )}\n            <StackItem className=\"ins-c-playbookSummary__tabs\">\n              <Tabs\n                activeKey={searchParams.get('activeTab') || 'issues'}\n                onSelect={handleTabClick}\n              >\n                <Tab eventKey={'issues'} title=\"Actions\">\n                  <RemediationDetailsTable\n                    remediation={remediation}\n                    status={selectedRemediationStatus}\n                  />\n                </Tab>\n                <Tab eventKey={'systems'} title=\"Systems\">\n                  <SystemsTable\n                    remediation={remediation}\n                    connectedData={connectedData}\n                    areDetailsLoading={areDetailsLoading}\n                  />\n                </Tab>\n                <Tab eventKey={'activity'} title=\"Activity\">\n                  {renderActivityState(executable, playbookRuns, remediation)}\n                </Tab>\n              </Tabs>\n            </StackItem>\n          </Stack>\n        </Main>\n      </div>\n    );\n  }\n};\n\nRemediationDetails.propTypes = {\n  selectedRemediation: PropTypes.object,\n  selectedRemediationStatus: PropTypes.object,\n  loadRemediation: PropTypes.func.isRequired,\n  loadRemediationStatus: PropTypes.func.isRequired,\n  switchAutoReboot: PropTypes.func.isRequired,\n  deleteRemediation: PropTypes.func.isRequired,\n  executePlaybookBanner: PropTypes.shape({\n    isVisible: PropTypes.bool,\n  }),\n  addNotification: PropTypes.func.isRequired,\n  playbookRuns: PropTypes.array,\n  getPlaybookRuns: PropTypes.func,\n  checkExecutable: PropTypes.func,\n  executable: PropTypes.object,\n};\n\nexport default connect(\n  ({\n    selectedRemediation,\n    selectedRemediationStatus,\n    executePlaybookBanner,\n    playbookRuns,\n    executable,\n  }) => ({\n    selectedRemediation,\n    selectedRemediationStatus,\n    executePlaybookBanner,\n    playbookRuns: playbookRuns.data,\n    remediation: selectedRemediation.remediation,\n    executable,\n  }),\n  (dispatch) => ({\n    loadRemediation: (id) => dispatch(actions.loadRemediation(id)),\n    loadRemediationStatus: (id) => dispatch(actions.loadRemediationStatus(id)),\n    // eslint-disable-next-line camelcase\n    switchAutoReboot: (id, auto_reboot) =>\n      dispatch(actions.patchRemediation(id, { auto_reboot })),\n    deleteRemediation: (id) => dispatch(actions.deleteRemediation(id)),\n    addNotification: (content) => dispatch(addNotification(content)),\n    getPlaybookRuns: (id) => dispatch(actions.getPlaybookRuns(id)),\n    checkExecutable: (id) => dispatch(actions.checkExecutable(id)),\n  })\n)(RemediationDetails);\n","import React, { Fragment } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Table, TableHeader } from '@patternfly/react-table/deprecated';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["getIssuePrefix","id","split","getIssueApplication","getSystemName","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","buildIssueUrl","parts","segment","app","document","baseURI","pathName","window","location","pathname","getGroup","Error","API_BASE","useRemediationsList","remediation","axios","remediationsList","setRemediationsList","useState","mounted","useRef","useEffect","current","async","nameList","get","data","error","console","fetchData","DescriptionList","title","className","children","isBold","hasGutter","needsPointer","props","descriptionListClasses","mainClasses","propTypes","calculateChecked","rows","selected","every","has","length","some","calculateSystems","issues","reduce","acc","curr","systems","forEach","host","found","find","resolution","description","resolved","rebootRequired","needs_reboot","push","fetchInventoryData","page","config","getEntities","connectedData","currSystems","filter","filters","hostnameOrId","slice","per_page","map","hasItems","updatedResults","results","result","matchedItem","item","system_ids","connection_status","executor_type","total","mergedColumns","defaultColumns","customColumns","column","invColumn","key","ResolutionStep","Component","constructor","super","this","state","resolutions","onRadioChange","setState","componentDidMount","getResolutions","value","getSelectedResolution","render","resolutionsDisplay","StackItem","Form","Radio","label","Stack","Reboot","red","name","defaultChecked","onChange","Skeleton","Split","SplitItem","Label","isFilled","isRequired","ResolutionEditButton","onResolutionSelected","isOpen","setIsOpen","resolutionStep","onClick","Modal","variant","ModalVariant","medium","onClose","actions","Button","ref","ConnectResolutionEditButton","connect","f","dispatch","ruleId","DeleteButton","dialogOpen","onButtonClicked","onDialogClose","onDelete","isDisabled","ConfirmationDialog","dialogTitle","confirmText","dialogConfirmationText","dialogMessage","defaultProps","DeleteActionsButton","remediations","Promise","all","r","afterDelete","isBeta","issueId","RemediationDetailsSystemDropdown","system","open","setOpen","deleteDialogOpen","setDeleteDialogOpen","dismissable","autoDismiss","Dropdown","onSelect","toggle","KebabToggle","onToggle","position","right","isPlain","IconInline","icon","SystemsStatusModal","setSystem","systemStatuses","setSystemStatuses","setPage","pageSize","setPageSize","filterText","setFilterText","inventory","urlBuilder","statuses","detailDropdown","generateStatus","large","isFooterLeftAligned","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","register","reducers","inventoryEntitiesReducer","items","s","onRefresh","options","onRefreshData","timestamp","Date","now","perPage","hasCheckbox","event","rowId","rowData","TableToolbar","ToolbarGroup","ToolbarItem","ConditionalFilter","type","filterValues","placeholder","e","SystemForActionButton","useDispatch","localStorage","getItem","perPageOptions","i","EmptyActions","filtered","Bullseye","EmptyState","Title","size","headingLevel","EmptyStateBody","href","resolutionDescriptionCell","url","resolutions_available","systemsForAction","SORTING_ITERATEES","RemediationDetailsTable","pagination","sorter","selector","permission","useContext","prevRemediationsCount","setPrevRemediationsCount","chrome","useChrome","setValue","reset","trim","paged","sortBy","sortDir","offset","needsReboot","cells","selectedIds","getSelectedIds","activeFiltersConfig","category","chips","bulkSelectCheck","action","PrimaryToolbar","filterConfig","_e","bulkSelect","checked","count","actionsConfig","itemCount","Table","compact","canSelectAll","transforms","sortable","permissions","write","tbodyProps","isFooter","Pagination","dropDirection","status","RemoveSystemModal","onConfirm","remediationName","appendTo","getElementsByClassName","ouiaId","Icon","RebootColumn","Fragment","issueType","advisor","vulnerabilities","IssuesColumn","sortByConfig","setSortByConfig","index","direction","sortedIssues","sortIssue","sortByIndex","isInline","reverse","cellWidth","onSort","ConnectionStatusColumn","execType","Popover","triggerAction","headerContent","bodyContent","Flex","default","spaceItems","style","textDecoration","borderBottomStyle","maxWidth","renderFunc","_","width","isStatic","ConnectionStatusCol","SystemsTableWrapper","registry","refreshRemediation","areDetailsLoading","systemsRef","getEntitiesRef","activeSystem","undefined","useSelector","entities","Map","loaded","bulkSelectorSwitch","selection","showTags","noDetail","hideFilters","tableProps","columns","_i","api","_event","_index","selectedSystems","Array","from","payload","SystemsTable","setRegistry","ReducerRegistry","Provider","store","RemediationActivityTable","playbookRuns","setRows","playbooks","to","DateFormat","date","created_at","cellFormatters","created_by","last_name","first_name","username","executorStatus","counts","executors","ex","pending","running","success","failure","canceled","acked","hasCancel","remediationId","playbookId","parent","fullWidth","executor_id","executor_name","system_count","generateRows","onCollapse","collapseRows","useVerifyName","isVerifyingName","setIsVerifyingName","setIsDisabled","timerRef","playbookNamePattern","clearTimeout","setTimeout","trimmedVal","dataHashmap","test","compareData","TextInputDialog","onCancel","onSubmit","ariaLabel","Spinner","small","FormGroup","fieldId","helperTextInvalid","isValid","TextInput","autoFocus","validated","ValidatedOptions","RemediationDetailsDropdown","onRename","renameDialogOpen","setRenameDialogOpen","navigate","confirm","isDanger","pattern","RegExp","trimmedName","ExecuteButton","isLoading","getConnectionStatus","issueCount","runRemediation","etag","remediationStatus","setEtag","detailsError","connectedSystems","totalSystems","showRefreshMessage","setShowRefreshMessage","Tooltip","minWidth","content","alignItems","color","isAriaDisabled","ExecuteModal","showRefresh","disabledStateText","ExecutePlaybookButton","connectionStatus","selectedRemediation","sources","executable","exclude","then","getEndpoint","checkExecutable","UpsellBanner","Alert","actionClose","AlertActionCloseButton","EmptyStateHeader","titleText","EmptyStateIcon","EmptyStateFooter","component","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","InputGroup","InputGroupItem","isFill","Toolbar","ToolbarContent","Tabs","activeKey","Tab","eventKey","TabTitleText","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Level","LevelItem","PageHeaderTitle","RemediationSummarySkeleton","Main","SkeletonTable","ChartDonutUtilization","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","subTitle","subTitleComponent","ChartLabel","thresholds","height","padding","bottom","left","top","FlexItem","spacer","colSpan","RemediationSummary","switchAutoReboot","context","handleRebootChange","autoReboot","generateAutoRebootStatus","auto_reboot","required","num","generateNumIssuesReboot","stats","systemsWithReboot","systemsWithoutReboot","resolvedCount","getResolvedCount","str","number","mostRecent","updated_at","remediation_id","renderLatestActivity","renderAutoReboot","RemediationDetails","selectedRemediationStatus","loadRemediation","loadRemediationStatus","getPlaybookRuns","useParams","searchParams","setSearchParams","useSearchParams","isFedramp","upsellBannerVisible","setUpsellBannerVisible","noReceptorBannerVisible","setNoReceptorBannerVisible","catch","response","interval","setInterval","clearInterval","setConnectedSystems","setTotalSystems","setAreDetailsLoading","setDetailsError","setConnectedData","connectedSystemCount","totalSystemsCount","connected_group","errors","useConnectionStatus","updateDocumentTitle","InvalidObject","read","DeniedState","execute","setItem","NoReceptorBanner","tabName","Object","fromEntries","activeTab","isEntitled","isArray","renderActivityState","deleteRemediation","executePlaybookBanner","isVisible","addNotification","centered"],"sourceRoot":""}