{"version":3,"file":"js/ExecutorDetails.1671451966870.31e07f94cde91036dfd6.js","mappings":"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","sources":["webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails/Columns.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from './SkeletonTable';\n\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardHeader className=\"rem-m-card__header-bold\">\n              <Button>Download playbook</Button>\n            </CardHeader>\n\n            <CardBody>\n              <SkeletonTable />\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon className=\"rem-c-failure\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Run failed\n      </Title>\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <Button variant=\"link\">Learn more</Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React from 'react';\nimport { renderStatus, normalizeStatus } from '../statusHelper';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\n\nconst urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\nexport default [\n  {\n    key: 'display_name',\n    title: 'Name',\n    // eslint-disable-next-line\n    renderFunc: (name, id, { fqdn }) => <div><a href={urlBuilder(id)}>{fqdn || name || id}</a></div>\n  },\n  'tags',\n  {\n    key: 'status',\n    title: 'Status',\n    // eslint-disable-next-line\n    renderFunc: (status) => (\n      <div className=\"rem-c-status-bar\">\n        {renderStatus(normalizeStatus(status))}\n      </div>\n    ),\n  },\n];\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  ToolbarItem,\n  Toolbar,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../../store/reducers';\nimport DescriptionList from '../Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../../actions';\nimport { downloadPlaybook } from '../../api';\nimport { normalizeStatus, StatusSummary } from '../statusHelper';\nimport PlaybookSystemDetails from '../SystemDetails';\nimport ExecutorDetailsSkeleton from '../../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from '../Alerts/RunFailed';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../../App';\nimport { register } from '../../store';\nimport { mergedColumns } from '../SystemsTable/helpers';\nimport columns from './Columns';\n\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  match: {\n    params: { executor_id, run_id, id },\n  },\n  remediation,\n  playbookRun,\n  playbookRunSystems,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const [executor, setExecutor] = useState({});\n  const [systems, setSystems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const [debouncedGetPlaybookRunSystems, setDebounce] = useState();\n  const inventory = useRef(null);\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        options.per_page,\n        options.per_page * (options.page - 1)\n      );\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n    setDebounce(() => AwesomeDebouncePromise(getPlaybookRunSystems, 500));\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n\n    if (playbookRunSystems.status !== 'pending') {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        pageSize,\n        pageSize * (page - 1),\n        filter\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  useEffect(() => {\n    setSystems(() =>\n      playbookRunSystems.data.map(({ system_id, system_name, status }) => ({\n        id: system_id,\n        display_name: system_name,\n        status,\n        isOpen: openId === system_id,\n        children: <PlaybookSystemDetails systemId={system_id} />,\n      }))\n    );\n  }, [playbookRunSystems]);\n\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              columns={mergedColumns(columns)}\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                    })()\n                  ),\n                })\n              }\n              items={playbookRunSystems.status !== 'pending' ? systems : []}\n              isLoaded={playbookRunSystems.status !== 'pending'}\n              onRefresh={onRefresh}\n              page={page}\n              total={playbookRunSystems.meta.total}\n              perPage={pageSize}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n            >\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <ConditionalFilter\n                      items={[\n                        {\n                          value: 'display_name',\n                          label: 'Name',\n                          filterValues: {\n                            placeholder: 'Filter by name',\n                            type: conditionalFilterType.text,\n                            value: filter,\n                            onChange: (e, selected) => {\n                              setFilter(selected);\n                              setPage(1);\n                              debouncedGetPlaybookRunSystems(\n                                id,\n                                run_id,\n                                executor_id,\n                                pageSize,\n                                0,\n                                selected\n                              );\n                            },\n                          },\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => downloadPlaybook(remediation.id)}\n                    >\n                      Download playbook\n                    </Button>\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </InventoryTable>\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  match: PropTypes.object,\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystems: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystems: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystems,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    playbookRunSystems,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystems: (\n      remediationId,\n      runId,\n      executorId,\n      limit,\n      offset,\n      ansibleHost\n    ) =>\n      dispatch(\n        getPlaybookRunSystems(\n          remediationId,\n          runId,\n          executorId,\n          limit,\n          offset,\n          ansibleHost\n        )\n      ),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n"],"names":["RemediationsLogViewer","data","LogViewer","toolbar","Toolbar","ToolbarContent","ToolbarItem","LogViewerSearch","placeholder","propTypes","PropTypes","SyntaxHighlighter","yaml","PlaybookSystemDetails","systemId","playbookRunSystemDetails","Title","headingLevel","size","className","system_id","console","status","Spinner","Skeleton","defaultProps","connect","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Stack","hasGutter","StackItem","PageHeaderTitle","title","Split","SplitItem","DescriptionList","Main","Card","CardHeader","Button","CardBody","SkeletonTable","RunFailed","name","Bullseye","EmptyState","EmptyStateIcon","icon","ExclamationCircleIcon","EmptyStateBody","variant","urlBuilder","inventoryUrlBuilder","id","key","renderFunc","fqdn","href","renderStatus","normalizeStatus","refreshInterval","ExecutorDetails","match","params","executor_id","run_id","remediation","playbookRun","playbookRunSystems","getPlaybookRun","getPlaybookRunSystems","getPlaybookRunSystemDetails","onCollapseInventory","loadRemediation","useState","executor","setExecutor","systems","setSystems","filter","setFilter","page","setPage","pageSize","setPageSize","openId","setOpenId","firstExpand","setFirstExpand","debouncedGetPlaybookRunSystems","setDebounce","inventory","useRef","onRefresh","options","current","per_page","onRefreshData","useEffect","AwesomeDebouncePromise","clearInterval","executors","find","map","display_name","system_name","isOpen","children","renderInventorycard","InventoryTable","ref","columns","mergedColumns","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","register","reducers","items","isLoaded","total","meta","perPage","hasCheckbox","expandable","showTags","onExpandClick","_e","_i","setInterval","undefined","ConditionalFilter","value","label","filterValues","type","conditionalFilterType","onChange","e","selected","onClick","downloadPlaybook","permission","useContext","PermissionContext","Link","to","DateFormat","date","created_at","executor_name","InProgressIcon","executorStatus","counts","created_by","first_name","last_name","running","success","failure","canceled","epicFailure","playbookRuns","selectedRemediation","dispatch","getPlaybookRuns","runId","remediationId","executorId","limit","offset","ansibleHost","expandInventoryTable"],"sourceRoot":""}