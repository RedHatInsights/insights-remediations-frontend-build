{"version":3,"file":"js/8521.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/actions.js","webpack:///./src/components/statusHelper.js","webpack:///./src/components/Modals/WarningModal.js","webpack:///./src/containers/CancelButton.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () =>\n  window.location.pathname\n    .split('/')\n    .filter((s) => s !== 'preview' && s.length > 0)\n    .shift();\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'preview' ? 'preview/' : '';\n};\n\nexport const getBaseUri = () =>\n  `${document.baseURI.replace('preview/', '')}${getEnvUrl()}`;\n\nexport const remediationUrl = (id) =>\n  `${getBaseUri()}${getGroup()}/remediations${id ? `/${id}` : ''}`;\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>Required</div>\n            ) : (\n              <div>Not required</div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              allSystemsNamed: allSystemsNamed.filter((system) =>\n                curr.systems.includes(system.id)\n              ),\n              allSystems: curr.systems,\n              cells: [\n                {\n                  title: (\n                    <Bullseye>\n                      <Spinner />\n                    </Bullseye>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nconst buildSystemRow = (allSystemsNamed = [], allSystems = []) => (\n  <SystemsTableWithContext\n    allSystemsNamed={allSystemsNamed}\n    allSystems={allSystems}\n    disabledColumns={['updated']}\n  />\n);\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  temp[rowKey + 1].cells = [\n    {\n      title: buildSystemRow(\n        rows[rowKey + 1].allSystemsNamed,\n        rows[rowKey + 1].allSystems\n      ),\n    },\n  ];\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id: existing_id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        existing_id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK].trim(),\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    // watch out, id is only returned from createRemediation endpoint,\n    // not patchRemediation, thus we use existing_id as well\n    .then(({ id }) => {\n      setState({ id: id ?? existing_id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(\n            id ?? existing_id,\n            formValues[SELECT_PLAYBOOK],\n            !isUpdate\n          ),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems, sortBy) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n  return {\n    ...state,\n    selected,\n    rows: sortByAttr(\n      state.rows.map(({ id, ...row }) => ({\n        id,\n        ...row,\n        selected: !!selected?.includes(id),\n      })),\n      'display_name',\n      sortBy?.direction || 'asc'\n    ),\n    sortBy,\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const sortByAttr = (systems, attribute, direction) =>\n  Array.isArray(systems)\n    ? systems.sort(\n        (a, b) =>\n          ((a[attribute] > b[attribute] && 1) || -1) *\n          (direction === 'asc' ? 1 : -1)\n      )\n    : [];\n\nexport const fetchSystemsInfo = async (\n  config,\n  sortableColumns = [],\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const isSortingValid = sortableColumns.includes(config.orderBy);\n  config.orderBy = isSortingValid ? config.orderBy : undefined;\n  config.orderDirection = isSortingValid\n    ? config.orderDirection?.toLowerCase()\n    : undefined;\n  allSystemsNamed = sortByAttr(allSystemsNamed, 'name', config.orderDirection);\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ? [curr.id] : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(\n          sliced,\n          {\n            ...config,\n            fields: { system_profile: ['operating_system', 'bootc_status'] },\n            hasItems: true,\n            page: 1,\n          },\n          true\n        )\n      : {};\n  return {\n    ...{\n      ...data,\n      results: sortByAttr(data.results, 'display_name', config.orderDirection),\n    },\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n    orderBy: config.orderBy,\n    orderDirection: config.orderDirection,\n    sortBy: { key: config.orderBy, direction: config.orderDirection },\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state, { payload }) =>\n      loadEntitiesFulfilled(state, allSystems, {\n        key: payload.orderBy,\n        direction: payload.orderDirection,\n      }),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), ...systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n\nexport const matchPermissions = (permissionA, permissionB) => {\n  const segmentsA = permissionA.split(':');\n  const segmentsB = permissionB.split(':');\n\n  if (segmentsA.length !== segmentsB.length) {\n    return false;\n  }\n\n  return segmentsA.every(\n    (segmentA, index) =>\n      segmentA === segmentsB[index] ||\n      segmentA === '*' ||\n      segmentsB[index] === '*'\n  );\n};\n\nexport const getResolvedSystems = (issue) => {\n  let count = 0;\n  issue.systems.map((system) => {\n    if (system.resolved) {\n      count++;\n    }\n  });\n  return count;\n};\n","import { ACTION_TYPES } from './constants';\nimport {\n  remediations,\n  resolutions,\n  getRemediationStatus,\n  sources,\n  deleteSystemsFromRemediation,\n} from './api';\n\nexport const loadRemediations = (\n  sortBy = 'updated_at',\n  sortDir = 'desc',\n  filter,\n  limit,\n  offset,\n  system,\n  hideArchived\n) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATIONS,\n  payload: remediations.getRemediations(\n    `${sortDir === 'desc' ? '-' : ''}${sortBy}`,\n    filter,\n    limit,\n    offset,\n    system,\n    hideArchived\n  ),\n});\n\nexport const loadRemediation = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const loadRemediationStatus = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION_STATUS,\n  payload: getRemediationStatus(id), // TODO\n});\n\nexport const refreshRemediation = (id) => ({\n  type: ACTION_TYPES.REFRESH_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const createRemediation = (data) => ({\n  type: ACTION_TYPES.CREATE_REMEDIATIONS,\n  payload: remediations.createRemediation(data),\n});\n\nexport const patchRemediation = (id, data) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION,\n  payload: remediations.updateRemediation(id, data).then(() => data),\n});\n\nexport const deleteRemediation = (id) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION,\n  payload: remediations.deleteRemediation(id),\n});\n\nexport const deleteRemediations = (ids) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION,\n  payload: remediations.deleteRemediations(ids),\n});\n\nexport const deleteRemediationIssue = (id, issueId) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE,\n  payload: remediations\n    .deleteRemediationIssue(id, issueId)\n    .then(() => ({ id, issueId })),\n});\n\nexport const deleteRemediationIssueSystem = (id, issue, system) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM,\n  payload: remediations\n    .deleteRemediationIssueSystem(id, issue, system)\n    .then(() => ({ id, issue, system })),\n});\n\nexport const patchRemediationIssue = (id, issue, resolution) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION_ISSUE,\n  payload: remediations.updateRemediationIssue(id, issue, { resolution }),\n});\n\nexport const getResolutions = (ruleId) => ({\n  type: ACTION_TYPES.GET_RESOLUTIONS,\n  payload: resolutions.getResolutionsForIssue(ruleId),\n});\n\nexport const getConnectionStatus = (id) => {\n  return {\n    type: ACTION_TYPES.GET_CONNECTION_STATUS,\n    payload: remediations.getRemediationConnectionStatus(id),\n  };\n};\n\nexport const runRemediation = (id, etag, exclude) => {\n  return {\n    type: ACTION_TYPES.RUN_REMEDIATION,\n    payload: remediations.runRemediation(id, {\n      headers: { 'If-Match': etag },\n      data: { exclude },\n    }),\n  };\n};\n\nexport const setEtag = (etag) => ({\n  type: ACTION_TYPES.SET_ETAG,\n  payload: { etag },\n});\n\nexport const getPlaybookRuns = (remediationId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUNS,\n  payload: remediations.listPlaybookRuns(remediationId),\n});\n\nexport const cancelPlaybookRuns = (remediationId, runId) => ({\n  type: ACTION_TYPES.CANCEL_PLAYBOOK_RUNS,\n  payload: remediations.cancelPlaybookRuns(remediationId, runId),\n});\n\nexport const getPlaybookRun = (remediationId, runId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN,\n  payload: remediations.getPlaybookRunDetails(remediationId, runId),\n});\n\nexport const getPlaybookRunSystems = (\n  remediationId,\n  runId,\n  executorId,\n  limit = 50,\n  offset = 0,\n  ansibleHost\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS,\n  payload: remediations.getPlaybookRunSystems(\n    remediationId,\n    runId,\n    executorId,\n    limit,\n    offset,\n    ansibleHost\n  ),\n});\n\nexport const getPlaybookRunSystemDetails = (\n  remediationId,\n  runId,\n  systemId\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS,\n  payload: remediations.getPlaybookRunSystemDetails(\n    remediationId,\n    runId,\n    systemId\n  ),\n});\n\nexport const expandInventoryTable = (id, isOpen) => ({\n  type: ACTION_TYPES.EXPAND_INVENTORY_TABLE,\n  payload: {\n    id,\n    isOpen,\n  },\n});\n\nexport const getEndpoint = (id, options = {}) => ({\n  type: ACTION_TYPES.GET_ENDPOINT,\n  payload: sources.showEndpoint(id, options),\n});\n// payload: sources.listEndpoints(id, options)\n\nexport const selectEntity = (id, selected) => ({\n  type: ACTION_TYPES.SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const deleteSystems = (systems, remediation) => ({\n  type: ACTION_TYPES.DELTE_SYSTEMS,\n  payload: deleteSystemsFromRemediation(systems, remediation),\n});\n\nexport const checkExecutable = (id) => ({\n  type: ACTION_TYPES.CHECK_EXECUTABLE,\n  payload: remediations.checkExecutable(id),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  SyncIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\n\nimport { CancelButton } from '../containers/CancelButton';\n\nimport { capitalize } from '../Utilities/utils';\n\nconst connectorUrl = (isBeta) =>\n  isBeta\n    ? `${window.location.origin}/preview/settings/connector`\n    : `${window.location.origin}/settings/connector`;\n\nexport const normalizeStatus = (status) =>\n  ({\n    running: 'running',\n    pending: 'running',\n    acked: 'running',\n    failure: 'failure',\n    canceled: 'canceled',\n    success: 'success',\n  }[status]);\n\nexport const renderStatusIcon = (status) =>\n  ({\n    running: (\n      <InProgressIcon\n        className=\"rem-c-running\"\n        aria-label=\"connection status\"\n      />\n    ),\n    success: (\n      <CheckCircleIcon\n        className=\"rem-c-success\"\n        aria-label=\"connection status\"\n      />\n    ),\n    failure: (\n      <TimesCircleIcon\n        className=\"rem-c-failure\"\n        aria-label=\"connection status\"\n      />\n    ),\n    canceled: (\n      <TimesCircleIcon\n        className=\"rem-c-canceled\"\n        aria-label=\"connection status\"\n      />\n    ),\n  }[status]);\n\nexport const renderStatus = (status, text) =>\n  ({\n    running: (\n      <Flex className=\"rem-c-running\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Running'}</b>\n        </FlexItem>\n        <FlexItem>\n          <InProgressIcon aria-label=\"connection status: running\" />\n        </FlexItem>\n      </Flex>\n    ),\n    success: (\n      <Flex className=\"rem-c-success\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Success'}</b>\n        </FlexItem>\n        <FlexItem>\n          <CheckCircleIcon aria-label=\"connection status: success\" />\n        </FlexItem>\n      </Flex>\n    ),\n    failure: (\n      <Flex className=\"rem-c-failure\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Failed'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: failed\" />\n        </FlexItem>\n      </Flex>\n    ),\n    canceled: (\n      <Flex className=\"rem-c-canceled\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Canceled'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: canceled\" />\n        </FlexItem>\n      </Flex>\n    ),\n  }[status]);\n\nconst statusTextClass = 'rem-c-status-text';\nexport const statusText = (executorStatus) =>\n  ({\n    running: <b className={`${statusTextClass} rem-c-running`}>Running</b>,\n    pending: <b className={`${statusTextClass} rem-c-running`}>Pending</b>,\n    acked: <b className={`${statusTextClass} rem-c-running`}> Acked </b>,\n    success: <b className={`${statusTextClass} rem-c-success`}>Succeeded</b>,\n    failure: <b className={`${statusTextClass} rem-c-failure`}>Failed</b>,\n    canceled: <b className={`${statusTextClass} rem-c-canceled`}>Canceled</b>,\n  }[executorStatus]);\n\nexport const pluralize = (number, str) =>\n  number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\nexport const StatusSummary = ({\n  executorStatus,\n  permission,\n  hasCancel,\n  counts,\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const runningCount =\n    counts.acked && !counts.acked.isNaN()\n      ? counts.running + counts.pending + counts.acked\n      : counts.running + counts.pending;\n  const failCount = counts.failure + counts.canceled;\n  const passCount = counts.success;\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  const statusBar = (\n    <Flex className=\"rem-c-status-bar\">\n      {executorStatus && <FlexItem>{statusText(executorStatus)}</FlexItem>}\n      <FlexItem>{renderStatus('success', `${passCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('failure', `${failCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('running', `${runningCount}`)}</FlexItem>\n      {isDebug() &&\n        hasCancel &&\n        permission.permissions.execute &&\n        executorStatus &&\n        normalizeStatus(executorStatus) === 'running' && (\n          <FlexItem>\n            <CancelButton\n              remediationName={remediationName}\n              remediationId={remediationId}\n              playbookId={playbookId}\n            />\n          </FlexItem>\n        )}\n    </Flex>\n  );\n\n  if (executorStatus) {\n    return (\n      <Tooltip\n        position=\"right\"\n        className=\"ins-c-status-tooltip\"\n        enableFlip\n        content={\n          <div>\n            Run: {capitalize(executorStatus)} <br />\n            Success: {pluralize(counts.success, 'system')} <br />\n            Failed: {pluralize(counts.failure, 'system')} <br />\n            Canceled: {pluralize(counts.canceled, 'system')} <br />\n            {counts.acked && !counts.acked.isNaN()\n              ? `Pending, Running, Acked: ${pluralize(\n                  counts.pending + counts.running + counts.acked,\n                  'system'\n                )}`\n              : `Pending, Running: ${pluralize(\n                  counts.pending + counts.running,\n                  'system'\n                )}`}\n          </div>\n        }\n      >\n        {statusBar}\n      </Tooltip>\n    );\n  }\n\n  return statusBar;\n};\n\nStatusSummary.propTypes = {\n  executorStatus: PropTypes.string,\n  permission: PropTypes.object,\n  hasCancel: PropTypes.bool,\n  counts: PropTypes.object,\n  remediationName: PropTypes.string,\n  remediationId: PropTypes.string,\n  playbookId: PropTypes.string,\n};\n\nexport const styledConnectionStatus = (status, isBeta) =>\n  ({\n    connected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <CheckCircleIcon\n            className=\"rem-c-reboot-check-circle rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Ready\n        </Text>\n      </TextContent>\n    ),\n    disconnected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Connection issue\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Receptor not responding\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"troubleshoot\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Troubleshoot\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_executor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Direct connection.\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Connect your systems to Satellite to automatically remediate.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/index\"\n          >\n            Learn how to connect &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_source: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Satellite not configured\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Satellite not registered for Playbook execution\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"configure\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Learn how to register Satellite\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_receptor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <ExclamationCircleIcon\n            className=\"rem-c-failure rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Configure Cloud connector to automatically remediate\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_rhc: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl(isBeta)}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    disabled: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl(isBeta)}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/red_hat_insights_remediations_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    loading: (\n      <TextContent>\n        <Text component={TextVariants.small}>\n          <SyncIcon\n            className=\"rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Checking\n        </Text>\n      </TextContent>\n    ),\n  }[status]);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Title,\n  Icon,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './WarningModal.scss';\n\nexport const WarningModal = ({ isOpen, onModalCancel, onConfirmCancel }) => (\n  <Modal\n    header={\n      <Title\n        headingLevel=\"h1\"\n        size=\"2xl\"\n        className=\"ins-c-modal__cancel-run-warning-header\"\n      >\n        <Icon\n          size=\"md\"\n          className=\"ins-c-modal__cancel-run-warning-header--icon\"\n        >\n          <ExclamationTriangleIcon />\n        </Icon>\n        Cancel remediation process\n      </Title>\n    }\n    title=\"Cancel remediation process\"\n    hideTitle\n    variant={ModalVariant.small}\n    className=\"ins-c-modal__cancel-run-warning\"\n    isOpen={isOpen}\n    onClose={onModalCancel}\n    actions={[\n      <Button\n        key=\"confirm\"\n        variant=\"danger\"\n        ouiaId=\"cancel_playbook\"\n        onClick={onConfirmCancel}\n      >\n        Cancel playbook process\n      </Button>,\n      <Button\n        key=\"cancel\"\n        variant=\"link\"\n        ouiaId=\"cancel\"\n        onClick={onModalCancel}\n      >\n        Cancel\n      </Button>,\n    ]}\n    isFooterLeftAligned\n  >\n    <span>\n      Canceling a running playbook process only affects pending and running\n      tasks. It does not affect any previously succeeded or failed tasks that\n      have already run.\n    </span>\n  </Modal>\n);\n\nWarningModal.propTypes = {\n  type: PropTypes.string,\n  isOpen: PropTypes.bool,\n  onModalCancel: PropTypes.func,\n  onConfirmCancel: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport { WarningModal } from '../components/Modals/WarningModal';\n\nimport { useDispatch } from 'react-redux';\nimport { cancelPlaybookRuns } from '../actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const CancelButton = ({\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const [cancelWarningVisible, setcancelWarningVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const cancelRun = (remediationName, remediationId, playbookId) => {\n    dispatch(cancelPlaybookRuns(remediationId, playbookId));\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title: `Canceling playbook ${remediationName} successful`,\n        dismissDelay: 8000,\n        dismissable: false,\n      })\n    );\n    setcancelWarningVisible(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"link\" onClick={() => setcancelWarningVisible(true)}>\n        Cancel process\n      </Button>\n      <WarningModal\n        isOpen={cancelWarningVisible}\n        onModalCancel={() => setcancelWarningVisible(false)}\n        onConfirmCancel={() =>\n          cancelRun(remediationName, remediationId, playbookId)\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nCancelButton.propTypes = {\n  remediationName: PropTypes.string,\n  remediationId: PropTypes.string,\n  playbookId: PropTypes.string,\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n  const sortableColumns = ['display_name'];\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.reduce(\n          (acc, curr) => [\n            ...acc,\n            ...(!disabledColumns.includes(curr.key)\n              ? [\n                  {\n                    ...curr,\n                    props: {\n                      ...(curr.props || {}),\n                      isStatic: !sortableColumns.includes(curr.key),\n                    },\n                  },\n                ]\n              : []),\n          ],\n          []\n        )\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(\n          config,\n          sortableColumns,\n          allSystemsNamed,\n          defaultGetEntities\n        )\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"names":["capitalize","string","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","document","baseURI","replace","filter","s","length","shift","dedupeArray","array","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","isOpen","cells","title","action","Fragment","resolution","alternate","needsReboot","systems","props","parent","fullWidth","system","includes","allSystems","Bullseye","Spinner","colSpan","className","buildSystemRow","disabledColumns","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","issueResolutions","find","r","resolutions","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","playbookSystems","issue","interval","setInterval","add","existing_id","isUpdate","auto_reboot","name","trim","then","onRemediationCreated","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","catch","failed","finally","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","sortByAttr","attribute","Array","isArray","fetchSystemsInfo","async","config","sortableColumns","getEntities","isSortingValid","orderBy","undefined","orderDirection","toLowerCase","hostnameOrId","filters","sliced","page","per_page","fields","system_profile","hasItems","results","total","sortBy","splitArray","inputArray","perChunk","Math","ceil","_item","inventoryEntitiesReducer","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","rowsIds","item","entitySelected","loadEntitiesFulfilled","shortenIssueId","getIssuesMultiple","needs_reboot","record","matchPermissions","permissionA","permissionB","segmentsA","segmentsB","every","segmentA","getResolvedSystems","resolved","loadRemediations","sortDir","limit","offset","hideArchived","type","LOAD_REMEDIATIONS","getRemediations","loadRemediation","LOAD_REMEDIATION","getRemediation","loadRemediationStatus","LOAD_REMEDIATION_STATUS","refreshRemediation","REFRESH_REMEDIATION","patchRemediation","PATCH_REMEDIATION","updateRemediation","deleteRemediation","DELETE_REMEDIATION","deleteRemediations","ids","deleteRemediationIssue","DELETE_REMEDIATION_ISSUE","deleteRemediationIssueSystem","DELETE_REMEDIATION_ISSUE_SYSTEM","patchRemediationIssue","PATCH_REMEDIATION_ISSUE","updateRemediationIssue","getResolutions","ruleId","GET_RESOLUTIONS","getResolutionsForIssue","getConnectionStatus","GET_CONNECTION_STATUS","getRemediationConnectionStatus","runRemediation","etag","exclude","RUN_REMEDIATION","headers","setEtag","SET_ETAG","getPlaybookRuns","remediationId","GET_PLAYBOOK_RUNS","listPlaybookRuns","cancelPlaybookRuns","runId","CANCEL_PLAYBOOK_RUNS","getPlaybookRun","GET_PLAYBOOK_RUN","getPlaybookRunDetails","getPlaybookRunSystemDetails","systemId","GET_PLAYBOOK_RUN_SYSTEM_DETAILS","expandInventoryTable","EXPAND_INVENTORY_TABLE","getEndpoint","options","GET_ENDPOINT","showEndpoint","selectEntity","deleteSystems","DELTE_SYSTEMS","checkExecutable","CHECK_EXECUTABLE","connectorUrl","isBeta","origin","normalizeStatus","status","running","pending","acked","failure","canceled","success","renderStatus","text","Flex","spacer","default","FlexItem","statusTextClass","number","StatusSummary","executorStatus","permission","hasCancel","counts","remediationName","playbookId","runningCount","isNaN","failCount","passCount","statusBar","statusText","localStorage","getItem","permissions","execute","Tooltip","position","enableFlip","content","propTypes","styledConnectionStatus","connected","TextContent","Text","component","TextVariants","p","disconnected","small","style","margin","no_executor","Button","no_source","no_receptor","no_rhc","disabled","loading","WarningModal","onModalCancel","onConfirmCancel","Modal","header","Title","headingLevel","size","Icon","hideTitle","ModalVariant","onClose","actions","ouiaId","onClick","isFooterLeftAligned","CancelButton","cancelWarningVisible","setcancelWarningVisible","useState","dispatch","useDispatch","dismissDelay","cancelRun","SystemsTable","registry","hasCheckbox","bulkSelect","inventory","useRef","hideFilters","tags","registeredWith","stale","columns","isStatic","noDetail","showTags","ref","_i","defaultGetEntities","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","register","tableProps","canSelectAll","defaultProps","isRequired","SystemsTableWithContext","setRegistry","useEffect","store","Provider"],"sourceRoot":""}