{"version":3,"file":"js/ExecutorDetails.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails/Columns.js","webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.js","webpack:///./src/components/ExecutorDetails/helpers.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'preview') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport {\n  Card,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Bullseye,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateHeader\n        titleText=\"Run failed\"\n        icon={\n          <EmptyStateIcon\n            className=\"rem-c-failure\"\n            icon={ExclamationCircleIcon}\n          />\n        }\n        headingLevel=\"h5\"\n      />\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <EmptyStateFooter>\n        <Button variant=\"link\">Learn more</Button>\n      </EmptyStateFooter>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React from 'react';\nimport { renderStatus, normalizeStatus } from '../statusHelper';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\n\nconst urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\nexport default [\n  {\n    key: 'display_name',\n    title: 'Name',\n    // eslint-disable-next-line\n    renderFunc: (name, id, { fqdn }) => <div><a href={urlBuilder(id)}>{fqdn || name || id}</a></div>\n  },\n  {\n    key: 'tags',\n  },\n  {\n    key: 'status',\n    title: 'Status',\n    // eslint-disable-next-line\n    renderFunc: (status) => (\n      <div className=\"rem-c-status-bar\">\n        {renderStatus(normalizeStatus(status))}\n      </div>\n    ),\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { useParams } from 'react-router-dom';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../../store/reducers';\nimport DescriptionList from '../Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../../actions';\nimport { downloadPlaybook } from '../../api';\nimport { normalizeStatus, StatusSummary } from '../statusHelper';\nimport ExecutorDetailsSkeleton from '../../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from '../Alerts/RunFailed';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../../App';\nimport { register } from '../../store';\nimport { mergedColumns } from '../SystemsTable/helpers';\nimport columns from './Columns';\nimport { useGetEntities } from './helpers';\n\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  remediation,\n  playbookRun,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const { executor_id, run_id, id } = useParams();\n  const [executor, setExecutor] = useState({});\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const inventory = useRef(null);\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  const getEntites = useGetEntities({ id, run_id, executor_id, openId });\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              columns={(defaultColumns) =>\n                mergedColumns(defaultColumns, columns)\n              }\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                    })()\n                  ),\n                })\n              }\n              getEntities={getEntites}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n              actionsConfig={{\n                actions: [\n                  <Button\n                    key=\"download-playbook\"\n                    variant=\"secondary\"\n                    onClick={() => downloadPlaybook([remediation.id])}\n                  >\n                    Download playbook\n                  </Button>,\n                ],\n              }}\n              hideFilters={{ all: true, name: false }}\n            />\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n","import React from 'react';\nimport PlaybookSystemDetails from '../SystemDetails';\nimport { remediations } from '../../api';\n\nexport const useGetEntities = (config) => {\n  const { id, run_id, executor_id, openId } = config || {};\n\n  const getEntities = async (\n    _items,\n    { page, per_page: perPage, filters: { hostnameOrId } }\n  ) => {\n    const playbookRunSystems = await remediations.getPlaybookRunSystems(\n      id,\n      run_id,\n      executor_id,\n      perPage,\n      perPage * (page - 1),\n      hostnameOrId\n    );\n\n    return {\n      results: playbookRunSystems.data.map(\n        ({ system_id, system_name, status }) => ({\n          id: system_id,\n          display_name: system_name,\n          status,\n          isOpen: openId === system_id,\n          children: <PlaybookSystemDetails systemId={system_id} />,\n        })\n      ),\n      total: playbookRunSystems.meta?.total,\n    };\n  };\n\n  return getEntities;\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities,\n  connectedData\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n\n  const updatedResults = data.results.map((result) => {\n    const systemId = result.id;\n    const matchedItem =\n      connectedData !== 403 &&\n      connectedData.find((item) => item.system_ids.includes(systemId));\n    if (matchedItem) {\n      return {\n        ...result,\n        connection_status: matchedItem.connection_status,\n        executor_type: matchedItem.executor_type,\n      };\n    } else {\n      return result;\n    }\n  });\n\n  return {\n    ...data,\n    page,\n    results: updatedResults.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns = (defaultColumns = [], customColumns = []) => {\n  return customColumns.map((column) => {\n    const inventoryColumn = defaultColumns.find(\n      (invColumn) => invColumn.key === column.key\n    );\n\n    return inventoryColumn || column;\n  });\n};\n"],"names":["getIssuePrefix","id","split","getIssueApplication","getSystemName","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","buildIssueUrl","parts","segment","app","document","baseURI","pathName","window","location","pathname","getGroup","Error","PageHeader","Breadcrumb","BreadcrumbItem","Skeleton","size","isActive","Stack","hasGutter","StackItem","PageHeaderTitle","title","Split","SplitItem","DescriptionList","className","Main","Card","CardBody","Bullseye","Spinner","RunFailed","name","EmptyState","EmptyStateHeader","titleText","icon","EmptyStateIcon","headingLevel","EmptyStateBody","EmptyStateFooter","Button","variant","propTypes","urlBuilder","key","renderFunc","fqdn","href","status","RemediationsLogViewer","data","toolbar","Toolbar","ToolbarContent","ToolbarItem","placeholder","registerLanguage","yaml","PlaybookSystemDetails","playbookRunSystemDetails","Title","system_id","console","defaultProps","connect","refreshInterval","ExecutorDetails","remediation","playbookRun","getPlaybookRun","getPlaybookRunSystemDetails","onCollapseInventory","loadRemediation","executor_id","run_id","useParams","executor","setExecutor","useState","openId","setOpenId","firstExpand","setFirstExpand","inventory","useRef","useEffect","clearInterval","executors","find","getEntites","config","async","_items","page","per_page","perPage","filters","hostnameOrId","playbookRunSystems","getPlaybookRunSystems","results","map","system_name","isOpen","children","total","meta","useGetEntities","renderInventorycard","InventoryTable","ref","columns","defaultColumns","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","reducers","playbookActivityIntentory","getEntities","hasCheckbox","expandable","showTags","onExpandClick","_e","_i","setInterval","undefined","actionsConfig","actions","onClick","hideFilters","all","permission","useContext","to","DateFormat","type","date","created_at","executor_name","executorStatus","counts","created_by","first_name","last_name","running","success","failure","canceled","epicFailure","CardHeader","playbookRuns","selectedRemediation","dispatch","getPlaybookRuns","runId","remediationId","isBold","needsPointer","props","descriptionListClasses","mainClasses","calculateChecked","rows","selected","every","has","length","some","calculateSystems","issues","reduce","acc","curr","systems","forEach","host","found","resolution","description","resolved","rebootRequired","needs_reboot","push","fetchInventoryData","connectedData","currSystems","filter","slice","hasItems","updatedResults","result","matchedItem","item","system_ids","connection_status","executor_type","mergedColumns","customColumns","column","invColumn"],"sourceRoot":""}