{"version":3,"file":"js/ExecutorDetails.f5448e3bd8067eef9ed6.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails/Columns.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'preview') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from './SkeletonTable';\n\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardHeader className=\"rem-m-card__header-bold\">\n              <Button>Download playbook</Button>\n            </CardHeader>\n\n            <CardBody>\n              <SkeletonTable />\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon className=\"rem-c-failure\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Run failed\n      </Title>\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <Button variant=\"link\">Learn more</Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React from 'react';\nimport { renderStatus, normalizeStatus } from '../statusHelper';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\n\nconst urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\nexport default [\n  {\n    key: 'display_name',\n    title: 'Name',\n    // eslint-disable-next-line\n    renderFunc: (name, id, { fqdn }) => <div><a href={urlBuilder(id)}>{fqdn || name || id}</a></div>\n  },\n  {\n    key: 'tags',\n  },\n  {\n    key: 'status',\n    title: 'Status',\n    // eslint-disable-next-line\n    renderFunc: (status) => (\n      <div className=\"rem-c-status-bar\">\n        {renderStatus(normalizeStatus(status))}\n      </div>\n    ),\n  },\n];\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { useParams } from 'react-router-dom';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  ToolbarItem,\n  Toolbar,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../../store/reducers';\nimport DescriptionList from '../Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../../actions';\nimport { downloadPlaybook } from '../../api';\nimport { normalizeStatus, StatusSummary } from '../statusHelper';\nimport PlaybookSystemDetails from '../SystemDetails';\nimport ExecutorDetailsSkeleton from '../../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from '../Alerts/RunFailed';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../../App';\nimport { register } from '../../store';\nimport { mergedColumns } from '../SystemsTable/helpers';\nimport columns from './Columns';\n\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  remediation,\n  playbookRun,\n  playbookRunSystems,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const { executor_id, run_id, id } = useParams();\n  const [executor, setExecutor] = useState({});\n  const [systems, setSystems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const [debouncedGetPlaybookRunSystems, setDebounce] = useState();\n  const inventory = useRef(null);\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        options.per_page,\n        options.per_page * (options.page - 1)\n      );\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n    setDebounce(() => AwesomeDebouncePromise(getPlaybookRunSystems, 500));\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n\n    if (playbookRunSystems.status !== 'pending') {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        pageSize,\n        pageSize * (page - 1),\n        filter\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  useEffect(() => {\n    setSystems(() =>\n      playbookRunSystems.data.map(({ system_id, system_name, status }) => ({\n        id: system_id,\n        display_name: system_name,\n        status,\n        isOpen: openId === system_id,\n        children: <PlaybookSystemDetails systemId={system_id} />,\n      }))\n    );\n  }, [playbookRunSystems]);\n\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              columns={(defaultColumns) =>\n                mergedColumns(defaultColumns, columns)\n              }\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                    })()\n                  ),\n                })\n              }\n              items={playbookRunSystems.status !== 'pending' ? systems : []}\n              isLoaded={playbookRunSystems.status !== 'pending'}\n              onRefresh={onRefresh}\n              page={page}\n              total={playbookRunSystems.meta.total}\n              perPage={pageSize}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n            >\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <ConditionalFilter\n                      items={[\n                        {\n                          value: 'display_name',\n                          label: 'Name',\n                          filterValues: {\n                            placeholder: 'Filter by name',\n                            type: conditionalFilterType.text,\n                            value: filter,\n                            onChange: (e, selected) => {\n                              setFilter(selected);\n                              setPage(1);\n                              debouncedGetPlaybookRunSystems(\n                                id,\n                                run_id,\n                                executor_id,\n                                pageSize,\n                                0,\n                                selected\n                              );\n                            },\n                          },\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => downloadPlaybook(remediation.id)}\n                    >\n                      Download playbook\n                    </Button>\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </InventoryTable>\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystems: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystems: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystems,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    playbookRunSystems,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystems: (\n      remediationId,\n      runId,\n      executorId,\n      limit,\n      offset,\n      ansibleHost\n    ) =>\n      dispatch(\n        getPlaybookRunSystems(\n          remediationId,\n          runId,\n          executorId,\n          limit,\n          offset,\n          ansibleHost\n        )\n      ),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns = (defaultColumns = [], customColumns = []) => {\n  return customColumns.map((column) => {\n    const inventoryColumn = defaultColumns.find(\n      (invColumn) => invColumn.key === column.key\n    );\n\n    return inventoryColumn || column;\n  });\n};\n","import React, { Fragment } from 'react';\nimport { Table, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["getIssuePrefix","id","split","getIssueApplication","_ref","getSystemName","_ref2","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","concat","buildIssueUrl","parts","segment","app","urijs","document","baseURI","pathName","window","location","pathname","Error","RemediationsLogViewer","data","React","LogViewer","toolbar","Toolbar","ToolbarContent","ToolbarItem","LogViewerSearch","placeholder","propTypes","PropTypes","SyntaxHighlighter","registerLanguage","yaml","PlaybookSystemDetails","playbookRunSystemDetails","Title","headingLevel","size","className","system_id","console","status","Spinner","Skeleton","defaultProps","connect","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Stack","hasGutter","StackItem","PageHeaderTitle","title","Split","SplitItem","DescriptionList","Main","Card","CardHeader","Button","CardBody","SkeletonTable","RunFailed","name","Bullseye","EmptyState","EmptyStateIcon","icon","ExclamationCircleIcon","EmptyStateBody","variant","urlBuilder","key","renderFunc","fqdn","href","renderStatus","normalizeStatus","refreshInterval","ExecutorDetails","remediation","playbookRun","playbookRunSystems","getPlaybookRun","getPlaybookRunSystems","getPlaybookRunSystemDetails","onCollapseInventory","loadRemediation","_useParams","useParams","executor_id","run_id","_useState","useState","_useState2","_slicedToArray","executor","setExecutor","_useState3","_useState4","systems","setSystems","_useState5","_useState6","filter","setFilter","_useState7","_useState8","page","setPage","_useState9","_useState10","pageSize","setPageSize","_useState11","_useState12","openId","setOpenId","_useState13","_useState14","firstExpand","setFirstExpand","_useState15","_useState16","debouncedGetPlaybookRunSystems","setDebounce","inventory","useRef","onRefresh","options","current","per_page","onRefreshData","useEffect","AwesomeDebouncePromise","clearInterval","executors","find","map","system_name","isOpen","children","renderInventorycard","InventoryTable","ref","columns","defaultColumns","mergedColumns","onLoad","_ref3","INVENTORY_ACTION_TYPES","mergeWithEntities","register","_objectSpread","reducers","playbookActivityIntentory","items","isLoaded","total","meta","perPage","hasCheckbox","expandable","showTags","onExpandClick","_e","_i","_ref4","setInterval","undefined","_ref5","ConditionalFilter","value","label","filterValues","type","conditionalFilterType","onChange","e","selected","onClick","downloadPlaybook","permission","useContext","PermissionContext","Link","to","DateFormat","date","created_at","executor_name","InProgressIcon","StatusSummary","executorStatus","counts","created_by","first_name","last_name","running","success","failure","canceled","epicFailure","ExecutorDetailsSkeleton","_ref6","playbookRuns","selectedRemediation","dispatch","getPlaybookRuns","runId","remediationId","executorId","limit","offset","ansibleHost","expandInventoryTable","isBold","needsPointer","props","_objectWithoutProperties","_excluded","descriptionListClasses","classnames","_defineProperty","mainClasses","_extends","calculateChecked","rows","arguments","length","every","has","some","calculateSystems","_remediation$issues","issues","reduce","acc","curr","_curr$systems","forEach","host","_curr$resolution","found","resolution","description","_toConsumableArray","resolved","rebootRequired","needs_reboot","push","fetchInventoryData","_asyncToGenerator","_regeneratorRuntime","_callee","getEntities","_ref5$page","config","currSystems","_args","_context","prev","next","_ref7","_config$filters","filters","hostnameOrId","slice","_ref8","hasItems","sent","abrupt","results","_ref9","stop","apply","column","invColumn","_React$Component","_inherits","_super","_this","_classCallCheck","call","state","_createClass","_this$state","this","Fragment","Table","cells","TableVariant","compact","TableHeader","EmptyTable","centered","TableToolbar","isFooter"],"sourceRoot":""}