{"version":3,"file":"js/Home.9bf4195e366f2a99a2d1.js","mappings":"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","sources":["webpack:///./src/modules/RemediationsModal/validate/validator.js","webpack:///./src/modules/RemediationsButton.js","webpack:///./src/modules/RemediationsModal/NoDataModal.js","webpack:///./src/components/PlaybookCard.js","webpack:///./src/components/EmptyStates/EmptyRemediations.js","webpack:///./src/components/RemediationTable.js","webpack:///./src/components/TestButtons.js","webpack:///./src/routes/Home.js"],"sourcesContent":["function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport propTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport validate from './RemediationsModal/validate';\n\nimport { CAN_REMEDIATE, matchPermissions } from '../Utilities/utils';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport RemediationWizard from './RemediationsModal';\nimport NoDataModal from './RemediationsModal/NoDataModal';\n\nconst RemediationButton = ({\n  isDisabled,\n  children,\n  dataProvider,\n  onRemediationCreated,\n  buttonProps,\n}) => {\n  const [hasPermissions, setHasPermissions] = useState(false);\n  const [remediationsData, setRemediationsData] = useState();\n  const [isNoDataModalOpen, setNoDataModalOpen] = useState(false);\n  const chrome = useChrome();\n\n  useEffect(() => {\n    chrome.getUserPermissions('remediations').then((permissions) => {\n      setHasPermissions(\n        permissions.some(({ permission }) => {\n          return matchPermissions(permission, CAN_REMEDIATE);\n        })\n      );\n    });\n  }, []);\n\n  if (!hasPermissions) {\n    return (\n      <Tooltip content=\"You do not have correct permissions to remediate this entity.\">\n        <span>\n          <Button isDisabled {...buttonProps}>\n            {children}\n          </Button>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Button\n        isDisabled={isDisabled}\n        onClick={() => {\n          Promise.resolve(dataProvider()).then((data) => {\n            if (!data) {\n              setNoDataModalOpen(true);\n              return;\n            }\n\n            validate(data);\n            setRemediationsData(data);\n          });\n        }}\n        {...buttonProps}\n      >\n        {children}\n      </Button>\n      <NoDataModal isOpen={isNoDataModalOpen} setOpen={setNoDataModalOpen} />\n      {remediationsData && (\n        <RemediationWizard\n          setOpen={(isOpen) =>\n            setRemediationsData((prevData) =>\n              isOpen === false ? null : prevData\n            )\n          }\n          data={{\n            onRemediationCreated,\n            ...(remediationsData || {}),\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nRemediationButton.propTypes = {\n  isDisabled: propTypes.bool,\n  dataProvider: propTypes.func.isRequired,\n  onRemediationCreated: propTypes.func,\n  children: propTypes.node,\n  buttonProps: propTypes.shape({\n    [propTypes.string]: propTypes.any,\n  }),\n};\n\nRemediationButton.defaultProps = {\n  isDisabled: false,\n  onRemediationCreated: (f) => f,\n  children: 'Remediate with Ansible',\n};\n\nexport default RemediationButton;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nexport const NoDataModal = ({ isOpen, setOpen }) => {\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Remediate with Ansible\"\n      isOpen={isOpen}\n      onClose={() => setOpen(false)}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={() => setOpen(false)}>\n          Back to Insights\n        </Button>,\n      ]}\n    >\n      None of the selected issues can be remediated with Ansible.\n      <br />\n      <br />\n      To remediate these issues, review the manual remediation steps associated\n      with each.\n    </Modal>\n  );\n};\n\nNoDataModal.propTypes = {\n  isOpen: propTypes.bool,\n  setOpen: propTypes.func,\n};\n\nexport default NoDataModal;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Progress,\n  ProgressMeasureLocation,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Label,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { PropTypes } from 'prop-types';\nimport { patchRemediation } from '../actions.js';\nimport { dispatchNotification } from '../Utilities/dispatcher.js';\nimport './PlaybookCard.scss';\n\nfunction buildName(name, id) {\n  return (\n    <Link to={`/${id}`} className=\"rem-c-playbook-card__header--name\">\n      {name}\n    </Link>\n  );\n}\n\nfunction actionWrapper(actionsList, callback, dispatch) {\n  Promise.all(\n    actionsList.map((event) => {\n      dispatch(event);\n      return event.payload;\n    })\n  ).then(callback);\n}\n\nconst PlaybookCardHeader = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isArchived, setIsArchived] = useState(archived);\n  const dispatch = useDispatch();\n  const dropdownItems = [];\n\n  const archiveHandler = () => {\n    actionWrapper(\n      [patchRemediation(remediation.id, { archived: !isArchived })],\n      () => {\n        setIsArchived(!isArchived);\n        update(true);\n      },\n      dispatch\n    );\n  };\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"execute\"\n      id=\"execute\"\n      isDisabled={!permission.isReceptorConfigured || isArchived}\n      className={`${!permission.permissions.execute && 'ins-m-not-entitled'}`}\n      onClick={() => {\n        setExecuteOpen(false);\n        actionWrapper(\n          [\n            loadRemediation(remediation.id),\n            getConnectionStatus(remediation.id),\n          ],\n          () => {\n            setExecuteOpen(true);\n            setIsOpen(false);\n          },\n          dispatch\n        );\n      }}\n    >\n      Execute playbook\n    </DropdownItem>\n  );\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"download\"\n      onClick={() => {\n        downloadPlaybook([remediation.id]);\n        setIsOpen(false);\n        dispatchNotification({\n          title: `Preparing playbook for download`,\n          description: 'Once complete, your download will start automatically.',\n          variant: 'info',\n          dismissable: true,\n          autoDismiss: true,\n        });\n      }}\n    >\n      Download playbook\n    </DropdownItem>\n  );\n\n  isArchived\n    ? dropdownItems.push(\n        <DropdownItem\n          key=\"restore\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Restored playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Restore playbook\n        </DropdownItem>\n      )\n    : dropdownItems.push(\n        <DropdownItem\n          key=\"archive\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Archived playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Archive playbook\n        </DropdownItem>\n      );\n\n  return (\n    <CardHeader className=\"rem-c-playbook-card__header\">\n      <CardActions>\n        <Dropdown\n          key=\"dropdown\"\n          id={`${remediation.id}-dropdown`}\n          isOpen={isOpen}\n          isPlain\n          onSelect={(f) => f}\n          toggle={\n            <KebabToggle\n              id={`${remediation.id}-toggle`}\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            />\n          }\n          dropdownItems={dropdownItems}\n          position={'right'}\n        />\n        <input\n          type=\"checkbox\"\n          name={`${remediation.id}-checkbox`}\n          checked={selector.getSelectedIds().includes(remediation.id)}\n          onChange={(e) => {\n            selector.props.onSelect(e, e.target.checked, remediationIdx);\n          }}\n          aria-label={`${remediation.id}-checkbox`}\n        />\n      </CardActions>\n      <CardTitle>\n        <Stack hasGutter>\n          <StackItem className=\"rem-c-playbook-card__header--title\">\n            <span className=\"pf-u-mr-sm\">\n              {buildName(remediation.name, remediation.id)}\n            </span>\n            {isArchived && <Label>Archived</Label>}\n          </StackItem>\n          <StackItem className=\"rem-c-playbook-card__header--last-modified\">\n            Last modified: <DateFormat date={remediation.updated_at} />\n          </StackItem>\n        </Stack>\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nPlaybookCardHeader.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n};\n\nconst renderActionStatus = (complete, total) => {\n  return complete === total && complete !== 0 ? (\n    <div>\n      <CheckCircleIcon className=\"rem-c-success\" /> {complete} of &nbsp;{total}\n    </div>\n  ) : (\n    `${complete} of ${total}`\n  );\n};\n\nconst renderProgress = (complete, total, archived) => {\n  return archived ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--archived\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : complete === total && complete !== 0 ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--success\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : (\n    <Progress\n      className=\"rem-c-playbook-card__progress\"\n      value={(complete / total) * 100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  );\n};\n\nexport const PlaybookCard = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  //executeOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n}) => {\n  // const [ poll, setPoll ] = useState(executeOpen => !executeOpen);\n  // const [ curResolved, setCurResolved ] = useState(remediation.resolved_count);\n  // const selected = reduxSelector(state => state.selectedRemediation);\n  // const [ loaded, setLoaded ] = useState(false);\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //     if (poll && !archived) {\n  //         const interval = setInterval(() => {\n  //             if (poll) {\n  //                 actionWrapper([\n  //                     loadRemediation(remediation.id)\n  //                 ], () => { setLoaded(true); }, dispatch);\n  //             }\n  //         }, 15000);\n  //         return () => clearInterval(interval);\n  //     }\n  // }, [ poll ]);\n\n  // useEffect(() => {\n  //     if (loaded) {\n  //         if (curResolved !== selected.remediation.resolved_count) {\n  //             setCurResolved(selected.remediation.resolved_count);\n  //         }\n  //     }\n  // }, [ loaded ]);\n\n  // useEffect(() => {\n  //     if (executeOpen) {\n  //         setPoll(false);\n  //     } else {\n  //         setPoll(true);\n  //     }\n  // }, [ executeOpen ]);\n\n  return (\n    <Card className=\"rem-c-playbook-card\" isCompact>\n      <PlaybookCardHeader\n        remediation={remediation}\n        remediationIdx={remediationIdx}\n        archived={archived}\n        selector={selector}\n        setExecuteOpen={setExecuteOpen}\n        update={update}\n        loadRemediation={loadRemediation}\n        getConnectionStatus={getConnectionStatus}\n        downloadPlaybook={downloadPlaybook}\n        permission={permission}\n      />\n      <CardBody className=\"rem-c-playbook-card__body\">\n        <Split hasGutter className=\"rem-c-playbook-card__body--split\">\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Systems\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {remediation.system_count}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Complete actions\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {renderActionStatus(\n                  remediation.resolved_count,\n                  remediation.issue_count\n                )}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n        </Split>\n      </CardBody>\n      {renderProgress(\n        remediation.resolved_count,\n        remediation.issue_count,\n        archived\n      )}\n    </Card>\n  );\n};\n\nPlaybookCard.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  executeOpen: PropTypes.bool.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { WrenchIcon } from '@patternfly/react-icons';\n\nimport './EmptyRemediations.scss';\n\nexport const EmptyRemediations = ({ archivedCount, setShowArchived }) => {\n  return (\n    <Bullseye className=\"rem-c-no-remediations pf-u-pt-2xl\">\n      <EmptyState>\n        <EmptyStateIcon icon={WrenchIcon} size=\"sm\" />\n        <Title size=\"lg\" headingLevel=\"h5\">\n          No remediation playbooks yet\n        </Title>\n        <EmptyStateBody>\n          Insights uses Ansible Playbooks to remediate or mitigate configuration\n          problems on your systems, and apply patches.\n          <br />\n          <br />\n          To create a remediation playbook, select issues identified in Insights\n          applications, then select\n          <strong> Remediate</strong>.\n        </EmptyStateBody>\n        <br />\n        {archivedCount > 0 && (\n          <Button\n            variant=\"link\"\n            onClick={() => setShowArchived(true)}\n            ouiaId=\"show-archived-playbooks\"\n          >\n            Show {archivedCount} archived playbooks\n          </Button>\n        )}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyRemediations.propTypes = {\n  archivedCount: PropTypes.number.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useContext, useState } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { downloadPlaybook } from '../api';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  loadRemediation,\n} from '../actions';\nimport { PermissionContext } from '../App';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport { PlaybookCard } from './PlaybookCard';\nimport { EmptyRemediations } from './EmptyStates/EmptyRemediations';\nimport './RemediationTable.scss';\n\nfunction skeleton() {\n  return (\n    <React.Fragment>\n      <Main>\n        <Spinner centered />\n      </Main>\n    </React.Fragment>\n  );\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction RemediationTable({\n  remediations,\n  loadRemediations,\n  sorter,\n  filter,\n  selector,\n  pagination,\n  shouldUpdateGrid,\n  setShouldUpdateGrid,\n  setRemediationCount,\n  showArchived,\n  setShowArchived,\n}) {\n  const { value, status } = remediations;\n  let cards = [];\n\n  const permission = useContext(PermissionContext);\n  const [executeOpen, setExecuteOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n  const selectedRemediation = reduxSelector(\n    (state) => state.selectedRemediation\n  );\n  const connectionStatus = reduxSelector((state) => state.connectionStatus);\n  const runningRemediation = reduxSelector((state) => state.runRemediation);\n  const dispatch = useDispatch();\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (shouldUpdateGrid === true) {\n      setShouldUpdateGrid(false);\n      load();\n    }\n  }, [shouldUpdateGrid]);\n\n  useEffect(() => {\n    if (runningRemediation.status === 'changed') {\n      getConnectionStatus(selectedRemediation.remediation.id);\n      setShowRefreshMessage(true);\n    } else if (runningRemediation.status === 'fulfilled') {\n      setExecuteOpen(false);\n    }\n  }, [runningRemediation.status]);\n\n  useEffect(() => {\n    if (remediations.value) {\n      setRemediationCount(value.meta.total);\n    }\n  }, [remediations]);\n\n  // Skeleton Loading\n  if (status !== 'fulfilled') {\n    return skeleton();\n  }\n\n  if (!showArchived) {\n    cards = value?.data?.reduce((result, remediation) => {\n      if (remediation.archived !== true) {\n        result.push(remediation);\n      }\n\n      return result;\n    }, []);\n  } else {\n    cards = value?.data?.map((remediation) => remediation);\n  }\n\n  if (cards.length === 0) {\n    return (\n      <EmptyRemediations\n        archivedCount={value.data.length}\n        setShowArchived={setShowArchived}\n      />\n    );\n  }\n\n  selector.register(cards);\n\n  return (\n    <React.Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          {executeOpen && (\n            <ExecuteModal\n              isOpen={executeOpen}\n              onClose={() => {\n                setShowRefreshMessage(false);\n                setExecuteOpen(false);\n              }}\n              showRefresh={showRefreshMessage}\n              remediationId={selectedRemediation.remediation.id}\n              data={connectionStatus.data}\n              etag={connectionStatus.etag}\n              isLoading={connectionStatus.status !== 'fulfilled'}\n              issueCount={selectedRemediation.remediation.issues.length}\n              remediationStatus={runningRemediation.status}\n              runRemediation={(id, etag) => {\n                dispatch(runRemediation(id, etag)).then(() =>\n                  dispatch(getPlaybookRuns(id))\n                );\n              }}\n              setEtag={(etag) => {\n                dispatch(setEtag(etag));\n              }}\n            />\n          )}\n        </StackItem>\n        <StackItem>\n          <Grid sm={12} md={6} lg={4} hasGutter>\n            {cards.map((remediation, idx) => {\n              return (\n                <GridItem key={remediation.id}>\n                  <PlaybookCard\n                    remediation={remediation}\n                    remediationIdx={idx}\n                    archived={remediation.archived}\n                    selector={selector}\n                    setExecuteOpen={setExecuteOpen}\n                    executeOpen={executeOpen}\n                    update={setShouldUpdateGrid}\n                    loadRemediation={loadRemediation}\n                    getConnectionStatus={getConnectionStatus}\n                    downloadPlaybook={downloadPlaybook}\n                    permission={permission}\n                  />\n                </GridItem>\n              );\n            })}\n          </Grid>\n        </StackItem>\n      </Stack>\n    </React.Fragment>\n  );\n}\n\nRemediationTable.propTypes = {\n  remediations: PropTypes.object.isRequired,\n  loadRemediations: PropTypes.func.isRequired,\n  sorter: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired,\n  selector: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  shouldUpdateGrid: PropTypes.bool.isRequired,\n  setShouldUpdateGrid: PropTypes.func.isRequired,\n  setRemediationCount: PropTypes.func.isRequired,\n  showArchived: PropTypes.bool.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n\nexport default RemediationTable;\n","import React from 'react';\n\nimport { Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport RemediationButton from '../modules/RemediationsButton';\n\nimport propTypes from 'prop-types';\n\nimport { getHosts } from '../api';\n\nclass TestButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allHosts: false,\n    };\n  }\n\n  isEnabled = () => localStorage.getItem('remediations:debug') === 'true';\n\n  dataProviderPing = () => ({\n    issues: [\n      {\n        id: 'test:ping',\n        description: 'Ansible ping',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 5),\n      },\n    ],\n  });\n\n  dataProviderC1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC3 = () => ({\n    issues: [...this.dataProviderC1().issues, ...this.dataProviderC2().issues],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC4 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:corosync_enable_rt_schedule|COROSYNC_NOT_ENABLE_RT',\n        description:\n          'Cluster nodes are frequently fenced as realtime is not enabled in corosync',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC5 = () => ({\n    issues: [\n      {\n        id: 'advisor:unsupported',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'vulnerabilities:CVE-2019-999999',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderD1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n        systems:\n          this.state.allHosts.length > 1\n            ? this.state.allHosts.slice(1, 2)\n            : this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderD2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n        systems: this.state.allHosts.slice(1),\n      },\n    ],\n  });\n\n  async componentDidMount() {\n    if (this.isEnabled()) {\n      getHosts().then((hosts) =>\n        this.setState({\n          allHosts: hosts.results.map((result) => result.id),\n        })\n      );\n    }\n  }\n\n  render() {\n    if (!this.isEnabled()) {\n      return null;\n    }\n\n    const { allHosts } = this.state;\n\n    const RemediationBtn = ({ dataProvider, children, ...props }) => (\n      <SplitItem>\n        <RemediationButton\n          dataProvider={dataProvider}\n          isDisabled={!allHosts || !allHosts.length}\n          onRemediationCreated={this.props.onRemediationCreated}\n          {...props}\n        >\n          {children}\n        </RemediationButton>\n      </SplitItem>\n    );\n\n    return (\n      <React.Fragment>\n        <Stack hasGutter>\n          <StackItem>\n            <Split hasGutter>\n              {[\n                'ping',\n                'alwaysFail',\n                'failHalfTheTime',\n                'pause1m',\n                'pause5m',\n                'pause15m',\n                'pauseRandom15m',\n                'pause1h',\n                'pause6h',\n              ].map((name) => (\n                <RemediationBtn\n                  key={name}\n                  dataProvider={() => ({\n                    issues: [\n                      {\n                        id: `test:${name}`,\n                        description: `Ansible ${name} test playbook`,\n                      },\n                    ],\n                    systems: this.state.allHosts,\n                  })}\n                >\n                  {name}\n                </RemediationBtn>\n              ))}\n            </Split>\n          </StackItem>\n\n          <StackItem>\n            <Split hasGutter>\n              <RemediationBtn dataProvider={this.dataProviderA1}>\n                A1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderA2}>\n                A2\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderC1}>\n                C1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC2}>\n                C2\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC3}>\n                C3\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC4}>\n                C4 (multires)\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC5}>\n                C5 (unsupported)\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderD1}>\n                D1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderD2}>\n                D2\n              </RemediationBtn>\n            </Split>\n          </StackItem>\n        </Stack>\n      </React.Fragment>\n    );\n  }\n}\n\nTestButtons.propTypes = {\n  onRemediationCreated: propTypes.func,\n};\n\nTestButtons.defaultProps = {\n  onRemediationCreated: (f) => f,\n};\n\nexport default TestButtons;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport { StackItem, Stack } from '@patternfly/react-core';\n\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport RemediationTable from '../components/RemediationTable';\nimport TestButtons from '../components/TestButtons';\n\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport './Home.scss';\n\nimport { PermissionContext } from '../App';\nimport DeniedState from '../components/DeniedState';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport ConfirmationDialog from '../components/ConfirmationDialog';\nimport keyBy from 'lodash/keyBy';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nfunction verifyDownload(selectedIds, data) {\n  let valid = [];\n  const byId = keyBy(data, (r) => r.id);\n\n  valid = selectedIds.reduce((result, id) => {\n    const remediation = byId[id];\n\n    if (remediation && remediation.issue_count > 0) {\n      result.push(remediation.id);\n    }\n\n    return result;\n  }, []);\n\n  return valid;\n}\n\nfunction download(selectedIds, data, dispatch) {\n  const valid = verifyDownload(selectedIds, data);\n\n  if (valid.length === 0) {\n    dispatch(\n      addNotification({\n        variant: 'danger',\n        title: `No playbooks downloaded.`,\n        description:\n          selectedIds.length > 1\n            ? 'Selected remediations do not contain any issues to remediate.'\n            : 'Selected remediation does not contain any issues to remediate.',\n      })\n    );\n  } else if (valid.length < selectedIds.length) {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n        description:\n          selectedIds.length - valid.length > 1\n            ? `${\n                selectedIds.length - valid.length\n              } remediations with no issues were not downloaded.`\n            : `1 remediation with no issues was not downloaded.`,\n      })\n    );\n  } else {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n      })\n    );\n  }\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nconst Home = () => {\n  const chrome = useChrome();\n  useEffect(() => {\n    chrome.updateDocumentTitle('Remediations | Red Hat Insights');\n  }, [chrome]);\n\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const sorter = useSorter(4, 'desc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const pagination = usePagination();\n  const [remediationCount, setRemediationCount] = useState(0);\n  const [filterText, setFilterText] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [showArchived, setShowArchived] = useState(\n    false || localStorage.getItem('remediations:showArchived') === 'true'\n  );\n  const [shouldUpdateGrid, setShouldUpdateGrid] = useState(false);\n  const remediations = reduxSelector((state) => state.remediations);\n  const dispatch = useDispatch();\n  const loadRemediations = (...args) =>\n    dispatch(actions.loadRemediations(...args));\n  const deleteRemediations = (ids) =>\n    dispatch(\n      actions.deleteRemediations({\n        remediation_ids: ids,\n      })\n    );\n  const itemsCountInPage = remediations?.value?.data.length || 0;\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(load, []);\n\n  useEffect(() => {\n    if (remediations.status === 'fulfilled' && filter.value === filterText) {\n      setShouldUpdateGrid(true);\n    }\n  }, [\n    sorter.sortBy,\n    sorter.sortDir,\n    filter.value,\n    pagination.pageSize,\n    pagination.pageDebounced,\n    showArchived,\n  ]);\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  filter.onChange(pagination.reset);\n  sorter.onChange(pagination.reset);\n\n  const selectedIds = selector.getSelectedIds();\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const sendNotification = (data) => {\n    dispatch(addNotification(data));\n  };\n\n  const onRemediationCreated = (result) => {\n    sendNotification(result.getNotification());\n    dispatch(actions.loadRemediations());\n  };\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Name', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"page__remediations\">\n      <PermissionContext.Consumer>\n        {(permission) =>\n          permission.permissions.read === false ? (\n            <DeniedState />\n          ) : (\n            <React.Fragment>\n              <PageHeader>\n                <PageHeaderTitle title=\"Remediations\" />\n                <TestButtons onRemediationCreated={onRemediationCreated} />\n              </PageHeader>\n              <PrimaryToolbar\n                filterConfig={{\n                  items: [\n                    {\n                      label: 'Search playbooks',\n                      type: 'text',\n                      filterValues: {\n                        id: 'filter-by-string',\n                        key: 'filter-by-string',\n                        placeholder: 'Search playbooks',\n                        value: filterText,\n                        onChange: (_e, value) => {\n                          setFilterText(value);\n                        },\n                      },\n                    },\n                  ],\n                }}\n                bulkSelect={{\n                  items: [\n                    {\n                      title: 'Select none',\n                      onClick: () => selector.props.onSelect('none', true),\n                    },\n                    {\n                      title: `Select page (${itemsCountInPage})`,\n                      onClick: () => selector.props.onSelect('page', true),\n                    },\n                  ],\n                  checked:\n                    selectedIds.length && remediationCount > selectedIds.length\n                      ? null\n                      : selectedIds.length,\n                  count: selectedIds.length,\n                  isDisabled: !itemsCountInPage,\n                  onSelect: (isSelected) =>\n                    selector.props.onSelect(\n                      selectedIds.length ? 'none' : 'page',\n                      isSelected\n                    ),\n                }}\n                actionsConfig={{\n                  actions: [\n                    {\n                      label:\n                        selectedIds.length > 1\n                          ? 'Download playbooks'\n                          : 'Download playbook',\n                      props: {\n                        variant: 'secondary',\n                        isDisabled: !selectedIds.length,\n                      },\n                      onClick: () =>\n                        download(\n                          selectedIds,\n                          remediations.value.data,\n                          dispatch\n                        ), // TODO state for downloads?\n                    },\n                    {\n                      label: 'Delete playbooks',\n                      props: {\n                        isDisabled:\n                          !permission.permissions.write || !selectedIds.length,\n                      },\n                      onClick: () => setDialogOpen(true),\n                    },\n                    {\n                      label: showArchived\n                        ? 'Hide archived playbooks'\n                        : 'Show archived playbooks',\n                      onClick: showArchived\n                        ? () => {\n                            setShowArchived(false);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'false'\n                            );\n                          }\n                        : () => {\n                            setShowArchived(true);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'true'\n                            );\n                          },\n                    },\n                  ],\n                }}\n                pagination={{\n                  ...pagination.props,\n                  itemCount: remediationCount,\n                }}\n                activeFiltersConfig={activeFiltersConfig}\n              />\n              <Main>\n                <Stack hasGutter>\n                  {permission.hasSmartManagement &&\n                    !permission.isReceptorConfigured &&\n                    noReceptorBannerVisible && (\n                      <StackItem>\n                        <NoReceptorBanner\n                          onClose={() => handleNoReceptorToggle()}\n                        />\n                      </StackItem>\n                    )}\n                  {dialogOpen && (\n                    <ConfirmationDialog\n                      title={\n                        selectedIds.length === 1\n                          ? 'Remove playbook'\n                          : 'Remove playbooks'\n                      }\n                      text={`${selectedIds.length} ${\n                        selectedIds.length > 1 ? 'playbooks' : 'playbook'\n                      }\n                                            will be removed from Remediations. This is permanent and cannot be undone.`}\n                      confirmText={'Remove'}\n                      onClose={async (del) => {\n                        setDialogOpen(false);\n                        if (del) {\n                          await deleteRemediations(selectedIds);\n\n                          loadRemediations();\n                          selector.reset();\n                        }\n                      }}\n                    />\n                  )}\n                  <StackItem>\n                    <RemediationTable\n                      remediations={remediations}\n                      loadRemediations={loadRemediations}\n                      sorter={sorter}\n                      filter={filter}\n                      selector={selector}\n                      pagination={pagination}\n                      shouldUpdateGrid={shouldUpdateGrid}\n                      setShouldUpdateGrid={setShouldUpdateGrid}\n                      setRemediationCount={setRemediationCount}\n                      showArchived={showArchived}\n                      setShowArchived={setShowArchived}\n                    />\n                  </StackItem>\n                </Stack>\n              </Main>\n            </React.Fragment>\n          )\n        }\n      </PermissionContext.Consumer>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["assert","test","msg","TypeError","checkAllowedKeys","reference","keys","Object","forEach","key","includes","checkRequiredKeys","prototype","hasOwnProperty","call","checkSystems","systems","Array","isArray","length","system","RemediationButton","isDisabled","children","dataProvider","onRemediationCreated","buttonProps","useState","hasPermissions","setHasPermissions","remediationsData","setRemediationsData","isNoDataModalOpen","setNoDataModalOpen","chrome","useChrome","useEffect","getUserPermissions","then","permissions","some","permission","matchPermissions","CAN_REMEDIATE","Button","onClick","Promise","resolve","data","issues","issue","id","validate","NoDataModal","isOpen","setOpen","prevData","Tooltip","content","propTypes","isRequired","defaultProps","f","Modal","variant","ModalVariant","small","title","onClose","actions","actionWrapper","actionsList","callback","dispatch","all","map","event","payload","PlaybookCardHeader","name","remediation","remediationIdx","archived","selector","setExecuteOpen","update","loadRemediation","getConnectionStatus","downloadPlaybook","setIsOpen","isArchived","setIsArchived","useDispatch","dropdownItems","archiveHandler","patchRemediation","push","DropdownItem","isReceptorConfigured","className","execute","dispatchNotification","description","dismissable","autoDismiss","addNotification","CardHeader","CardActions","Dropdown","isPlain","onSelect","toggle","KebabToggle","onToggle","position","type","checked","getSelectedIds","onChange","e","props","target","CardTitle","Stack","hasGutter","StackItem","to","Label","DateFormat","date","updated_at","PropTypes","object","number","bool","func","PlaybookCard","complete","total","Card","isCompact","CardBody","Split","SplitItem","system_count","resolved_count","issue_count","CheckCircleIcon","Progress","value","measureLocation","ProgressMeasureLocation","none","renderProgress","executeOpen","EmptyRemediations","archivedCount","setShowArchived","Bullseye","EmptyState","EmptyStateIcon","icon","WrenchIcon","size","Title","headingLevel","EmptyStateBody","ouiaId","SORTING_ITERATEES","RemediationTable","remediations","loadRemediations","sorter","filter","pagination","shouldUpdateGrid","setShouldUpdateGrid","setRemediationCount","showArchived","status","cards","useContext","PermissionContext","showRefreshMessage","setShowRefreshMessage","selectedRemediation","reduxSelector","state","connectionStatus","runningRemediation","runRemediation","column","sortBy","sortDir","pageSize","offset","undefined","meta","Main","Spinner","centered","reduce","result","register","ExecuteModal","showRefresh","remediationId","etag","isLoading","issueCount","remediationStatus","getPlaybookRuns","setEtag","Grid","sm","md","lg","idx","GridItem","TestButtons","localStorage","getItem","allHosts","slice","dataProviderC1","dataProviderC2","this","isEnabled","getHosts","hosts","setState","results","RemediationBtn","dataProviderA1","dataProviderA2","dataProviderC3","dataProviderC4","dataProviderC5","dataProviderD1","dataProviderD2","React","updateDocumentTitle","noReceptorBannerVisible","setNoReceptorBannerVisible","useSorter","useFilter","useSelector","usePagination","remediationCount","filterText","setFilterText","dialogOpen","setDialogOpen","itemsCountInPage","pageDebounced","setValue","reset","selectedIds","getNotification","activeFiltersConfig","filters","category","chips","onDelete","Consumer","read","DeniedState","PageHeader","PageHeaderTitle","PrimaryToolbar","filterConfig","items","label","filterValues","placeholder","_e","bulkSelect","count","isSelected","actionsConfig","valid","byId","keyBy","r","verifyDownload","download","write","setItem","itemCount","hasSmartManagement","NoReceptorBanner","ConfirmationDialog","text","confirmText","del","ids","deleteRemediations","remediation_ids"],"sourceRoot":""}