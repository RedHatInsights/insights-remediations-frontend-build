{"version":3,"file":"js/ExecutorDetails.1670347705731.90bf03bd17cd8c3cfe4e.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails/Columns.js","webpack:///./src/components/ExecutorDetails/ExecutorDetails.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'beta') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from './SkeletonTable';\n\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardHeader className=\"rem-m-card__header-bold\">\n              <Button>Download playbook</Button>\n            </CardHeader>\n\n            <CardBody>\n              <SkeletonTable />\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon className=\"rem-c-failure\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Run failed\n      </Title>\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <Button variant=\"link\">Learn more</Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React from 'react';\nimport { renderStatus, normalizeStatus } from '../statusHelper';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\n\nconst urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\nexport default [\n  {\n    key: 'display_name',\n    title: 'Name',\n    // eslint-disable-next-line\n    renderFunc: (name, id, { fqdn }) => <div><a href={urlBuilder(id)}>{fqdn || name || id}</a></div>\n  },\n  'tags',\n  {\n    key: 'status',\n    title: 'Status',\n    // eslint-disable-next-line\n    renderFunc: (status) => (\n      <div className=\"rem-c-status-bar\">\n        {renderStatus(normalizeStatus(status))}\n      </div>\n    ),\n  },\n];\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  ToolbarItem,\n  Toolbar,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../../store/reducers';\nimport DescriptionList from '../Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../../actions';\nimport { downloadPlaybook } from '../../api';\nimport { normalizeStatus, StatusSummary } from '../statusHelper';\nimport PlaybookSystemDetails from '../SystemDetails';\nimport ExecutorDetailsSkeleton from '../../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from '../Alerts/RunFailed';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../../App';\nimport { register } from '../../store';\nimport { mergedColumns } from '../SystemsTable/helpers';\nimport columns from './Columns';\n\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  match: {\n    params: { executor_id, run_id, id },\n  },\n  remediation,\n  playbookRun,\n  playbookRunSystems,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const [executor, setExecutor] = useState({});\n  const [systems, setSystems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const [debouncedGetPlaybookRunSystems, setDebounce] = useState();\n  const inventory = useRef(null);\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        options.per_page,\n        options.per_page * (options.page - 1)\n      );\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n    setDebounce(() => AwesomeDebouncePromise(getPlaybookRunSystems, 500));\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n\n    if (playbookRunSystems.status !== 'pending') {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        pageSize,\n        pageSize * (page - 1),\n        filter\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  useEffect(() => {\n    setSystems(() =>\n      playbookRunSystems.data.map(({ system_id, system_name, status }) => ({\n        id: system_id,\n        display_name: system_name,\n        status,\n        isOpen: openId === system_id,\n        children: <PlaybookSystemDetails systemId={system_id} />,\n      }))\n    );\n  }, [playbookRunSystems]);\n\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              columns={mergedColumns(columns)}\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                    })()\n                  ),\n                })\n              }\n              items={playbookRunSystems.status !== 'pending' ? systems : []}\n              isLoaded={playbookRunSystems.status !== 'pending'}\n              onRefresh={onRefresh}\n              page={page}\n              total={playbookRunSystems.meta.total}\n              perPage={pageSize}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n            >\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <ConditionalFilter\n                      items={[\n                        {\n                          value: 'display_name',\n                          label: 'Name',\n                          filterValues: {\n                            placeholder: 'Filter by name',\n                            type: conditionalFilterType.text,\n                            value: filter,\n                            onChange: (e, selected) => {\n                              setFilter(selected);\n                              setPage(1);\n                              debouncedGetPlaybookRunSystems(\n                                id,\n                                run_id,\n                                executor_id,\n                                pageSize,\n                                0,\n                                selected\n                              );\n                            },\n                          },\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => downloadPlaybook(remediation.id)}\n                    >\n                      Download playbook\n                    </Button>\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </InventoryTable>\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  match: PropTypes.object,\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystems: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystems: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystems,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    playbookRunSystems,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystems: (\n      remediationId,\n      runId,\n      executorId,\n      limit,\n      offset,\n      ansibleHost\n    ) =>\n      dispatch(\n        getPlaybookRunSystems(\n          remediationId,\n          runId,\n          executorId,\n          limit,\n          offset,\n          ansibleHost\n        )\n      ),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns =\n  (columns, defaultProps = {}) =>\n  (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n          ...defaultProps,\n        },\n      };\n    });\n","import React, { Fragment } from 'react';\nimport { Table, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["getIssuePrefix","id","split","getIssueApplication","getSystemName","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","buildIssueUrl","parts","segment","app","urijs","document","baseURI","pathName","window","location","pathname","Error","RemediationsLogViewer","data","LogViewer","toolbar","Toolbar","ToolbarContent","ToolbarItem","LogViewerSearch","placeholder","propTypes","PropTypes","SyntaxHighlighter","yaml","PlaybookSystemDetails","playbookRunSystemDetails","Title","headingLevel","size","className","system_id","console","status","Spinner","Skeleton","defaultProps","connect","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Stack","hasGutter","StackItem","PageHeaderTitle","title","Split","SplitItem","DescriptionList","Main","Card","CardHeader","Button","CardBody","SkeletonTable","RunFailed","name","Bullseye","EmptyState","EmptyStateIcon","icon","ExclamationCircleIcon","EmptyStateBody","variant","urlBuilder","key","renderFunc","fqdn","href","renderStatus","normalizeStatus","refreshInterval","ExecutorDetails","match","params","executor_id","run_id","remediation","playbookRun","playbookRunSystems","getPlaybookRun","getPlaybookRunSystems","getPlaybookRunSystemDetails","onCollapseInventory","loadRemediation","useState","executor","setExecutor","systems","setSystems","filter","setFilter","page","setPage","pageSize","setPageSize","openId","setOpenId","firstExpand","setFirstExpand","debouncedGetPlaybookRunSystems","setDebounce","inventory","useRef","onRefresh","options","current","per_page","onRefreshData","useEffect","AwesomeDebouncePromise","clearInterval","executors","find","map","system_name","isOpen","children","renderInventorycard","InventoryTable","ref","columns","mergedColumns","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","register","reducers","items","isLoaded","total","meta","perPage","hasCheckbox","expandable","showTags","onExpandClick","_e","_i","setInterval","undefined","ConditionalFilter","value","label","filterValues","type","conditionalFilterType","onChange","e","selected","onClick","downloadPlaybook","permission","useContext","PermissionContext","Link","to","DateFormat","date","created_at","executor_name","InProgressIcon","executorStatus","counts","created_by","first_name","last_name","running","success","failure","canceled","epicFailure","playbookRuns","selectedRemediation","dispatch","getPlaybookRuns","runId","remediationId","executorId","limit","offset","ansibleHost","expandInventoryTable","isBold","needsPointer","props","descriptionListClasses","classnames","mainClasses","calculateChecked","rows","every","has","length","some","calculateSystems","issues","reduce","acc","curr","forEach","host","found","resolution","description","resolved","rebootRequired","needs_reboot","push","fetchInventoryData","getEntities","config","currSystems","filters","hostnameOrId","slice","hasItems","results","defaultColumns","column","isStringCol","defaultColumn","defaultCol","state","this","Fragment","Table","cells","TableVariant","TableHeader","centered","isFooter","React"],"sourceRoot":""}