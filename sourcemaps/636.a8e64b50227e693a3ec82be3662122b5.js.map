{"version":3,"file":"js/636.1646217088619.9bb24b2ff438cbbd55e1.js","mappings":"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","sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/Utilities/http.js","webpack:///./src/api/index.js","webpack:///./src/config.js","webpack:///./src/constants.js","webpack:///./src/api/inventory.js","webpack:///./src/store/actions/host-actions.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { CloseIcon, RedoIcon } from '@patternfly/react-icons';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () =>\n  window.location.pathname\n    .split('/')\n    .filter((s) => s !== 'beta' && s.length > 0)\n    .shift();\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'beta' ? 'beta/' : '';\n};\n\nexport const remediationUrl = (id) =>\n  `${document.baseURI}${getGroup()}/remediations${id ? `/${id}` : ''}`;\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>\n                <RedoIcon className=\"pf-u-mr-sm\" />\n                Yes\n              </div>\n            ) : (\n              <div>\n                <CloseIcon className=\"pf-u-mr-sm\" />\n                No\n              </div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              allSystemsNamed: allSystemsNamed.filter((system) =>\n                curr.systems.includes(system.id)\n              ),\n              allSystems: curr.systems,\n              cells: [\n                {\n                  title: (\n                    <Bullseye>\n                      <Spinner />\n                    </Bullseye>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nconst buildSystemRow = (allSystemsNamed = [], allSystems = []) => (\n  <Router>\n    <SystemsTableWithContext\n      allSystemsNamed={allSystemsNamed}\n      allSystems={allSystems}\n      disabledColumns={['updated']}\n    />\n  </Router>\n);\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  temp[rowKey + 1].cells = [\n    {\n      title: buildSystemRow(\n        rows[rowKey + 1].allSystemsNamed,\n        rows[rowKey + 1].allSystems\n      ),\n    },\n  ];\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK],\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    .then(({ id }) => {\n      setState({ id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(id, formValues[SELECT_PLAYBOOK], !isUpdate),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems, sortBy) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n  return {\n    ...state,\n    selected,\n    rows: sortByAttr(\n      state.rows.map(({ id, ...row }) => ({\n        id,\n        ...row,\n        selected: !!selected?.includes(id),\n      })),\n      'display_name',\n      sortBy?.direction || 'asc'\n    ),\n    sortBy,\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const sortByAttr = (systems, attribute, direction) =>\n  Array.isArray(systems)\n    ? systems.sort(\n        (a, b) =>\n          ((a[attribute] > b[attribute] && 1) || -1) *\n          (direction === 'asc' ? 1 : -1)\n      )\n    : [];\n\nexport const fetchSystemsInfo = async (\n  config,\n  sortableColumns = [],\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const isSortingValid = sortableColumns.includes(config.orderBy);\n  config.orderBy = isSortingValid ? config.orderBy : undefined;\n  config.orderDirection = isSortingValid\n    ? config.orderDirection?.toLowerCase()\n    : undefined;\n  allSystemsNamed = sortByAttr(allSystemsNamed, 'name', config.orderDirection);\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ? [curr.id] : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(sliced, { ...config, hasItems: true, page: 1 }, true)\n      : {};\n  return {\n    ...{\n      ...data,\n      results: sortByAttr(data.results, 'display_name', config.orderDirection),\n    },\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n    orderBy: config.orderBy,\n    orderDirection: config.orderDirection,\n    sortBy: { key: config.orderBy, direction: config.orderDirection },\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state, { payload }) =>\n      loadEntitiesFulfilled(state, allSystems, {\n        key: payload.orderBy,\n        direction: payload.orderDirection,\n      }),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), ...systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n\nexport const matchPermissions = (permissionA, permissionB) => {\n  const segmentsA = permissionA.split(':');\n  const segmentsB = permissionB.split(':');\n\n  if (segmentsA.length !== segmentsB.length) {\n    return false;\n  }\n\n  return segmentsA.every(\n    (segmentA, index) =>\n      segmentA === segmentsB[index] ||\n      segmentA === '*' ||\n      segmentsB[index] === '*'\n  );\n};\n","const HEADERS = {\n  'Content-Type': 'application/json; charset=utf-8',\n};\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function checkResponse(r) {\n  if (r.ok) {\n    return r;\n  }\n\n  if (r.status === 401) {\n    window.insights.chrome.auth.logout();\n    return;\n  }\n\n  if (r.headers.get('content-type').includes('application/json')) {\n    // let's try to extract some more info\n    let data = false;\n    try {\n      data = await r.json();\n    } catch (e) {} // eslint-disable-line no-empty\n\n    if (data.errors && data.errors.length) {\n      const error = data.errors[0];\n\n      if (error.details && error.details.name) {\n        throw new HttpError(`${error.title} (${error.details.name})`);\n      }\n\n      throw new HttpError(error.title);\n    }\n  }\n\n  throw new HttpError(`Unexpected response code ${r.status}`);\n}\n\nasync function json(r) {\n  if (!r) {\n    return;\n  }\n\n  const type = r.headers.get('content-type');\n  if (!type.includes('application/json')) {\n    throw new HttpError(`Unexpected response type (${type}) returned`);\n  }\n\n  return r.json();\n}\n\nfunction doFetch(\n  uri,\n  method = 'GET',\n  data = false,\n  headers = false,\n  options = {}\n) {\n  const opts = {\n    credentials: 'same-origin',\n    method,\n    ...options,\n  };\n\n  if (headers) {\n    opts.headers = headers;\n  }\n\n  if (data) {\n    opts.body = JSON.stringify(data);\n  }\n\n  return fetch(uri, opts);\n}\n\nexport function doGet(uri) {\n  return doFetch(uri.toString()).then(checkResponse).then(json);\n}\n\nexport function doPost(uri, data) {\n  return doFetch(uri, 'POST', data, HEADERS).then(checkResponse).then(json);\n}\n\nexport function doPatch(uri, data) {\n  return doFetch(uri, 'PATCH', data, HEADERS).then(checkResponse);\n}\n\nexport function doDelete(uri) {\n  return doFetch(uri, 'DELETE').then(checkResponse);\n}\n","import { API_BASE, SOURCES_BASE } from '../config';\n\nimport axios from 'axios';\nimport {\n  RemediationsApi,\n  ResolutionsApi,\n  RemediationsApiAxiosParamCreator,\n} from '@redhat-cloud-services/remediations-client';\nimport { DefaultApi } from '@redhat-cloud-services/sources-client';\n\n/*\n * TODO: replace these with generated clients\n */\nimport { doGet } from '../Utilities/http';\nimport urijs from 'urijs';\n\nfunction url(...args) {\n  const url = urijs(API_BASE).segment('remediations');\n  args.forEach((segment) => url.segment(segment));\n  return url;\n}\n\nexport const getRemediationStatus = (id) => doGet(url(id, 'status'));\nexport function getHosts() {\n  return doGet('/api/inventory/v1/hosts');\n}\n/*\n * end of TODO\n */\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function authInterceptor(config) {\n  await window.insights.chrome.auth.getUser();\n  return config;\n}\n\nfunction responseDataInterceptor(response) {\n  if (response.data) {\n    return { ...response.data, etag: response.headers.etag };\n  }\n\n  return response;\n}\n\nfunction interceptor401(err) {\n  if (!err) {\n    return;\n  }\n\n  if (err.response && err.response.status === 401) {\n    window.insights.chrome.auth.logout();\n    return false;\n  }\n\n  throw err;\n}\n\nfunction errorInterceptor(err) {\n  if (!err) {\n    return;\n  }\n\n  if (\n    err.response &&\n    err.response.data &&\n    err.response.data.errors &&\n    err.response.data.errors.length\n  ) {\n    const error = err.response.data.errors[0];\n\n    if (error.details && error.details.name) {\n      throw new HttpError(`${error.title} (${error.details.name})`);\n    }\n\n    throw new HttpError(error.title);\n  }\n\n  throw err;\n}\n\nconst instance = axios.create();\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport const remediations = new RemediationsApi(undefined, API_BASE, instance);\nexport const resolutions = new ResolutionsApi(undefined, API_BASE, instance);\nexport const sources = new DefaultApi(undefined, SOURCES_BASE, instance);\n\nexport function downloadPlaybook(selectedIds) {\n  return new Promise((resolve, reject) => {\n    const tab =\n      selectedIds.length > 1\n        ? new RemediationsApiAxiosParamCreator()\n            .downloadPlaybooks(selectedIds)\n            .then((value) => window.open(API_BASE + value.url))\n        : new RemediationsApiAxiosParamCreator()\n            .getRemediationPlaybook(selectedIds[0])\n            .then((value) => window.open(API_BASE + value.url));\n\n    if (!tab) {\n      return reject();\n    }\n\n    const handle = setInterval(() => {\n      if (tab.closed) {\n        clearInterval(handle);\n        resolve();\n      }\n    }, 500);\n  });\n}\n\nexport function getIsReceptorConfigured() {\n  return doGet(\n    `${window.location.origin}/api/sources/v2.0/endpoints?filter[receptor_node][not_nil]`\n  );\n}\n\nexport function deleteSystemsFromRemediation(systems, remediation) {\n  return Promise.all(\n    systems.flatMap((system) =>\n      system.issues.map((issue) =>\n        remediations.deleteRemediationIssueSystem(\n          remediation.id,\n          issue.id,\n          system.id\n        )\n      )\n    )\n  );\n}\n\nfunction checkResponse(r) {\n  if (!r.ok) {\n    const error = new Error(`Unexpected response code ${r.status}`);\n    error.statusCode = r.status;\n    throw error;\n  }\n\n  return r;\n}\n\nfunction json(r) {\n  checkResponse(r);\n  return r.json();\n}\n\nconst headers = Object.freeze({\n  'Content-Type': 'application/json; charset=utf-8',\n});\n\nexport function createRemediation(data) {\n  const uri = new urijs(API_BASE).segment('remediations').toString();\n  return fetch(uri, {\n    headers,\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify(data),\n  }).then(json);\n}\n\nexport function patchRemediation(id, data) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  }).then(checkResponse);\n}\n\nexport function getRemediations() {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .query({ limit: 200 })\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getRemediation(id) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getResolutionsBatch(issues) {\n  const uri = new urijs(API_BASE).segment('resolutions').toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'POST',\n    body: JSON.stringify({ issues }),\n  }).then(json);\n}\n","export const API_BASE = '/api/remediations/v1';\nexport const SOURCES_BASE = '/api/sources/v2.0';\nexport const isBeta = insights?.chrome?.isBeta;\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst asyncActions = flatMap(\n  [\n    'LOAD_REMEDIATIONS',\n    'CREATE_REMEDIATIONS',\n    'LOAD_REMEDIATION',\n    'LOAD_REMEDIATION_STATUS',\n    'REFRESH_REMEDIATION',\n    'PATCH_REMEDIATION',\n    'DELETE_REMEDIATION',\n    'DELETE_REMEDIATION_ISSUE',\n    'DELETE_REMEDIATION_ISSUE_SYSTEM',\n    'PATCH_REMEDIATION_ISSUE',\n    'GET_RESOLUTIONS',\n    'GET_CONNECTION_STATUS',\n    'RUN_REMEDIATION',\n    'EXECUTE_PLAYBOOK_BANNER',\n    'RUN_REMEDIATION',\n    'GET_PLAYBOOK_RUNS',\n    'GET_PLAYBOOK_RUN',\n    'GET_PLAYBOOK_RUN_SYSTEMS',\n    'GET_PLAYBOOK_RUN_SYSTEM_DETAILS',\n    'CANCEL_PLAYBOOK_RUNS',\n    'GET_ENDPOINT',\n    'CHECK_EXECUTABLE',\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nconst actions = ['SET_ETAG', 'EXPAND_INVENTORY_TABLE', 'SELECT_ENTITY'];\nexport const ACTION_TYPES = keyBy([...asyncActions, ...actions], (k) => k);\n\nexport const SEARCH_DEBOUNCE_DELAY = 500;\n\nexport const FETCH_SELECTED_HOSTS = 'FETCH_SELECTED_HOSTS';\nexport const FETCH_RESOLUTIONS = 'FETCH_RESOLUTIONS';\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\n\nexport const selectPlaybookFields = [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields,\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.small}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Unexpected error\n      </Title>\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  FormSelect,\n  FormSelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <FormSelect\n                onChange={(val) => {\n                  setIsLoadingRemediation(true);\n                  api.getRemediation(val).then((remediation) => {\n                    setSelectedPlaybook(remediation);\n                    setIsLoadingRemediation(false);\n                    existingPlaybookSelected &&\n                      input.onChange(remediation.name);\n                    existingPlaybookSelected &&\n                      formOptions.change(EXISTING_PLAYBOOK, remediation);\n                  });\n                }}\n                value={selectedPlaybook?.id || ''}\n                aria-label=\"Select an existing playbook\"\n              >\n                {existingRemediations?.length ? (\n                  [\n                    <FormSelectOption\n                      key=\"select-playbook-placeholder\"\n                      value=\"\"\n                      label=\"Select playbook\"\n                      isDisabled\n                    />,\n                    ...existingRemediations.map(({ id, name }) => (\n                      <FormSelectOption key={id} value={id} label={name} />\n                    )),\n                  ]\n                ) : (\n                  <FormSelectOption\n                    key=\"empty\"\n                    value=\"empty\"\n                    label=\"No existing playbooks\"\n                  />\n                )}\n              </FormSelect>\n            ) : (\n              <Skeleton size={SkeletonSize.lg} />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(val) => {\n                  setNewPlaybookName(val);\n                  existingPlaybookSelected || input.onChange(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n              />\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { dedupeArray, TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = dedupeArray([\n        ...systems,\n        ...(curr.systems || []),\n      ]).filter((id) => selected?.includes(id));\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-systems\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Router>\n          <SystemsTable\n            registry={registry}\n            allSystemsNamed={allSystemsNamed}\n            allSystems={allSystems}\n            hasCheckbox={true}\n            bulkSelect={{\n              id: 'select-systems',\n              count: selected.length,\n              items: [\n                {\n                  title: 'Select none (0)',\n                  onClick: () => onSelectRows(false),\n                },\n                ...(loaded && rowsLength > 0\n                  ? [\n                      {\n                        title: `Select page (${rowsLength})`,\n                        onClick: () => onSelectRows(true),\n                      },\n                    ]\n                  : []),\n              ],\n              checked: selected.length > 0,\n              onSelect: (value) => onSelectRows(value),\n            }}\n            onSelectRows\n          />\n        </Router>\n      </StackItem>\n      {error && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">{error}</span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-actions\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"rem-c-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"rem-c-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { RedoIcon, CloseIcon } from '@patternfly/react-icons';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div\n              className=\"ins-c-resolution-option\"\n              sm={12}\n              md={6}\n              lg={4}\n              xl={3}\n              key={resolution.id}\n            >\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      {resolution.needs_reboot ? <RedoIcon /> : <CloseIcon />}\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() => input.onChange(!input.value)}\n        >\n          Turn {input.value ? 'off' : 'on'} autoreboot\n        </Button>\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      id={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateIcon\n        className=\"pf-u-mb-lg pf-u-mt-sm\"\n        color={\n          failed\n            ? 'var(--pf-global--danger-color--100)'\n            : percent === 100\n            ? 'var(--pf-global--success-color--100)'\n            : undefined\n        }\n        icon={\n          failed\n            ? ExclamationCircleIcon\n            : percent === 100\n            ? CheckCircleIcon\n            : InProgressIcon\n        }\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {failed\n          ? 'Error: Unable to add items to playbook'\n          : percent === 100\n          ? 'Items added to playbook'\n          : 'Adding items to the playbook'}\n      </Title>\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      {(failed || percent === 100) && (\n        <EmptyStateBody className=\"pf-c-progress-message\">\n          {failed ? (\n            'Please try again.'\n          ) : (\n            <div>\n              {`${issues.length} ${pluralize(\n                issues.length,\n                'action'\n              )} affecting \n                        ${systems.length} ${pluralize(\n                systems.length,\n                'system'\n              )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n              <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n            </div>\n          )}\n        </EmptyStateBody>\n      )}\n      {percent === 100 && (\n        <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n          You can remediate these systems directly from Insights by enabling\n          <Button\n            className=\"pf-u-py-0 pf-u-px-xs\"\n            variant=\"link\"\n            ouiaId=\"CloudConnectorButton\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isSmall\n            onClick={() =>\n              (window.location.href = `${\n                window.location.origin\n              }/${getEnvUrl()}settings/connector`)\n            }\n          >\n            Cloud Connector\n          </Button>\n          on eligible systems.\n        </EmptyStateBody>\n      )}\n      {failed && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"TryAgainButton\"\n          onClick={() => {\n            setState({ failed: false, percent: 0 });\n            submitRemediation(false);\n          }}\n        >\n          Try again\n        </Button>\n      )}\n      {percent === 100 && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"ReturnToAppButton\"\n          onClick={() => {\n            onClose();\n            setOpen(false);\n          }}\n        >\n          Return to application\n        </Button>\n      )}\n      <EmptyStateSecondaryActions>\n        {failed && (\n          <Button\n            variant=\"secondary\"\n            ouiaId=\"BackToWizardButton\"\n            onClick={() => {\n              onClose();\n            }}\n          >\n            Go back to the wizard\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            variant=\"link\"\n            component=\"a\"\n            ouiaId=\"OpenPlaybookButton\"\n            href={remediationUrl(playbook.id)}\n            onClick={() => {\n              onClose();\n              setOpen(false);\n            }}\n          >\n            Open playbook {playbook.name}\n          </Button>\n        )}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...(data.systems || [])]\n      )\n    )\n  );\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    setState({ type: 'schema', payload: schemaBuilder(data.issues) });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, []);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems || [],\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== undefined).length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n  const sortableColumns = ['display_name'];\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.reduce(\n          (acc, curr) => [\n            ...acc,\n            ...(!disabledColumns.includes(curr.key)\n              ? [\n                  {\n                    ...curr,\n                    props: {\n                      ...(curr.props || {}),\n                      isStatic: !sortableColumns.includes(curr.key),\n                    },\n                  },\n                ]\n              : []),\n          ],\n          []\n        )\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      onRefresh={(options) => inventory.current.onRefreshData(options)}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(\n          config,\n          sortableColumns,\n          allSystemsNamed,\n          defaultGetEntities\n        )\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"names":["capitalize","string","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","document","baseURI","filter","s","length","shift","dedupeArray","array","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","isOpen","cells","title","action","Fragment","resolution","alternate","needsReboot","RedoIcon","className","CloseIcon","systems","props","parent","fullWidth","system","includes","allSystems","Bullseye","Spinner","colSpan","buildSystemRow","disabledColumns","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","issueResolutions","find","r","resolutions","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","playbookSystems","issue","interval","setInterval","add","isUpdate","api","auto_reboot","name","then","onRemediationCreated","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","failed","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","sortByAttr","attribute","Array","isArray","fetchSystemsInfo","config","sortableColumns","getEntities","isSortingValid","orderBy","undefined","orderDirection","toLowerCase","hostnameOrId","filters","sliced","page","per_page","hasItems","results","total","sortBy","splitArray","inputArray","perChunk","Math","ceil","_item","inventoryEntitiesReducer","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","rowsIds","item","entitySelected","loadEntitiesFulfilled","shortenIssueId","getIssuesMultiple","needs_reboot","record","matchPermissions","permissionA","permissionB","segmentsA","segmentsB","every","segmentA","HttpError","Error","checkResponse","ok","status","insights","chrome","auth","logout","headers","get","json","errors","error","details","type","doGet","uri","opts","credentials","method","body","JSON","stringify","fetch","doFetch","toString","getRemediationStatus","url","urijs","API_BASE","segment","args","forEach","getHosts","getUser","instance","axios","interceptors","request","use","response","etag","err","remediations","RemediationsApi","ResolutionsApi","sources","DefaultApi","SOURCES_BASE","downloadPlaybook","selectedIds","Promise","resolve","reject","tab","RemediationsApiAxiosParamCreator","downloadPlaybooks","value","open","getRemediationPlaybook","handle","closed","getIsReceptorConfigured","origin","deleteSystemsFromRemediation","all","flatMap","deleteRemediationIssueSystem","statusCode","freeze","createRemediation","patchRemediation","getRemediations","query","limit","getRemediation","getResolutionsBatch","isBeta","asyncActions","ACTION_TYPES","keyBy","k","SEARCH_DEBOUNCE_DELAY","FETCH_SELECTED_HOSTS","FETCH_RESOLUTIONS","hosts","HostsApi","getHostsById","perPage","apiHostGetHostById","fetchHostsById","options","HostHelper","batchResolutions","result","transform","push","warnings","hostsInitialState","isLoading","selectPlaybookFields","component","validate","validatorTypes","pattern","componentTypes","hideField","reviewActionsFields","FetchError","resolutionsCount","useFieldApi","input","valid","EmptyState","EmptyStateVariant","EmptyStateIcon","color","red","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","propTypes","SelectPlaybook","formOptions","useFormApi","values","getState","useState","existingRemediations","setExistingRemediations","existingPlaybookSelected","setExistingPlaybookSelected","newPlaybookName","setNewPlaybookName","selectedPlaybook","setSelectedPlaybook","isLoadingRemediation","setIsLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","useEffect","fetchData","differenceWith","isEqual","change","Stack","hasGutter","StackItem","Alert","isInline","Text","Popover","bodyContent","warning","Button","TextContent","Grid","GridItem","sm","md","lg","Radio","label","isDisabled","defaultChecked","onChange","FormSelect","val","FormSelectOption","Skeleton","SkeletonSize","FormGroup","fieldId","TextInput","autoFocus","isRequired","ReviewSystems","registry","dispatch","useDispatch","rowsLength","entities","loaded","hostReducer","host","display_name","tempSystems","onSelectRows","SystemsTable","hasCheckbox","bulkSelect","items","onClick","checked","onSelect","ReducerRegistry","ReviewActions","setSortByState","multiples","some","isChecked","Table","TableVariant","transforms","sortable","cellFormatters","expandable","onSort","TableHeader","noWrap","TableBody","IssueResolution","uniqueResolutions","uniqBy","removedResolutions","xl","Tile","isSelected","Review","issuesById","ExclamationTriangleIcon","resolutionsInitialState","ProgressBar","ProgressVariant","Progress","onClose","setOpen","flat","playbook","CheckCircleIcon","InProgressIcon","ouiaId","ExternalLinkAltIcon","iconPosition","isSmall","EmptyStateSecondaryActions","PropTypes","initialState","submitted","reducer","schema","RemediationWizard","useRef","useReducer","fields","isDynamic","inModal","showTitles","nextStep","filteredIssues","showTitle","findIndex","issueResolutionNextStep","substepOf","register","fetchResolutions","chunk","fetchHostNames","current","mapperExtension","review","validatorMapper","subscription","FormTemplate","showFormControls","initialValues","componentMapper","WizardMapper","TextField","onSubmit","onCancel","Modal","ModalVariant","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","promiseMiddleware","store","Provider","inventory","hideFilters","tags","registeredWith","stale","columns","isStatic","noDetail","showTags","onRefresh","onRefreshData","ref","_i","defaultGetEntities","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","entitiesReducer","tableProps","canSelectAll","defaultProps","SystemsTableWithContext"],"sourceRoot":""}