{"version":3,"sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/Utilities/http.js","webpack:///./src/api/index.js","webpack:///./src/config.js","webpack:///./src/constants.js","webpack:///./src/api/inventory.js","webpack:///./src/store/actions/host-actions.js","webpack:///./src/store/actions/resolution-actions.js","webpack:///./src/store/reducers/host-reducer.js","webpack:///./src/modules/RemediationsModal/schema.js","webpack:///./src/modules/RemediationsModal/steps/fetchError.js","webpack:///./src/modules/RemediationsModal/steps/selectPlaybook.js","webpack:///./src/modules/RemediationsModal/steps/reviewSystems.js","webpack:///./src/modules/RemediationsModal/steps/reviewActions.js","webpack:///./src/modules/RemediationsModal/steps/issueResolution.js","webpack:///./src/modules/RemediationsModal/steps/review.js","webpack:///./src/store/reducers/resolutions-reducer.js","webpack:///./src/modules/RemediationsModal/common/ProgressBar.js","webpack:///./src/modules/RemediationsModal/steps/progress.js","webpack:///./src/modules/RemediationsModal/RemediationsWizard.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"names":["capitalize","string","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","urijs","document","baseURI","segment","pathName","toString","dedupeArray","array","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","isOpen","cells","title","action","Fragment","resolution","alternate","needsReboot","RedoIcon","className","CloseIcon","systems","length","props","parent","fullWidth","filter","system","includes","allSystems","disabledColumns","colSpan","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","issueResolutions","find","r","resolutions","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","playbookSystems","s","issue","interval","setInterval","add","isUpdate","api","auto_reboot","name","then","onRemediationCreated","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","failed","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","fetchSystemsInfo","config","getEntities","hostnameOrId","filters","toLowerCase","sliced","page","per_page","hasItems","total","splitArray","inputArray","perChunk","Array","Math","ceil","_item","inventoryEntitiesReducer","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","rowsIds","item","entitySelected","loadEntitiesFulfilled","shortenIssueId","getIssuesMultiple","needs_reboot","record","HttpError","Error","checkResponse","ok","status","insights","chrome","auth","logout","headers","get","json","errors","error","details","type","doGet","uri","opts","credentials","method","body","JSON","stringify","fetch","doFetch","getRemediationStatus","url","API_BASE","args","forEach","getHosts","getUser","instance","axios","interceptors","request","use","response","etag","err","remediations","RemediationsApi","undefined","ResolutionsApi","sources","DefaultApi","SOURCES_BASE","downloadPlaybook","selectedIds","Promise","resolve","reject","tab","RemediationsApiAxiosParamCreator","downloadPlaybooks","value","open","getRemediationPlaybook","handle","closed","getIsReceptorConfigured","origin","deleteSystemsFromRemediation","all","flatMap","deleteRemediationIssueSystem","statusCode","freeze","createRemediation","patchRemediation","getRemediations","query","limit","getRemediation","getResolutionsBatch","asyncActions","ACTION_TYPES","keyBy","k","SEARCH_DEBOUNCE_DELAY","FETCH_SELECTED_HOSTS","FETCH_RESOLUTIONS","hosts","HostsApi","getHostsById","perPage","apiHostGetHostById","fetchHostsById","options","HostHelper","batchResolutions","result","transform","push","warnings","hostsInitialState","isLoading","results","selectPlaybookFields","component","validate","validatorTypes","pattern","componentTypes","hideField","reviewActionsFields","FetchError","resolutionsCount","useFieldApi","input","valid","EmptyState","EmptyStateVariant","EmptyStateIcon","color","red","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","propTypes","SelectPlaybook","formOptions","useFormApi","values","getState","useState","existingRemediations","setExistingRemediations","existingPlaybookSelected","setExistingPlaybookSelected","newPlaybookName","setNewPlaybookName","selectedPlaybook","setSelectedPlaybook","isLoadingRemediation","setIsLoadingRemediation","useSelector","resolutionsReducer","shallowEqual","useEffect","fetchData","differenceWith","isEqual","change","Stack","hasGutter","StackItem","Alert","isInline","Text","Popover","bodyContent","warning","Button","TextContent","Grid","GridItem","sm","md","lg","Radio","label","isDisabled","defaultChecked","onChange","FormSelect","val","FormSelectOption","Skeleton","SkeletonSize","FormGroup","fieldId","TextInput","autoFocus","isRequired","ReviewSystems","registry","dispatch","useDispatch","rowsLength","entities","loaded","hostReducer","host","display_name","tempSystems","onSelectRows","SystemsTable","hasCheckbox","bulkSelect","items","onClick","checked","onSelect","ReducerRegistry","ReviewActions","setSortByState","multiples","some","isChecked","Table","TableVariant","transforms","sortable","cellFormatters","expandable","onSort","sortBy","TableHeader","noWrap","TableBody","IssueResolution","uniqueResolutions","uniqBy","removedResolutions","xl","Tile","isSelected","Review","issuesById","ExclamationTriangleIcon","resolutionsInitialState","ProgressBar","ProgressVariant","Progress","onClose","setOpen","flat","playbook","CheckCircleIcon","InProgressIcon","ouiaId","ExternalLinkAltIcon","iconPosition","isSmall","EmptyStateSecondaryActions","PropTypes","initialState","submitted","reducer","schema","RemediationWizard","useRef","useReducer","fields","isDynamic","inModal","showTitles","nextStep","filteredIssues","showTitle","findIndex","issueResolutionNextStep","substepOf","register","fetchResolutions","chunk","fetchHostNames","current","mapperExtension","review","validatorMapper","subscription","FormTemplate","showFormControls","initialValues","componentMapper","WizardMapper","TextField","onSubmit","onCancel","Modal","ModalVariant","showClose","hasNoBodyWrapper","Wizard","steps","isFinishedStep","setRegistry","promiseMiddleware","store","Provider","inventory","hideFilters","tags","registeredWith","stale","columns","column","noDetail","showTags","onRefresh","onRefreshData","ref","_i","defaultGetEntities","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","entitiesReducer","tableProps","canSelectAll","defaultProps","SystemsTableWithContext"],"mappings":"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","file":"js/381.07cc9add343934d64774.js","sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { CloseIcon, RedoIcon } from '@patternfly/react-icons';\nimport urijs from 'urijs';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'beta' ? pathName[2] : pathName[1];\n};\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'beta' ? 'beta/' : '';\n};\n\nexport const remediationUrl = (id) =>\n  urijs(document.baseURI)\n    .segment(getGroup())\n    .segment('remediations')\n    .segment(id)\n    .toString();\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>\n                <RedoIcon className=\"pf-u-mr-sm\" />\n                Yes\n              </div>\n            ) : (\n              <div>\n                <CloseIcon className=\"pf-u-mr-sm\" />\n                No\n              </div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              cells: [\n                {\n                  title: (\n                    <Router>\n                      <SystemsTableWithContext\n                        allSystemsNamed={allSystemsNamed.filter((system) =>\n                          curr.systems.includes(system.id)\n                        )}\n                        allSystems={curr.systems}\n                        disabledColumns={['updated']}\n                      />\n                    </Router>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK],\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    .then(({ id }) => {\n      setState({ id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(id, formValues[SELECT_PLAYBOOK], !isUpdate),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n\n  return {\n    ...state,\n    selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !!selected?.includes(id),\n    })),\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const fetchSystemsInfo = async (\n  config,\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ||\n          curr.id.toLowerCase().includes(hostnameOrId)\n            ? [curr.id]\n            : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(sliced, { ...config, hasItems: true, page: 1 }, true)\n      : {};\n  return {\n    ...data,\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state) =>\n      loadEntitiesFulfilled(state, allSystems),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n","const HEADERS = {\n  'Content-Type': 'application/json; charset=utf-8',\n};\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function checkResponse(r) {\n  if (r.ok) {\n    return r;\n  }\n\n  if (r.status === 401) {\n    window.insights.chrome.auth.logout();\n    return;\n  }\n\n  if (r.headers.get('content-type').includes('application/json')) {\n    // let's try to extract some more info\n    let data = false;\n    try {\n      data = await r.json();\n    } catch (e) {} // eslint-disable-line no-empty\n\n    if (data.errors && data.errors.length) {\n      const error = data.errors[0];\n\n      if (error.details && error.details.name) {\n        throw new HttpError(`${error.title} (${error.details.name})`);\n      }\n\n      throw new HttpError(error.title);\n    }\n  }\n\n  throw new HttpError(`Unexpected response code ${r.status}`);\n}\n\nasync function json(r) {\n  if (!r) {\n    return;\n  }\n\n  const type = r.headers.get('content-type');\n  if (!type.includes('application/json')) {\n    throw new HttpError(`Unexpected response type (${type}) returned`);\n  }\n\n  return r.json();\n}\n\nfunction doFetch(\n  uri,\n  method = 'GET',\n  data = false,\n  headers = false,\n  options = {}\n) {\n  const opts = {\n    credentials: 'same-origin',\n    method,\n    ...options,\n  };\n\n  if (headers) {\n    opts.headers = headers;\n  }\n\n  if (data) {\n    opts.body = JSON.stringify(data);\n  }\n\n  return fetch(uri, opts);\n}\n\nexport function doGet(uri) {\n  return doFetch(uri.toString()).then(checkResponse).then(json);\n}\n\nexport function doPost(uri, data) {\n  return doFetch(uri, 'POST', data, HEADERS).then(checkResponse).then(json);\n}\n\nexport function doPatch(uri, data) {\n  return doFetch(uri, 'PATCH', data, HEADERS).then(checkResponse);\n}\n\nexport function doDelete(uri) {\n  return doFetch(uri, 'DELETE').then(checkResponse);\n}\n","import { API_BASE, SOURCES_BASE } from '../config';\n\nimport axios from 'axios';\nimport {\n  RemediationsApi,\n  ResolutionsApi,\n  RemediationsApiAxiosParamCreator,\n} from '@redhat-cloud-services/remediations-client';\nimport { DefaultApi } from '@redhat-cloud-services/sources-client';\n\n/*\n * TODO: replace these with generated clients\n */\nimport { doGet } from '../Utilities/http';\nimport urijs from 'urijs';\n\nfunction url(...args) {\n  const url = urijs(API_BASE).segment('remediations');\n  args.forEach((segment) => url.segment(segment));\n  return url;\n}\n\nexport const getRemediationStatus = (id) => doGet(url(id, 'status'));\nexport function getHosts() {\n  return doGet('/api/inventory/v1/hosts');\n}\n/*\n * end of TODO\n */\n\nclass HttpError extends Error {\n  constructor(description) {\n    super('Error communicating with the server');\n    this.description = description;\n  }\n}\n\nasync function authInterceptor(config) {\n  await window.insights.chrome.auth.getUser();\n  return config;\n}\n\nfunction responseDataInterceptor(response) {\n  if (response.data) {\n    return { ...response.data, etag: response.headers.etag };\n  }\n\n  return response;\n}\n\nfunction interceptor401(err) {\n  if (!err) {\n    return;\n  }\n\n  if (err.response && err.response.status === 401) {\n    window.insights.chrome.auth.logout();\n    return false;\n  }\n\n  throw err;\n}\n\nfunction errorInterceptor(err) {\n  if (!err) {\n    return;\n  }\n\n  if (\n    err.response &&\n    err.response.data &&\n    err.response.data.errors &&\n    err.response.data.errors.length\n  ) {\n    const error = err.response.data.errors[0];\n\n    if (error.details && error.details.name) {\n      throw new HttpError(`${error.title} (${error.details.name})`);\n    }\n\n    throw new HttpError(error.title);\n  }\n\n  throw err;\n}\n\nconst instance = axios.create();\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport const remediations = new RemediationsApi(undefined, API_BASE, instance);\nexport const resolutions = new ResolutionsApi(undefined, API_BASE, instance);\nexport const sources = new DefaultApi(undefined, SOURCES_BASE, instance);\n\nexport function downloadPlaybook(selectedIds) {\n  return new Promise((resolve, reject) => {\n    const tab =\n      selectedIds.length > 1\n        ? new RemediationsApiAxiosParamCreator()\n            .downloadPlaybooks(selectedIds)\n            .then((value) => window.open(API_BASE + value.url))\n        : new RemediationsApiAxiosParamCreator()\n            .getRemediationPlaybook(selectedIds[0])\n            .then((value) => window.open(API_BASE + value.url));\n\n    if (!tab) {\n      return reject();\n    }\n\n    const handle = setInterval(() => {\n      if (tab.closed) {\n        clearInterval(handle);\n        resolve();\n      }\n    }, 500);\n  });\n}\n\nexport function getIsReceptorConfigured() {\n  return doGet(\n    `${window.location.origin}/api/sources/v2.0/endpoints?filter[receptor_node][not_nil]`\n  );\n}\n\nexport function deleteSystemsFromRemediation(systems, remediation) {\n  return Promise.all(\n    systems.flatMap((system) =>\n      system.issues.map((issue) =>\n        remediations.deleteRemediationIssueSystem(\n          remediation.id,\n          issue.id,\n          system.id\n        )\n      )\n    )\n  );\n}\n\nfunction checkResponse(r) {\n  if (!r.ok) {\n    const error = new Error(`Unexpected response code ${r.status}`);\n    error.statusCode = r.status;\n    throw error;\n  }\n\n  return r;\n}\n\nfunction json(r) {\n  checkResponse(r);\n  return r.json();\n}\n\nconst headers = Object.freeze({\n  'Content-Type': 'application/json; charset=utf-8',\n});\n\nexport function createRemediation(data) {\n  const uri = new urijs(API_BASE).segment('remediations').toString();\n  return fetch(uri, {\n    headers,\n    method: 'POST',\n    credentials: 'include',\n    body: JSON.stringify(data),\n  }).then(json);\n}\n\nexport function patchRemediation(id, data) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  }).then(checkResponse);\n}\n\nexport function getRemediations() {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .query({ limit: 200 })\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getRemediation(id) {\n  const uri = new urijs(API_BASE)\n    .segment('remediations')\n    .segment(id)\n    .toString();\n  return fetch(uri, { credentials: 'include' }).then(json);\n}\n\nexport function getResolutionsBatch(issues) {\n  const uri = new urijs(API_BASE).segment('resolutions').toString();\n  return fetch(uri, {\n    headers,\n    credentials: 'include',\n    method: 'POST',\n    body: JSON.stringify({ issues }),\n  }).then(json);\n}\n","export const API_BASE = '/api/remediations/v1';\nexport const SOURCES_BASE = '/api/sources/v2.0';\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nconst asyncActions = flatMap(\n  [\n    'LOAD_REMEDIATIONS',\n    'CREATE_REMEDIATIONS',\n    'LOAD_REMEDIATION',\n    'LOAD_REMEDIATION_STATUS',\n    'REFRESH_REMEDIATION',\n    'PATCH_REMEDIATION',\n    'DELETE_REMEDIATION',\n    'DELETE_REMEDIATION_ISSUE',\n    'DELETE_REMEDIATION_ISSUE_SYSTEM',\n    'PATCH_REMEDIATION_ISSUE',\n    'GET_RESOLUTIONS',\n    'GET_CONNECTION_STATUS',\n    'RUN_REMEDIATION',\n    'EXECUTE_PLAYBOOK_BANNER',\n    'RUN_REMEDIATION',\n    'GET_PLAYBOOK_RUNS',\n    'GET_PLAYBOOK_RUN',\n    'GET_PLAYBOOK_RUN_SYSTEMS',\n    'GET_PLAYBOOK_RUN_SYSTEM_DETAILS',\n    'CANCEL_PLAYBOOK_RUNS',\n    'GET_ENDPOINT',\n    'CHECK_EXECUTABLE',\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\n\nconst actions = ['SET_ETAG', 'EXPAND_INVENTORY_TABLE', 'SELECT_ENTITY'];\nexport const ACTION_TYPES = keyBy([...asyncActions, ...actions], (k) => k);\n\nexport const SEARCH_DEBOUNCE_DELAY = 500;\n\nexport const FETCH_SELECTED_HOSTS = 'FETCH_SELECTED_HOSTS';\nexport const FETCH_RESOLUTIONS = 'FETCH_RESOLUTIONS';\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport function getHostsById(systems, { page, perPage }) {\n  return hosts.apiHostGetHostById(systems, undefined, perPage, page);\n}\n","import * as HostHelper from '../../api/inventory';\nimport { FETCH_SELECTED_HOSTS } from '../../constants';\n\nexport const fetchHostsById = (systems, options = {}) => ({\n  type: FETCH_SELECTED_HOSTS,\n  payload: HostHelper.getHostsById(systems, options),\n});\n","import * as api from '../../api';\nimport { FETCH_RESOLUTIONS } from '../../constants';\nimport transform from 'lodash/transform';\n\nconst batchResolutions = async (issues) => {\n  try {\n    const result = await api.getResolutionsBatch(issues.map((i) => i.id));\n\n    const [resolutions, warnings] = transform(\n      result,\n      ([resolutions, errors], value, key) => {\n        if (!value) {\n          errors.push(`Issue ${key} does not have Ansible support`);\n        } else {\n          resolutions.push(value);\n        }\n\n        return [resolutions, errors];\n      },\n      [[], []]\n    );\n\n    return { resolutions, warnings };\n  } catch (e) {\n    return {\n      errors: [\n        'Error obtaining resolution information. Please try again later.',\n      ],\n    };\n  }\n};\n\nexport const fetchResolutions = (issues = []) => ({\n  type: FETCH_RESOLUTIONS,\n  payload: batchResolutions(issues),\n});\n","import { FETCH_SELECTED_HOSTS } from '../../constants';\n\n// Initial State\nexport const hostsInitialState = {\n  isLoading: false,\n  hosts: [],\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setHosts = (state, { payload }) => ({\n  ...state,\n  hosts: [...state.hosts, ...(payload.results || [])],\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_SELECTED_HOSTS}_FULFILLED`]: setHosts,\n  [`${FETCH_SELECTED_HOSTS}_PENDING`]: setLoadingState,\n};\n","import componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  SELECT_PLAYBOOK,\n  MANUAL_RESOLUTION,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECTED_RESOLUTIONS,\n  AUTO_REBOOT,\n  SYSTEMS,\n  ISSUES_MULTIPLE,\n  RESOLUTIONS,\n  shortenIssueId,\n} from '../../Utilities/utils';\n\nexport const selectPlaybookFields = [\n  {\n    name: SELECT_PLAYBOOK,\n    component: 'select-playbook',\n    validate: [\n      {\n        type: validatorTypes.PATTERN,\n        pattern: /^$|^.*[\\w\\d]+.*$/,\n      },\n      {\n        type: validatorTypes.REQUIRED,\n      },\n    ],\n  },\n  {\n    name: EXISTING_PLAYBOOK_SELECTED,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: EXISTING_PLAYBOOK,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n  {\n    name: RESOLUTIONS,\n    component: componentTypes.TEXT_FIELD,\n    hideField: true,\n  },\n];\n\nexport const reviewActionsFields = [\n  {\n    name: MANUAL_RESOLUTION,\n    component: 'review-actions',\n  },\n];\n\nexport const reviewActionsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id) &&\n          Object.keys(values[SYSTEMS]).includes(issue.id)\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return values[MANUAL_RESOLUTION] ? filteredIssues[0]?.id : 'review';\n};\n\nexport const issueResolutionNextStep = (values, issue) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return (\n    filteredIssues.slice(\n      filteredIssues.findIndex((i) => i.id === issue.id) + 1,\n      filteredIssues.length\n    )[0]?.id || 'review'\n  );\n};\n\nexport const reviewSystemsNextStep = (values) => {\n  const filteredIssues = values[EXISTING_PLAYBOOK_SELECTED]\n    ? values[ISSUES_MULTIPLE].filter(\n        (issue) =>\n          !values[EXISTING_PLAYBOOK].issues.some(\n            (i) =>\n              i.id === issue.id &&\n              Object.keys(values[SYSTEMS]).includes(issue.id)\n          )\n      )\n    : values[ISSUES_MULTIPLE].filter((issue) =>\n        Object.keys(values[SYSTEMS]).includes(issue.id)\n      );\n  return filteredIssues.length > 0 ? 'actions' : 'review';\n};\n\nexport default (issues) => ({\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'remediations-wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Remediate with Ansible',\n      description: 'Add actions to an Ansible Playbook',\n      fields: [\n        {\n          name: 'playbook',\n          title: 'Select playbook',\n          fields: selectPlaybookFields,\n          nextStep: 'systems',\n        },\n        {\n          name: 'systems',\n          title: 'Review systems',\n          fields: [\n            {\n              name: SYSTEMS,\n              component: 'review-systems',\n              validate: [{ type: 'validate-systems' }],\n            },\n          ],\n          nextStep: ({ values }) => reviewSystemsNextStep(values),\n        },\n        {\n          name: 'actions',\n          title: 'Review and edit actions',\n          fields: reviewActionsFields,\n          nextStep: ({ values }) => reviewActionsNextStep(values, issues),\n        },\n        ...(issues?.map((issue) => ({\n          name: issue.id,\n          title: shortenIssueId(issue.id),\n          showTitle: false,\n          fields: [\n            {\n              name: issue.id,\n              component: 'issue-resolution',\n              issue,\n            },\n            {\n              name: SELECTED_RESOLUTIONS,\n              component: componentTypes.TEXT_FIELD,\n              hideField: true,\n            },\n          ],\n          nextStep: ({ values }) => issueResolutionNextStep(values, issue),\n          substepOf: 'Choose actions',\n        })) || []),\n        {\n          name: 'review',\n          title: 'Remediation review',\n          fields: [\n            {\n              name: AUTO_REBOOT,\n              component: 'review',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport red from '@patternfly/react-tokens/dist/js/global_palette_red_100';\n\nconst FetchError = (props) => {\n  const { resolutionsCount } = props;\n\n  const { input } = useFieldApi(props);\n  input.valid = false;\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.small}\n      data-component-ouia-id=\"wizard-fetch-error\"\n    >\n      <EmptyStateIcon color={red.value} icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Unexpected error\n      </Title>\n      <EmptyStateBody>\n        Please try again later.{' '}\n        {resolutionsCount !== 0 && (\n          <div>Hint: No resolutions for selected issues.</div>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nFetchError.propTypes = {\n  resolutionsCount: propTypes.number,\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport * as api from '../../../api';\nimport { Fragment } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport FetchError from './fetchError';\nimport {\n  FormGroup,\n  Grid,\n  GridItem,\n  Radio,\n  FormSelect,\n  FormSelectOption,\n  Text,\n  TextContent,\n  TextInput,\n  Stack,\n  StackItem,\n  Popover,\n  Button,\n  Alert,\n} from '@patternfly/react-core';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\nimport {\n  getIssuesMultiple,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../../Utilities/utils';\nimport './selectPlaybook.scss';\n\nconst SelectPlaybook = (props) => {\n  const { issues, systems, allSystems } = props;\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n\n  const [existingRemediations, setExistingRemediations] = useState();\n  const [existingPlaybookSelected, setExistingPlaybookSelected] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED]\n  );\n  const [newPlaybookName, setNewPlaybookName] = useState(\n    values[EXISTING_PLAYBOOK_SELECTED] ? '' : input.value\n  );\n  const [selectedPlaybook, setSelectedPlaybook] = useState(\n    values[EXISTING_PLAYBOOK]\n  );\n  const [isLoadingRemediation, setIsLoadingRemediation] = useState(false);\n\n  const errors = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.errors || [],\n    shallowEqual\n  );\n  const warnings = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.warnings || [],\n    shallowEqual\n  );\n  const resolutions = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.resolutions || [],\n    shallowEqual\n  );\n  const isLoading = useSelector(\n    ({ resolutionsReducer }) => resolutionsReducer?.isLoading\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data: existingRemediations } = await api.getRemediations();\n      setExistingRemediations(existingRemediations);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (differenceWith(resolutions, values[RESOLUTIONS], isEqual)?.length > 0) {\n      formOptions.change(RESOLUTIONS, resolutions);\n      formOptions.change(\n        ISSUES_MULTIPLE,\n        getIssuesMultiple(issues, systems, resolutions)\n      );\n    }\n  });\n\n  return errors.length <= 0 ? (\n    <Stack hasGutter data-component-ouia-id=\"wizard-select-playbook\">\n      <StackItem>\n        {warnings.length !== 0 && (\n          <StackItem>\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(warnings.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution error popover\"\n                    bodyContent={\n                      <Fragment>\n                        {warnings.map((warning, key) => (\n                          <div key={key}>{warning}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {warnings.length}\n                      </Button>{' '}\n                      {pluralize(warnings.length, 'error')}\n                    </b>\n                  </Popover>{' '}\n                  while fetching resolutions for your issues!{' '}\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            You selected{' '}\n            <b>\n              {`${allSystems.length} ${pluralize(allSystems.length, 'system')}`}{' '}\n            </b>\n            to remediate with Ansible, which in total includes{' '}\n            <b>{`${issues?.length} ${pluralize(issues?.length, 'issue')}`} </b>\n            {issues?.length !== resolutions.length && !isLoading ? (\n              <Fragment>\n                of which <b>{resolutions.length} </b>\n              </Fragment>\n            ) : (\n              'which'\n            )}{' '}\n            can be remediated by Ansible.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label={\n                existingRemediations\n                  ? `Add to existing playbook (${existingRemediations.length})`\n                  : 'Add to existing playbook'\n              }\n              aria-label=\"Add to existing playbook\"\n              id=\"existing\"\n              name=\"radio\"\n              isDisabled={!existingRemediations || !existingRemediations.length}\n              defaultChecked={existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(true);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, true);\n                input.onChange(selectedPlaybook?.name || '');\n                formOptions.change(EXISTING_PLAYBOOK, selectedPlaybook);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            {existingRemediations && !isLoadingRemediation ? (\n              <FormSelect\n                onChange={(val) => {\n                  setIsLoadingRemediation(true);\n                  api.getRemediation(val).then((remediation) => {\n                    setSelectedPlaybook(remediation);\n                    setIsLoadingRemediation(false);\n                    existingPlaybookSelected &&\n                      input.onChange(remediation.name);\n                    existingPlaybookSelected &&\n                      formOptions.change(EXISTING_PLAYBOOK, remediation);\n                  });\n                }}\n                value={selectedPlaybook?.id || ''}\n                aria-label=\"Select an existing playbook\"\n              >\n                {existingRemediations?.length ? (\n                  [\n                    <FormSelectOption\n                      key=\"select-playbook-placeholder\"\n                      value=\"\"\n                      label=\"Select playbook\"\n                      isDisabled\n                    />,\n                    ...existingRemediations.map(({ id, name }) => (\n                      <FormSelectOption key={id} value={id} label={name} />\n                    )),\n                  ]\n                ) : (\n                  <FormSelectOption\n                    key=\"empty\"\n                    value=\"empty\"\n                    label=\"No existing playbooks\"\n                  />\n                )}\n              </FormSelect>\n            ) : (\n              <Skeleton size={SkeletonSize.lg} />\n            )}\n          </GridItem>\n        </Grid>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={12} md={6} lg={4}>\n            <Radio\n              label=\"Create new playbook\"\n              aria-label=\"Create new playbook\"\n              id=\"new\"\n              name=\"radio\"\n              defaultChecked={!existingPlaybookSelected}\n              onChange={() => {\n                setExistingPlaybookSelected(false);\n                formOptions.change(EXISTING_PLAYBOOK_SELECTED, false);\n                input.onChange(newPlaybookName);\n                formOptions.change(EXISTING_PLAYBOOK, undefined);\n              }}\n            />\n          </GridItem>\n          <GridItem sm={12} md={6} lg={4}>\n            <FormGroup fieldId=\"remediation-name\">\n              <TextInput\n                type=\"text\"\n                value={newPlaybookName}\n                onChange={(val) => {\n                  setNewPlaybookName(val);\n                  existingPlaybookSelected || input.onChange(val);\n                }}\n                aria-label=\"Name your playbook\"\n                autoFocus\n              />\n            </FormGroup>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  ) : (\n    <FetchError />\n  );\n};\n\nSelectPlaybook.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default SelectPlaybook;\n","/* eslint-disable camelcase */\nimport React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { Text, TextContent, Stack, StackItem } from '@patternfly/react-core';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport isEqual from 'lodash/isEqual';\nimport SystemsTable from '../common/SystemsTable';\nimport { TOGGLE_BULK_SELECT } from '../../../Utilities/utils';\nimport './reviewSystems.scss';\n\nconst ReviewSystems = ({ issues, systems, allSystems, registry, ...props }) => {\n  let dispatch = useDispatch();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  const error = formOptions.getState().errors?.systems;\n\n  const rowsLength = useSelector(\n    ({ entities }) => (entities?.rows || []).length\n  );\n  const selected = useSelector(({ entities }) => entities?.selected || []);\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  useEffect(() => {\n    const value = issues?.reduce((acc, curr) => {\n      const tempSystems = [...systems, ...(curr.systems || [])].filter((id) =>\n        selected?.includes(id)\n      );\n      return {\n        ...acc,\n        ...(tempSystems.length > 0 ? { [curr.id]: tempSystems } : {}),\n      };\n    }, {});\n    if (!isEqual(input.value, value)) {\n      input.onChange(value);\n    }\n  }, [selected]);\n\n  const onSelectRows = (value) => {\n    dispatch({\n      type: TOGGLE_BULK_SELECT,\n      payload: value,\n    });\n  };\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-systems\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Review and optionally exclude systems from your selection.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Router>\n          <SystemsTable\n            registry={registry}\n            allSystemsNamed={allSystemsNamed}\n            allSystems={allSystems}\n            hasCheckbox={true}\n            bulkSelect={{\n              id: 'select-systems',\n              count: selected.length,\n              items: [\n                {\n                  title: 'Select none (0)',\n                  onClick: () => onSelectRows(false),\n                },\n                ...(loaded && rowsLength > 0\n                  ? [\n                      {\n                        title: `Select page (${rowsLength})`,\n                        onClick: () => onSelectRows(true),\n                      },\n                    ]\n                  : []),\n              ],\n              checked: selected.length > 0,\n              onSelect: (value) => onSelectRows(value),\n            }}\n            onSelectRows\n          />\n        </Router>\n      </StackItem>\n      {error && loaded && (\n        <StackItem>\n          <ExclamationCircleIcon className=\"ins-c-remediations-error pf-u-mr-sm\" />\n          <span className=\"ins-c-remediations-error\">{error}</span>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nReviewSystems.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n  systems: propTypes.arrayOf(propTypes.string).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n};\n\nexport default ReviewSystems;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport {\n  Radio,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  onCollapse,\n  pluralize,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  ISSUES_MULTIPLE,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './reviewActions.scss';\n\nconst ReviewActions = (props) => {\n  const formOptions = useFormApi();\n  const values = formOptions.getState().values;\n  const issues = props.issues.filter((issue) =>\n    Object.keys(values[SYSTEMS]).includes(issue.id)\n  );\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const multiples = (\n    values[EXISTING_PLAYBOOK_SELECTED]\n      ? values[ISSUES_MULTIPLE].filter(\n          (issue) =>\n            !values[EXISTING_PLAYBOOK].issues.some((i) => i.id === issue.id)\n        )\n      : values[ISSUES_MULTIPLE]\n  )\n    .map((issue) => ({\n      ...issue,\n      systems: values[SYSTEMS][issue.id],\n    }))\n    .filter((record) => record?.systems?.length > 0);\n\n  const [rows, setRows] = useState(\n    buildRows(multiples, sortByState, true, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(multiples, sortByState, true, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review-actions\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            You have selected{' '}\n            <b>{`${issues.length} ${pluralize(issues.length, 'item')}`}</b> to\n            remediate.{' '}\n            <b>\n              {multiples.length} of{' '}\n              {`${issues.length} ${pluralize(issues.length, 'item')}`}\n            </b>\n            {multiples.length !== 1 ? ' allow' : ' allows'} for you to chose\n            from multiple resolution steps.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Radio\n          label={`Review and/or change the resolution steps for ${\n            multiples.length !== 1 ? 'these' : 'this'\n          }\n                         ${multiples.length} ${pluralize(\n            multiples.length,\n            'action'\n          )}.`}\n          id=\"change\"\n          name=\"radio\"\n          isChecked={input.value}\n          onChange={() => input.onChange(true)}\n        />\n        {issues.length - multiples.length > 0 && (\n          <Text className=\"ins-c-remediations-choose-actions-description\">\n            {`The ${\n              issues.length - multiples.length\n            } other selected ${pluralize(\n              issues.length - multiples.length,\n              'issue'\n            )} \n                    ${\n                      issues.length - multiples.length !== 1 ? 'do' : 'does'\n                    } not have multiple resolution options.`}\n          </Text>\n        )}\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n      <StackItem>\n        <Radio\n          label={'Accept all recommended resolution steps for all actions'}\n          id=\"accept\"\n          name=\"radio\"\n          isChecked={!input.value}\n          onChange={() => input.onChange(false)}\n        />\n        <Text className=\"ins-c-remediations-choose-actions-description\">\n          You may modify reboot status to manual reboot in the next step, or\n          from the playbook.\n        </Text>\n      </StackItem>\n    </Stack>\n  );\n};\n\nReviewActions.propTypes = {\n  issues: propTypes.arrayOf(\n    propTypes.shape({\n      description: propTypes.string,\n      id: propTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ReviewActions;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './issueResolution.scss';\nimport {\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n  Tile,\n  Title,\n  Alert,\n  Popover,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  pluralize,\n  shortenIssueId,\n  RESOLUTIONS,\n  SELECTED_RESOLUTIONS,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { RedoIcon, CloseIcon } from '@patternfly/react-icons';\nimport uniqBy from 'lodash/uniqBy';\nimport differenceWith from 'lodash/differenceWith';\nimport isEqual from 'lodash/isEqual';\n\nconst IssueResolution = ({ issue }) => {\n  const formOptions = useFormApi();\n  const resolutions = formOptions.getState().values[RESOLUTIONS];\n\n  const systems = formOptions.getState().values[SYSTEMS][issue.id] || [];\n  const issueResolutions =\n    resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n  const uniqueResolutions = uniqBy(issueResolutions, 'id');\n  const removedResolutions = differenceWith(\n    issueResolutions,\n    uniqueResolutions,\n    isEqual\n  );\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-issue-resolution\">\n      <StackItem>\n        <Title headingLevel=\"h2\">\n          {`Choose action: ${shortenIssueId(issue.id)}`}\n        </Title>\n      </StackItem>\n      <StackItem>\n        {removedResolutions.length > 0 && (\n          <StackItem className=\"pf-u-mb-sm\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={\n                <Text>\n                  There {pluralize(removedResolutions.length, 'was', 'were')}{' '}\n                  <Popover\n                    aria-label=\"Resolution duplicates popover\"\n                    bodyContent={\n                      <Fragment>\n                        {removedResolutions.map((resolution, key) => (\n                          <div key={key}>{resolution.description}</div>\n                        ))}\n                      </Fragment>\n                    }\n                  >\n                    <b>\n                      <Button variant=\"link\" isInline>\n                        {removedResolutions.length}\n                      </Button>{' '}\n                      {pluralize(removedResolutions.length, 'resolution')}\n                    </b>\n                  </Popover>{' '}\n                  removed due to duplication\n                </Text>\n              }\n            />\n          </StackItem>\n        )}\n        <TextContent>\n          <Text>\n            Review the possible resolution steps and select which to add to your\n            playbook.\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {issue.action}\n          </Text>\n          <Text className=\"ins-c-remediations-action-description\">\n            {`Resolution affects ${systems.length} ${pluralize(\n              systems.length,\n              'system'\n            )}`}\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <div className=\"ins-c-resolution-container\">\n          {uniqueResolutions.map((resolution, index) => (\n            <div\n              className=\"ins-c-resolution-option\"\n              sm={12}\n              md={6}\n              lg={4}\n              xl={3}\n              key={resolution.id}\n            >\n              <Tile\n                onClick={() =>\n                  formOptions.change(SELECTED_RESOLUTIONS, {\n                    ...formOptions.getState().values[SELECTED_RESOLUTIONS],\n                    [issue.id]: resolution.id,\n                  })\n                }\n                isSelected={\n                  formOptions.getState().values[SELECTED_RESOLUTIONS][issue.id]\n                    ? formOptions.getState().values[SELECTED_RESOLUTIONS][\n                        issue.id\n                      ] === resolution.id\n                    : index === 0\n                }\n                title={resolution.description}\n              >\n                <TextContent className=\"pf-u-pt-sm\">\n                  <Text className=\"pf-u-mb-sm ins-c-playbook-description\">\n                    Resolution from &quot;{issue.id.split(/:|\\|/)[1]}&quot;\n                  </Text>\n                  {\n                    <div className=\"ins-c-reboot-required\">\n                      {resolution.needs_reboot ? <RedoIcon /> : <CloseIcon />}\n                      <Text component=\"span\">\n                        {resolution.needs_reboot ? (\n                          'Reboot required'\n                        ) : (\n                          <span>\n                            Reboot <b>not</b> required\n                          </span>\n                        )}\n                      </Text>\n                    </div>\n                  }\n                </TextContent>\n              </Tile>\n            </div>\n          ))}\n        </div>\n      </StackItem>\n    </Stack>\n  );\n};\n\nIssueResolution.propTypes = {\n  issue: propTypes.shape({\n    id: propTypes.string,\n    action: propTypes.string,\n    alternate: propTypes.number,\n    systems: propTypes.arrayOf(propTypes.string),\n  }).isRequired,\n};\n\nexport default IssueResolution;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Table,\n  TableVariant,\n  TableHeader,\n  TableBody,\n  sortable,\n  expandable,\n} from '@patternfly/react-table';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  Text,\n  TextContent,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport {\n  buildRows,\n  getResolution,\n  onCollapse,\n  EXISTING_PLAYBOOK,\n  EXISTING_PLAYBOOK_SELECTED,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport { useSelector } from 'react-redux';\nimport './review.scss';\n\nconst Review = (props) => {\n  const formOptions = useFormApi();\n  const selectedPlaybook = formOptions.getState().values[EXISTING_PLAYBOOK];\n  const existingPlaybookSelected =\n    formOptions.getState().values[EXISTING_PLAYBOOK_SELECTED];\n  const systems = formOptions.getState().values[SYSTEMS];\n\n  const { data, issuesById } = {\n    ...props,\n    data: {\n      ...props.data,\n      issues: props.data.issues.filter(\n        (issue) => systems[issue.id]?.length > 0\n      ),\n    },\n  };\n  const { input } = useFieldApi(props);\n  const [sortByState, setSortByState] = useState({\n    index: undefined,\n    direction: undefined,\n  });\n\n  const allSystemsNamed = useSelector(\n    ({ hostReducer: { hosts } }) =>\n      hosts?.map((host) => ({ id: host.id, name: host.display_name })) || []\n  );\n\n  const records = data.issues.map((issue) => {\n    const issueResolutions = getResolution(\n      issue.id,\n      formOptions.getState().values\n    );\n    const { description, needs_reboot: needsReboot } =\n      issueResolutions?.[0] || {};\n    return {\n      action: issuesById[issue.id].description,\n      resolution: description,\n      needsReboot,\n      systems: systems[issue.id],\n    };\n  });\n\n  useEffect(() => {\n    input.onChange(\n      input.value !== ''\n        ? input.value\n        : (existingPlaybookSelected && selectedPlaybook.auto_reboot) ||\n            records.some((record) => record.needsReboot)\n    );\n  }, []);\n\n  const [rows, setRows] = useState(\n    buildRows(records, sortByState, false, allSystemsNamed)\n  );\n\n  useEffect(() => {\n    setRows(buildRows(records, sortByState, false, allSystemsNamed));\n  }, [sortByState]);\n\n  return (\n    <Stack hasGutter data-component-ouia-id=\"wizard-review\">\n      <StackItem>\n        <TextContent>\n          <Text>\n            Issues listed below will be added to the playbook{' '}\n            <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>.\n          </Text>\n        </TextContent>\n      </StackItem>\n      {records.some((r) => r.needsReboot) && (\n        <StackItem>\n          <TextContent>\n            <Text className=\"ins-c-playbook-reboot-required\">\n              <ExclamationTriangleIcon /> A system reboot is required to\n              remediate selected issues\n            </Text>\n          </TextContent>\n        </StackItem>\n      )}\n      <StackItem>\n        <TextContent>\n          <Text>\n            The playbook <b>{formOptions.getState().values[SELECT_PLAYBOOK]}</b>\n            {input.value ? (\n              ' does'\n            ) : (\n              <span className=\"ins-c-remediation-danger-text\"> does not</span>\n            )}{' '}\n            auto reboot systems.\n          </Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() => input.onChange(!input.value)}\n        >\n          Turn {input.value ? 'off' : 'on'} autoreboot\n        </Button>\n      </StackItem>\n      <Table\n        aria-label=\"Actions\"\n        className=\"ins-c-remediation-summary-table\"\n        variant={TableVariant.compact}\n        cells={[\n          {\n            title: 'Action',\n            transforms: [sortable],\n          },\n          {\n            title: 'Resolution',\n            transforms: [sortable],\n          },\n          {\n            title: 'Reboot required',\n            transforms: [sortable],\n          },\n          {\n            title: 'Systems',\n            transforms: [sortable],\n            cellFormatters: [expandable],\n          },\n        ]}\n        rows={rows}\n        onSort={(event, index, direction) =>\n          setSortByState({ index, direction })\n        }\n        onCollapse={(event, rowKey, isOpen) =>\n          onCollapse(event, rowKey, isOpen, rows, setRows)\n        }\n        sortBy={sortByState}\n      >\n        <TableHeader noWrap />\n        <TableBody />\n      </Table>\n    </Stack>\n  );\n};\n\nReview.propTypes = {\n  data: propTypes.shape({\n    issues: propTypes.array,\n    systems: propTypes.array,\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  issuesById: propTypes.shape({\n    [propTypes.string]: propTypes.shape({\n      id: propTypes.string,\n      description: propTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Review;\n","import { FETCH_RESOLUTIONS } from '../../constants';\n\n// Initial State\nexport const resolutionsInitialState = {\n  isLoading: false,\n  resolutions: undefined,\n};\n\nconst setLoadingState = (state) => ({ ...state, isLoading: true });\n\nconst setResolutions = (state, { payload }) => ({\n  ...state,\n  ...payload,\n  isLoading: false,\n});\n\nexport default {\n  [`${FETCH_RESOLUTIONS}_FULFILLED`]: setResolutions,\n  [`${FETCH_RESOLUTIONS}_PENDING`]: setLoadingState,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Progress,\n  ProgressVariant,\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n  let variant;\n  let title;\n\n  if (percent === 100) {\n    title = 'Completed';\n    variant = ProgressVariant.success;\n  } else if (failed) {\n    title = 'Error';\n    variant = ProgressVariant.danger;\n  } else {\n    title = 'In progress';\n    variant = ProgressVariant.info;\n  }\n\n  return (\n    <Progress\n      id={'finished-create-remediation'}\n      value={percent}\n      title={title}\n      variant={variant}\n    />\n  );\n};\n\nProgressBar.propTypes = {\n  percent: propTypes.number,\n  failed: propTypes.bool,\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport ProgressBar from '../common/ProgressBar';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport {\n  dedupeArray,\n  getEnvUrl,\n  pluralize,\n  remediationUrl,\n  SELECT_PLAYBOOK,\n  SYSTEMS,\n} from '../../../Utilities/utils';\nimport './progress.scss';\n\nconst Progress = ({ onClose, setOpen, submitRemediation, setState, state }) => {\n  const { percent, failed, systems, issues, playbook } = {\n    percent: state.percent,\n    failed: state.failed,\n    systems: dedupeArray(Object.values(state.formValues[SYSTEMS]).flat()),\n    issues: Object.keys(state.formValues[SYSTEMS]),\n    playbook: {\n      name: state.formValues[SELECT_PLAYBOOK],\n      id: state.id,\n    },\n  };\n\n  return (\n    <EmptyState\n      variant={EmptyStateVariant.large}\n      data-component-ouia-id=\"wizard-progress\"\n    >\n      <EmptyStateIcon\n        className=\"pf-u-mb-lg pf-u-mt-sm\"\n        color={\n          failed\n            ? 'var(--pf-global--danger-color--100)'\n            : percent === 100\n            ? 'var(--pf-global--success-color--100)'\n            : undefined\n        }\n        icon={\n          failed\n            ? ExclamationCircleIcon\n            : percent === 100\n            ? CheckCircleIcon\n            : InProgressIcon\n        }\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {failed\n          ? 'Error: Unable to add items to playbook'\n          : percent === 100\n          ? 'Items added to playbook'\n          : 'Adding items to the playbook'}\n      </Title>\n      <EmptyStateBody className=\"pf-c-progress-bar pf-u-mt-md\">\n        <ProgressBar percent={percent} failed={failed} />\n      </EmptyStateBody>\n      {(failed || percent === 100) && (\n        <EmptyStateBody className=\"pf-c-progress-message\">\n          {failed ? (\n            'Please try again.'\n          ) : (\n            <div>\n              {`${issues.length} ${pluralize(\n                issues.length,\n                'action'\n              )} affecting \n                        ${systems.length} ${pluralize(\n                systems.length,\n                'system'\n              )} \n                        ${\n                          issues.length > 1 ? 'were' : 'was'\n                        } added to the playbook `}\n              <a href={remediationUrl(playbook.id)}>{playbook.name}</a>.\n            </div>\n          )}\n        </EmptyStateBody>\n      )}\n      {percent === 100 && (\n        <EmptyStateBody className=\"pf-c-progress-message-description pf-u-mb-md\">\n          You can remediate these systems directly from Insights by enabling\n          <Button\n            className=\"pf-u-py-0 pf-u-px-xs\"\n            variant=\"link\"\n            ouiaId=\"CloudConnectorButton\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isSmall\n            onClick={() =>\n              (window.location.href = `${\n                window.location.origin\n              }/${getEnvUrl()}settings/connector`)\n            }\n          >\n            Cloud Connector\n          </Button>\n          on eligible systems.\n        </EmptyStateBody>\n      )}\n      {failed && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"TryAgainButton\"\n          onClick={() => {\n            setState({ failed: false, percent: 0 });\n            submitRemediation(false);\n          }}\n        >\n          Try again\n        </Button>\n      )}\n      {percent === 100 && (\n        <Button\n          className=\"pf-u-mt-md pf-u-mb-sm\"\n          variant=\"primary\"\n          ouiaId=\"ReturnToAppButton\"\n          onClick={() => {\n            onClose();\n            setOpen(false);\n          }}\n        >\n          Return to application\n        </Button>\n      )}\n      <EmptyStateSecondaryActions>\n        {failed && (\n          <Button\n            variant=\"secondary\"\n            ouiaId=\"BackToWizardButton\"\n            onClick={() => {\n              onClose();\n            }}\n          >\n            Go back to the wizard\n          </Button>\n        )}\n        {percent === 100 && (\n          <Button\n            variant=\"link\"\n            ouiaId=\"OpenPlaybookButton\"\n            onClick={() => {\n              onClose();\n              setOpen(false);\n              window.location.href = remediationUrl(playbook.id);\n            }}\n          >\n            Open playbook {playbook.name}\n          </Button>\n        )}\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  );\n};\n\nProgress.propTypes = {\n  onClose: PropTypes.func,\n  setOpen: PropTypes.func,\n  submitRemediation: PropTypes.func,\n  setState: PropTypes.func,\n  state: PropTypes.shape({\n    id: PropTypes.string,\n    percent: PropTypes.number.isRequired,\n    failed: PropTypes.bool.isRequired,\n    formValues: PropTypes.shape({\n      [SELECT_PLAYBOOK]: PropTypes.string,\n      [SYSTEMS]: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n  }),\n};\n\nexport default Progress;\n","import React, {\n  Fragment,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport propTypes from 'prop-types';\nimport { fetchHostsById } from '../../store/actions/host-actions';\nimport { fetchResolutions } from '../../store/actions/resolution-actions';\nimport { Provider, useDispatch } from 'react-redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport hostReducer, {\n  hostsInitialState,\n} from '../../store/reducers/host-reducer';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport keyBy from 'lodash/keyBy';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport schemaBuilder from './schema';\nimport WizardMapper from '@data-driven-forms/pf4-component-mapper/wizard';\nimport { Modal, Wizard } from '@patternfly/react-core';\nimport TextField from '@data-driven-forms/pf4-component-mapper/text-field';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport SelectPlaybook from './steps/selectPlaybook';\nimport ReviewSystems from './steps/reviewSystems';\nimport ReviewActions from './steps/reviewActions';\nimport IssueResolution from './steps/issueResolution';\nimport Review from './steps/review';\nimport resolutionsReducer, {\n  resolutionsInitialState,\n} from '../../store/reducers/resolutions-reducer';\nimport {\n  dedupeArray,\n  submitRemediation,\n  splitArray,\n  SELECTED_RESOLUTIONS,\n  EXISTING_PLAYBOOK_SELECTED,\n  MANUAL_RESOLUTION,\n  SYSTEMS,\n  RESOLUTIONS,\n  ISSUES_MULTIPLE,\n} from '../../Utilities/utils';\nimport Progress from './steps/progress';\nimport { ModalVariant } from '@patternfly/react-core';\n\nconst initialState = {\n  submitted: false,\n  id: undefined,\n  percent: 0,\n  failed: false,\n  formValues: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'schema':\n      return { ...state, schema: action.payload };\n    case 'state':\n      return { ...state, ...action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport const RemediationWizard = ({ setOpen, data, basePath, registry }) => {\n  const allSystems = useRef(\n    dedupeArray(\n      data.issues?.reduce(\n        (acc, curr) => [...acc, ...(curr.systems || [])],\n        [...data.systems]\n      )\n    )\n  );\n\n  const dispatch = useDispatch();\n\n  const [state, setState] = useReducer(reducer, initialState);\n\n  const issuesById = keyBy(data.issues, (issue) => issue.id);\n\n  const fetchHostNames = (systems = []) => {\n    const perChunk = 50;\n    const chunks = splitArray(systems, perChunk);\n    chunks.forEach((chunk) => {\n      dispatch(fetchHostsById(chunk, { page: 1, perPage: perChunk }));\n    });\n  };\n\n  useEffect(() => {\n    setState({ type: 'schema', payload: schemaBuilder(data.issues) });\n    registry.register({\n      hostReducer: applyReducerHash(hostReducer, hostsInitialState),\n      resolutionsReducer: applyReducerHash(\n        resolutionsReducer,\n        resolutionsInitialState\n      ),\n    });\n    dispatch(fetchResolutions(data.issues));\n    fetchHostNames(allSystems.current);\n  }, []);\n\n  const mapperExtension = {\n    'select-playbook': {\n      component: SelectPlaybook,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n    },\n    'review-systems': {\n      component: ReviewSystems,\n      issues: data.issues,\n      systems: data.systems,\n      allSystems: allSystems.current,\n      registry,\n    },\n    'review-actions': {\n      component: ReviewActions,\n      issues: data.issues,\n    },\n    'issue-resolution': {\n      component: IssueResolution,\n    },\n    review: {\n      component: Review,\n      data,\n      issuesById: issuesById,\n    },\n  };\n\n  const validatorMapper = {\n    'validate-systems': () => (value) =>\n      value &&\n      Object.values(value).filter((value) => typeof value !== undefined).length\n        ? undefined\n        : 'At least one system must be selected. Actions must be associated to a system to be added to a playbook.',\n  };\n\n  return (\n    <Fragment>\n      {state.schema && !state.submitted ? (\n        <FormRenderer\n          schema={state.schema}\n          subscription={{ values: true }}\n          FormTemplate={(props) => (\n            <Pf4FormTemplate {...props} showFormControls={false} />\n          )}\n          initialValues={{\n            [RESOLUTIONS]: [],\n            [ISSUES_MULTIPLE]: [],\n            [SYSTEMS]: {},\n            [MANUAL_RESOLUTION]: true,\n            [SELECTED_RESOLUTIONS]: {},\n            [EXISTING_PLAYBOOK_SELECTED]: false,\n          }}\n          componentMapper={{\n            [componentTypes.WIZARD]: {\n              component: WizardMapper,\n              className: 'remediations',\n              'data-ouia-component-id': 'remediation-wizard',\n            },\n            [componentTypes.TEXT_FIELD]: TextField,\n            ...mapperExtension,\n          }}\n          validatorMapper={validatorMapper}\n          onSubmit={(formValues) => {\n            setState({\n              type: 'state',\n              payload: { submitted: true, formValues: formValues },\n            });\n            submitRemediation(formValues, data, basePath, (payload) =>\n              setState({ type: 'state', payload: payload })\n            );\n          }}\n          onCancel={() => setOpen(false)}\n        />\n      ) : null}\n      {state.submitted ? (\n        <Modal\n          isOpen\n          variant={ModalVariant.large}\n          showClose={false}\n          className=\"remediations\"\n          hasNoBodyWrapper\n          aria-describedby=\"wiz-modal-description\"\n          aria-labelledby=\"wiz-modal-title\"\n        >\n          <Wizard\n            className=\"remediations\"\n            title={'Remediate with Ansible'}\n            description={'Add actions to an Ansible Playbook'}\n            steps={[\n              {\n                name: 'progress',\n                component: (\n                  <Progress\n                    onClose={() => {\n                      setState({\n                        type: 'state',\n                        payload: {\n                          submitted: false,\n                          id: undefined,\n                          failed: false,\n                          formValues: undefined,\n                        },\n                      });\n                    }}\n                    title={'Adding items to the playbook'}\n                    setOpen={setOpen}\n                    submitRemediation={() =>\n                      submitRemediation(\n                        state.formValues,\n                        data,\n                        basePath,\n                        (payload) =>\n                          setState({ type: 'state', payload: payload })\n                      )\n                    }\n                    setState={(payload) =>\n                      setState({ type: 'state', payload: payload })\n                    }\n                    state={state}\n                  />\n                ),\n                isFinishedStep: true,\n              },\n            ]}\n            onClose={() => {\n              setState({\n                type: 'state',\n                payload: {\n                  submitted: false,\n                  id: undefined,\n                  failed: false,\n                  formValues: undefined,\n                },\n              });\n              setOpen(false);\n            }}\n          />\n        </Modal>\n      ) : null}\n    </Fragment>\n  );\n};\n\nRemediationWizard.propTypes = {\n  setOpen: propTypes.func.isRequired,\n  data: propTypes.shape({\n    issues: propTypes.arrayOf(\n      propTypes.shape({\n        description: propTypes.string,\n        id: propTypes.string,\n      })\n    ),\n    systems: propTypes.arrayOf(propTypes.string),\n    onRemediationCreated: propTypes.func,\n  }).isRequired,\n  basePath: propTypes.string,\n  registry: propTypes.shape({\n    register: propTypes.func,\n  }).isRequired,\n};\n\nconst RemediationWizardWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <RemediationWizard {...props} registry={registry} />\n    </Provider>\n  ) : null;\n};\n\nexport default RemediationWizardWithContext;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.filter((column) => !disabledColumns.includes(column.key))\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      onRefresh={(options) => inventory.current.onRefreshData(options)}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(config, allSystemsNamed, defaultGetEntities)\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"sourceRoot":""}