{"version":3,"file":"js/980.1644324493556.1d2b2b089c7fcc698fd4.js","mappings":"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","sources":["webpack:///./src/components/PlaybookCard.js","webpack:///./src/components/EmptyStates/EmptyRemediations.js","webpack:///./src/components/RemediationTable.js","webpack:///./src/components/TestButtons.js","webpack:///./src/components/CreatePlanModal/ModalSteps/PlanName.js","webpack:///./src/components/CreatePlanModal/ModalSteps/PlanSystems.js","webpack:///./src/routes/Home.js","webpack:///./src/Routes.js","webpack:///./src/skeletons/GlobalSkeleton.js","webpack:///./src/App.js","webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/actions.js","webpack:///./src/components/Alerts/NoReceptorBanner.js","webpack:///./src/components/Alerts/PlaybookToastAlerts.js","webpack:///./src/components/ConfirmationDialog.js","webpack:///./src/components/DeniedState.js","webpack:///./src/components/EmptyExecutePlaybookState.js","webpack:///./src/components/Modals/ExecuteModal.js","webpack:///./src/components/SystemsTable/RemoveSystemModal.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/components/SystemsTable/SystemsTable.js","webpack:///./src/components/statusHelper.js","webpack:///./src/components/Modals/WarningModal.js","webpack:///./src/containers/CancelButton.js","webpack:///./src/hooks/table.js","webpack:///./src/modules/RemediationsModal/validate/validator.js","webpack:///./src/store/index.js","webpack:///./src/components/SystemsTable/RebootColumn.js","webpack:///./src/components/SystemsTable/IssuesColumn.js","webpack:///./src/store/reducers.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Badge,\n  Card,\n  CardBody,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Progress,\n  ProgressMeasureLocation,\n  ProgressVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Link } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\nimport { patchRemediation } from '../actions.js';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\nimport './PlaybookCard.scss';\n\nfunction buildName(name, id) {\n  return (\n    <Link to={`/${id}`} className=\"rem-c-playbook-card__header--name\">\n      {name}\n    </Link>\n  );\n}\n\nfunction actionWrapper(actionsList, callback, dispatch) {\n  Promise.all(\n    actionsList.map((event) => {\n      dispatch(event);\n      return event.payload;\n    })\n  ).then(callback);\n}\n\nconst PlaybookCardHeader = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n  setActiveAlert,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isArchived, setIsArchived] = useState(archived);\n  const dispatch = useDispatch();\n  const dropdownItems = [];\n\n  const archiveHandler = () => {\n    actionWrapper(\n      [patchRemediation(remediation.id, { archived: !isArchived })],\n      () => {\n        setIsArchived(!isArchived);\n        update(true);\n      },\n      dispatch\n    );\n  };\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"execute\"\n      id=\"execute\"\n      isDisabled={!permission.isReceptorConfigured || isArchived}\n      className={`${\n        (!permission.hasSmartManagement || !permission.permissions.execute) &&\n        'ins-m-not-entitled'\n      }`}\n      onClick={() => {\n        setExecuteOpen(false);\n        actionWrapper(\n          [\n            loadRemediation(remediation.id),\n            getConnectionStatus(remediation.id),\n          ],\n          () => {\n            setExecuteOpen(true);\n            setIsOpen(false);\n          },\n          dispatch\n        );\n      }}\n    >\n      Execute playbook\n    </DropdownItem>\n  );\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"download\"\n      onClick={() => {\n        downloadPlaybook(remediation.id);\n        setIsOpen(false);\n        setActiveAlert({\n          key: generateUniqueId(),\n          title: `Preparing playbook for download`,\n          description: 'Once complete, your download will start automatically.',\n          variant: 'info',\n        });\n      }}\n    >\n      Download playbook\n    </DropdownItem>\n  );\n\n  isArchived\n    ? dropdownItems.push(\n        <DropdownItem\n          key=\"restore\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Restored playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Restore playbook\n        </DropdownItem>\n      )\n    : dropdownItems.push(\n        <DropdownItem\n          key=\"archive\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Archived playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Archive playbook\n        </DropdownItem>\n      );\n\n  return (\n    <CardHeader className=\"rem-c-playbook-card__header\">\n      <CardActions>\n        <Dropdown\n          key=\"dropdown\"\n          id={`${remediation.id}-dropdown`}\n          isOpen={isOpen}\n          isPlain\n          onSelect={(f) => f}\n          toggle={\n            <KebabToggle\n              id={`${remediation.id}-toggle`}\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            />\n          }\n          dropdownItems={dropdownItems}\n          position={'right'}\n        />\n        <input\n          type=\"checkbox\"\n          name={`${remediation.id}-checkbox`}\n          checked={selector.getSelectedIds().includes(remediation.id)}\n          onChange={(e) => {\n            selector.props.onSelect(e, e.target.checked, remediationIdx);\n          }}\n          aria-label={`${remediation.id}-checkbox`}\n        />\n      </CardActions>\n      <CardTitle>\n        <Stack hasGutter>\n          <StackItem className=\"rem-c-playbook-card__header--title\">\n            {isArchived && (\n              <Badge isRead className=\"rem-c-playbook-card__header--badge\">\n                Archived\n              </Badge>\n            )}\n            {buildName(remediation.name, remediation.id)}\n          </StackItem>\n          <StackItem className=\"rem-c-playbook-card__header--last-modified\">\n            Last modified: <DateFormat date={remediation.updated_at} />\n          </StackItem>\n        </Stack>\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nPlaybookCardHeader.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.func.isRequired,\n};\n\nconst renderActionStatus = (complete, total) => {\n  return complete === total && complete !== 0 ? (\n    <div>\n      <CheckCircleIcon className=\"rem-c-success\" /> {complete} of &nbsp;{total}\n    </div>\n  ) : (\n    `${complete} of ${total}`\n  );\n};\n\nconst renderProgress = (complete, total) => {\n  return complete === total && complete !== 0 ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--success\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n      variant={ProgressVariant.success}\n    />\n  ) : (\n    <Progress\n      className=\"rem-c-playbook-card__progress\"\n      value={(complete / total) * 100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  );\n};\n\nexport const PlaybookCard = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  //executeOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n  setActiveAlert,\n}) => {\n  // const [ poll, setPoll ] = useState(executeOpen => !executeOpen);\n  // const [ curResolved, setCurResolved ] = useState(remediation.resolved_count);\n  // const selected = reduxSelector(state => state.selectedRemediation);\n  // const [ loaded, setLoaded ] = useState(false);\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //     if (poll && !archived) {\n  //         const interval = setInterval(() => {\n  //             if (poll) {\n  //                 actionWrapper([\n  //                     loadRemediation(remediation.id)\n  //                 ], () => { setLoaded(true); }, dispatch);\n  //             }\n  //         }, 15000);\n  //         return () => clearInterval(interval);\n  //     }\n  // }, [ poll ]);\n\n  // useEffect(() => {\n  //     if (loaded) {\n  //         if (curResolved !== selected.remediation.resolved_count) {\n  //             setCurResolved(selected.remediation.resolved_count);\n  //         }\n  //     }\n  // }, [ loaded ]);\n\n  // useEffect(() => {\n  //     if (executeOpen) {\n  //         setPoll(false);\n  //     } else {\n  //         setPoll(true);\n  //     }\n  // }, [ executeOpen ]);\n\n  return (\n    <Card className=\"rem-c-playbook-card\" isCompact>\n      <PlaybookCardHeader\n        remediation={remediation}\n        remediationIdx={remediationIdx}\n        archived={archived}\n        selector={selector}\n        setExecuteOpen={setExecuteOpen}\n        update={update}\n        loadRemediation={loadRemediation}\n        getConnectionStatus={getConnectionStatus}\n        downloadPlaybook={downloadPlaybook}\n        permission={permission}\n        setActiveAlert={setActiveAlert}\n      />\n      <CardBody className=\"rem-c-playbook-card__body\">\n        <Split hasGutter className=\"rem-c-playbook-card__body--split\">\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Systems\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {remediation.system_count}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Complete actions\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {renderActionStatus(\n                  remediation.resolved_count,\n                  remediation.issue_count\n                )}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n        </Split>\n      </CardBody>\n      {renderProgress(remediation.resolved_count, remediation.issue_count)}\n    </Card>\n  );\n};\n\nPlaybookCard.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  executeOpen: PropTypes.bool.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { appUrl } from '../../Utilities/urls';\n\nimport './EmptyRemediations.scss';\n\nexport const EmptyRemediations = ({ archivedCount, setShowArchived }) => {\n  return (\n    <Bullseye className=\"rem-c-no-remediations pf-u-pt-2xl\">\n      <EmptyState>\n        <EmptyStateIcon icon={WrenchIcon} size=\"sm\" />\n        <Title size=\"lg\" headingLevel=\"h5\">\n          No remediation playbooks\n        </Title>\n        <EmptyStateBody>\n          Create an Ansible Playbook to remediate or mitigate vulnerabilities or\n          configuration issues.\n          <br />\n          <br />\n          To create a new remediation Playbook, select issues identified in\n          <br />\n          <a href={appUrl('advisor').toString()}>Recommendations</a>,&nbsp;\n          <a href={appUrl('compliance').toString()}>Compliance</a> or&nbsp;\n          <a href={appUrl('vulnerabilities').toString()}>Vulnerability</a>&nbsp;\n          and select\n          <br />\n          <strong>Remediate with Ansible.</strong>\n        </EmptyStateBody>\n        <br />\n        {archivedCount > 0 && (\n          <Button\n            variant=\"link\"\n            onClick={() => setShowArchived(true)}\n            ouiaId=\"show-archived-playbooks\"\n          >\n            Show {archivedCount} archived playbooks\n          </Button>\n        )}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyRemediations.propTypes = {\n  archivedCount: PropTypes.number.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useContext, useState } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { downloadPlaybook } from '../api';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  loadRemediation,\n  getEndpoint,\n} from '../actions';\nimport { PermissionContext } from '../App';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport { PlaybookCard } from './PlaybookCard';\nimport { EmptyRemediations } from './EmptyStates/EmptyRemediations';\nimport PlaybookToastAlerts from './Alerts/PlaybookToastAlerts';\nimport './RemediationTable.scss';\n\nfunction skeleton() {\n  return (\n    <React.Fragment>\n      <Main>\n        <Spinner centered />\n      </Main>\n    </React.Fragment>\n  );\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction RemediationTable({\n  remediations,\n  loadRemediations,\n  sorter,\n  filter,\n  selector,\n  pagination,\n  shouldUpdateGrid,\n  setShouldUpdateGrid,\n  setRemediationCount,\n  showArchived,\n  setShowArchived,\n}) {\n  const { value, status } = remediations;\n  let cards = [];\n\n  const permission = useContext(PermissionContext);\n  const [executeOpen, setExecuteOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n  const [activeToastAlert, setActiveToastAlert] = useState({\n    key: '',\n    title: '',\n    description: '',\n    variant: '',\n  });\n  const selectedRemediation = reduxSelector(\n    (state) => state.selectedRemediation\n  );\n  const connectionStatus = reduxSelector((state) => state.connectionStatus);\n  const runningRemediation = reduxSelector((state) => state.runRemediation);\n  const sources = reduxSelector((state) => state.sources);\n  const dispatch = useDispatch();\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (shouldUpdateGrid === true) {\n      setShouldUpdateGrid(false);\n      load();\n    }\n  }, [shouldUpdateGrid]);\n\n  useEffect(() => {\n    if (runningRemediation.status === 'changed') {\n      getConnectionStatus(selectedRemediation.remediation.id);\n      setShowRefreshMessage(true);\n    } else if (runningRemediation.status === 'fulfilled') {\n      setExecuteOpen(false);\n    }\n  }, [runningRemediation.status]);\n\n  useEffect(() => {\n    if (remediations.value) {\n      setRemediationCount(value.meta.total);\n    }\n  }, [remediations]);\n\n  // Skeleton Loading\n  if (status !== 'fulfilled') {\n    return skeleton();\n  }\n\n  if (!showArchived) {\n    cards = value?.data?.reduce((result, remediation) => {\n      if (remediation.archived !== true) {\n        result.push(remediation);\n      }\n\n      return result;\n    }, []);\n  } else {\n    cards = value?.data?.map((remediation) => remediation);\n  }\n\n  if (cards.length === 0) {\n    return (\n      <EmptyRemediations\n        archivedCount={value.data.length}\n        setShowArchived={setShowArchived}\n      />\n    );\n  }\n\n  selector.register(cards);\n\n  return (\n    <React.Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          {executeOpen && (\n            <ExecuteModal\n              isOpen={executeOpen}\n              onClose={() => {\n                setShowRefreshMessage(false);\n                setExecuteOpen(false);\n              }}\n              showRefresh={showRefreshMessage}\n              remediationId={selectedRemediation.remediation.id}\n              data={connectionStatus.data}\n              etag={connectionStatus.etag}\n              isLoading={connectionStatus.status !== 'fulfilled'}\n              issueCount={selectedRemediation.remediation.issues.length}\n              remediationStatus={runningRemediation.status}\n              runRemediation={(id, etag) => {\n                dispatch(runRemediation(id, etag)).then(() =>\n                  dispatch(getPlaybookRuns(id))\n                );\n              }}\n              setEtag={(etag) => {\n                dispatch(setEtag(etag));\n              }}\n              getEndpoint={(id) => {\n                dispatch(getEndpoint(id));\n              }}\n              sources={sources}\n              activeAlert={activeToastAlert}\n              setActiveAlert={setActiveToastAlert}\n            />\n          )}\n        </StackItem>\n        <StackItem>\n          {activeToastAlert.title && (\n            <PlaybookToastAlerts\n              key={activeToastAlert.key}\n              title={activeToastAlert.title}\n              description={activeToastAlert.description}\n              variant={activeToastAlert.variant}\n            />\n          )}\n          <Grid sm={12} md={6} lg={4} hasGutter>\n            {cards.map((remediation, idx) => {\n              return (\n                <GridItem key={remediation.id}>\n                  <PlaybookCard\n                    remediation={remediation}\n                    remediationIdx={idx}\n                    archived={remediation.archived}\n                    selector={selector}\n                    setExecuteOpen={setExecuteOpen}\n                    executeOpen={executeOpen}\n                    update={setShouldUpdateGrid}\n                    loadRemediation={loadRemediation}\n                    getConnectionStatus={getConnectionStatus}\n                    downloadPlaybook={downloadPlaybook}\n                    permission={permission}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </GridItem>\n              );\n            })}\n          </Grid>\n        </StackItem>\n      </Stack>\n    </React.Fragment>\n  );\n}\n\nRemediationTable.propTypes = {\n  remediations: PropTypes.object.isRequired,\n  loadRemediations: PropTypes.func.isRequired,\n  sorter: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired,\n  selector: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  shouldUpdateGrid: PropTypes.bool.isRequired,\n  setShouldUpdateGrid: PropTypes.func.isRequired,\n  setRemediationCount: PropTypes.func.isRequired,\n  showArchived: PropTypes.bool.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n\nexport default RemediationTable;\n","import React from 'react';\n\nimport { Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport RemediationButton from '../modules/RemediationsButton';\n\nimport propTypes from 'prop-types';\n\nimport { getHosts } from '../api';\n\nclass TestButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allHosts: false,\n    };\n  }\n\n  isEnabled = () => localStorage.getItem('remediations:debug') === 'true';\n\n  dataProviderPing = () => ({\n    issues: [\n      {\n        id: 'test:ping',\n        description: 'Ansible ping',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 5),\n      },\n    ],\n  });\n\n  dataProviderC1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC3 = () => ({\n    issues: [...this.dataProviderC1().issues, ...this.dataProviderC2().issues],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC4 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:corosync_enable_rt_schedule|COROSYNC_NOT_ENABLE_RT',\n        description:\n          'Cluster nodes are frequently fenced as realtime is not enabled in corosync',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC5 = () => ({\n    issues: [\n      {\n        id: 'advisor:unsupported',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'vulnerabilities:CVE-2019-999999',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderD1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n        systems:\n          this.state.allHosts.length > 1\n            ? this.state.allHosts.slice(1, 2)\n            : this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderD2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n        systems: this.state.allHosts.slice(1),\n      },\n    ],\n  });\n\n  async componentDidMount() {\n    if (this.isEnabled()) {\n      await window.insights.chrome.auth.getUser();\n      getHosts().then((hosts) =>\n        this.setState({\n          allHosts: hosts.results.map((result) => result.id),\n        })\n      );\n    }\n  }\n\n  render() {\n    if (!this.isEnabled()) {\n      return null;\n    }\n\n    const { allHosts } = this.state;\n\n    const RemediationBtn = ({ dataProvider, children, ...props }) => (\n      <SplitItem>\n        <RemediationButton\n          dataProvider={dataProvider}\n          isDisabled={!allHosts || !allHosts.length}\n          onRemediationCreated={this.props.onRemediationCreated}\n          {...props}\n        >\n          {children}\n        </RemediationButton>\n      </SplitItem>\n    );\n\n    return (\n      <React.Fragment>\n        <Stack hasGutter>\n          <StackItem>\n            <Split hasGutter>\n              {[\n                'ping',\n                'alwaysFail',\n                'failHalfTheTime',\n                'pause1m',\n                'pause5m',\n                'pause15m',\n                'pauseRandom15m',\n                'pause1h',\n                'pause6h',\n              ].map((name) => (\n                <RemediationBtn\n                  key={name}\n                  dataProvider={() => ({\n                    issues: [\n                      {\n                        id: `test:${name}`,\n                        description: `Ansible ${name} test playbook`,\n                      },\n                    ],\n                    systems: this.state.allHosts,\n                  })}\n                >\n                  {name}\n                </RemediationBtn>\n              ))}\n            </Split>\n          </StackItem>\n\n          <StackItem>\n            <Split hasGutter>\n              <RemediationBtn dataProvider={this.dataProviderA1}>\n                A1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderA2}>\n                A2\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderC1}>\n                C1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC2}>\n                C2\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC3}>\n                C3\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC4}>\n                C4 (multires)\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC5}>\n                C5 (unsupported)\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderD1}>\n                D1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderD2}>\n                D2\n              </RemediationBtn>\n            </Split>\n          </StackItem>\n        </Stack>\n      </React.Fragment>\n    );\n  }\n}\n\nTestButtons.propTypes = {\n  onRemediationCreated: propTypes.func,\n};\n\nTestButtons.defaultProps = {\n  onRemediationCreated: (f) => f,\n};\n\nexport default TestButtons;\n","import React, { Component } from 'react';\n\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\n\nclass PlanName extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n    };\n  }\n\n  handleTextInputChange = (value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <React.Fragment>\n        <h2> Name your plan </h2>\n        <Form>\n          <FormGroup label=\"Plan Name\" isRequired fieldId=\"plan-name\">\n            <TextInput\n              isRequired\n              type=\"text\"\n              value={value}\n              onChange={this.handleTextInputChange}\n              placeholder=\"What do you want to call your grand plan?\"\n              aria-label=\"Name your plan\"\n              autoFocus\n            />\n          </FormGroup>\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PlanName;\n","import React, { Component } from 'react';\n\nimport {\n  Form,\n  FormGroup,\n  Radio,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\n\nimport './PlanSystems.scss';\n\nclass PlanSystems extends Component {\n  constructor() {\n    super();\n    this.state = {\n      systemValue: 'Select a System',\n      groupValue: 'Select a System',\n    };\n    this.onChangeSystemOptions = this.onChangeSystemOptions.bind(this);\n    this.onChangeSystemGroup = this.onChangeSystemGroup.bind(this);\n\n    // TODO: Change these to actual system groups\n    this.systemOptions = [\n      { value: 'Select a System', label: 'Select a System', disabled: true },\n      { value: 'System 1', label: 'System 1', disabled: false },\n      { value: 'System 2', label: 'System 2', disabled: false },\n    ];\n    this.groupOptions = [\n      {\n        value: 'Select a System',\n        label: 'Select a System Group',\n        disabled: true,\n      },\n      { value: 'Group 1', label: 'Group 1', disabled: false },\n      { value: 'Group 2', label: 'Group 2', disabled: false },\n    ];\n  }\n\n  onChangeSystemOptions(systemValue) {\n    this.setState({ systemValue });\n  }\n\n  onChangeSystemGroup(groupValue) {\n    this.setState({ groupValue });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2> Select the system(s) for the plan </h2>\n        <Form className=\"rem-c-form-select-systems\">\n          <FormGroup isRequired fieldId=\"select-systems\">\n            <Radio\n              id=\"one-system\"\n              name=\"select-systems\"\n              label=\"A System\"\n              aria-label=\"A System\"\n            />\n            <Select\n              value={this.state.systemValue}\n              onChange={this.onChangeSystemOptions}\n              aria-label=\"Select Input\"\n              ouiaId=\"select\"\n            >\n              {this.systemOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled}\n                  key={index}\n                  value={option.value}\n                  label={option.label}\n                />\n              ))}\n            </Select>\n\n            <Radio\n              id=\"system-group\"\n              name=\"select-systems\"\n              label=\"System Group\"\n              aria-label=\"System Group\"\n            />\n            <Select\n              value={this.state.groupValue}\n              onChange={this.onChangeSystemGroup}\n              aria-label=\"Select Input\"\n            >\n              {this.groupOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled}\n                  key={index}\n                  value={option.value}\n                  label={option.label}\n                />\n              ))}\n            </Select>\n\n            <Radio\n              id=\"all-systems\"\n              name=\"select-systems\"\n              label=\"All Systems (x)\"\n              aria-label=\"All Systems\"\n            />\n          </FormGroup>\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PlanSystems;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport { StackItem, Stack } from '@patternfly/react-core';\n\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { Wizard } from '@redhat-cloud-services/frontend-components/Wizard';\nimport RemediationTable from '../components/RemediationTable';\nimport TestButtons from '../components/TestButtons';\n\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\n// Wizard Steps\nimport PlanName from '../components/CreatePlanModal/ModalSteps/PlanName';\nimport PlanSystems from '../components/CreatePlanModal/ModalSteps/PlanSystems';\n\nimport './Home.scss';\n\nimport { PermissionContext } from '../App';\nimport DeniedState from '../components/DeniedState';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport ConfirmationDialog from '../components/ConfirmationDialog';\nimport keyBy from 'lodash/keyBy';\n\nfunction verifyDownload(selectedIds, data) {\n  let valid = [];\n  const byId = keyBy(data, (r) => r.id);\n\n  valid = selectedIds.reduce((result, id) => {\n    const remediation = byId[id];\n\n    if (remediation && remediation.issue_count > 0) {\n      result.push(remediation.id);\n    }\n\n    return result;\n  }, []);\n\n  return valid;\n}\n\nfunction download(selectedIds, data, dispatch) {\n  const valid = verifyDownload(selectedIds, data);\n\n  if (valid.length === 0) {\n    dispatch(\n      addNotification({\n        variant: 'danger',\n        title: `No playbooks downloaded.`,\n        description:\n          selectedIds.length > 1\n            ? 'Selected remediations do not contain any issues to remediate.'\n            : 'Selected remediation does not contain any issues to remediate.',\n      })\n    );\n  } else if (valid.length < selectedIds.length) {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n        description:\n          selectedIds.length - valid.length > 1\n            ? `${\n                selectedIds.length - valid.length\n              } remediations with no issues were not downloaded.`\n            : `1 remediation with no issues was not downloaded.`,\n      })\n    );\n  } else {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n      })\n    );\n  }\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction Home() {\n  document.title = 'Remediations | Red Hat Insights';\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const sorter = useSorter(4, 'desc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const pagination = usePagination();\n  const [remediationCount, setRemediationCount] = useState(0);\n  const [filterText, setFilterText] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [showArchived, setShowArchived] = useState(\n    false || localStorage.getItem('remediations:showArchived') === 'true'\n  );\n  const [shouldUpdateGrid, setShouldUpdateGrid] = useState(false);\n  const remediations = reduxSelector((state) => state.remediations);\n  const dispatch = useDispatch();\n  const loadRemediations = (...args) =>\n    dispatch(actions.loadRemediations(...args));\n  const deleteRemediation = (id) => dispatch(actions.deleteRemediation(id));\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(load, []);\n\n  useEffect(() => {\n    if (remediations.status === 'fulfilled' && filter.value === filterText) {\n      setShouldUpdateGrid(true);\n    }\n  }, [\n    sorter.sortBy,\n    sorter.sortDir,\n    filter.value,\n    pagination.pageSize,\n    pagination.pageDebounced,\n    showArchived,\n  ]);\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  filter.onChange(pagination.reset);\n  sorter.onChange(pagination.reset);\n\n  const selectedIds = selector.getSelectedIds();\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const sendNotification = (data) => {\n    dispatch(addNotification(data));\n  };\n\n  // const openModal = () => setIsModalOpen(true);\n\n  const onClose = (submitted) => {\n    setIsModalOpen(false);\n\n    if (submitted) {\n      sendNotification({\n        variant: 'success',\n        title: 'Wizard completed',\n        description:\n          'Congratulations! You successfully clicked through the temporary wizard placeholder!',\n      });\n    }\n  };\n\n  const onRemediationCreated = (result) => {\n    sendNotification(result.getNotification());\n    dispatch(actions.loadRemediations());\n  };\n\n  // Wizard Content\n  const ModalStepContent = [\n    <PlanName key=\"PlanName\" />,\n    <PlanSystems key=\"PlanSystems\" />,\n  ];\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Name', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"page__remediations\">\n      <PermissionContext.Consumer>\n        {(permission) =>\n          permission.permissions.read === false ? (\n            <DeniedState />\n          ) : (\n            <React.Fragment>\n              <PageHeader>\n                <PageHeaderTitle title=\"Remediations\" />\n                <TestButtons onRemediationCreated={onRemediationCreated} />\n              </PageHeader>\n              <PrimaryToolbar\n                filterConfig={{\n                  items: [\n                    {\n                      label: 'Search playbooks',\n                      type: 'text',\n                      filterValues: {\n                        id: 'filter-by-string',\n                        key: 'filter-by-string',\n                        placeholder: 'Search playbooks',\n                        value: filterText,\n                        onChange: (_e, value) => {\n                          setFilterText(value);\n                        },\n                      },\n                    },\n                  ],\n                }}\n                bulkSelect={{\n                  items: [\n                    {\n                      title: 'Select all',\n                      onClick: (e) => selector.props.onSelect(e, true, -1),\n                    },\n                  ],\n                  checked:\n                    selectedIds.length && remediationCount > selectedIds.length\n                      ? null\n                      : selectedIds.length,\n                  count: selectedIds.length,\n                  onSelect: (isSelected, e) =>\n                    selector.props.onSelect(e, isSelected, -1),\n                }}\n                actionsConfig={{\n                  actions: [\n                    {\n                      label:\n                        selectedIds.length > 1\n                          ? 'Download playbooks'\n                          : 'Download playbook',\n                      props: {\n                        variant: 'secondary',\n                        isDisabled: !selectedIds.length,\n                      },\n                      onClick: () =>\n                        download(\n                          selectedIds,\n                          remediations.value.data,\n                          dispatch\n                        ), // TODO state for downloads?\n                    },\n                    {\n                      label: 'Delete playbooks',\n                      props: {\n                        isDisabled:\n                          !permission.permissions.write || !selectedIds.length,\n                      },\n                      onClick: () => setDialogOpen(true),\n                    },\n                    {\n                      label: showArchived\n                        ? 'Hide archived playbooks'\n                        : 'Show archived playbooks',\n                      onClick: showArchived\n                        ? () => {\n                            setShowArchived(false);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'false'\n                            );\n                          }\n                        : () => {\n                            setShowArchived(true);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'true'\n                            );\n                          },\n                    },\n                  ],\n                }}\n                pagination={{\n                  ...pagination.props,\n                  itemCount: remediationCount,\n                }}\n                activeFiltersConfig={activeFiltersConfig}\n              />\n              <Main>\n                <Stack hasGutter>\n                  {permission.hasSmartManagement &&\n                    !permission.isReceptorConfigured &&\n                    noReceptorBannerVisible && (\n                      <StackItem>\n                        <NoReceptorBanner\n                          onClose={() => handleNoReceptorToggle()}\n                        />\n                      </StackItem>\n                    )}\n                  {dialogOpen && (\n                    <ConfirmationDialog\n                      title={\n                        selectedIds.length === 1\n                          ? 'Remove playbook'\n                          : 'Remove playbooks'\n                      }\n                      text={`${selectedIds.length} ${\n                        selectedIds.length > 1 ? 'playbooks' : 'playbook'\n                      } \n                                            will be removed from Remediations. This is permanent and cannot be undone.`}\n                      confirmText={'Remove'}\n                      onClose={async (del) => {\n                        setDialogOpen(false);\n                        if (del) {\n                          await Promise.all(\n                            selectedIds.map((r) => deleteRemediation(r))\n                          );\n                          loadRemediations();\n                          selector.reset();\n                        }\n                      }}\n                    />\n                  )}\n                  <StackItem>\n                    <RemediationTable\n                      remediations={remediations}\n                      loadRemediations={loadRemediations}\n                      sorter={sorter}\n                      filter={filter}\n                      selector={selector}\n                      pagination={pagination}\n                      shouldUpdateGrid={shouldUpdateGrid}\n                      setShouldUpdateGrid={setShouldUpdateGrid}\n                      setRemediationCount={setRemediationCount}\n                      showArchived={showArchived}\n                      setShowArchived={setShowArchived}\n                    />\n                  </StackItem>\n                </Stack>\n              </Main>\n\n              <Wizard\n                isLarge\n                title=\"Create Plan\"\n                className=\"ins-c-plan-modal\"\n                onClose={onClose}\n                isOpen={isModalOpen}\n                content={ModalStepContent}\n              />\n            </React.Fragment>\n          )\n        }\n      </PermissionContext.Consumer>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Switch, Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, lazy, Suspense } from 'react';\nimport Home from './routes/Home';\nconst RemediationDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"RemediationDetails\" */ './routes/RemediationDetails'\n  )\n);\nconst ActivityDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"ActivityDetails\" */ './components/ActivityDetails'\n  )\n);\nconst ExecutorDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"ExecutorDetails\" */ './components/ExecutorDetails'\n  )\n);\n\nexport const routes = {\n  home: '/',\n  details: '/:id',\n  runDetails: '/:id/:run_id',\n  executorDetails: '/:id/:run_id/:executor_id',\n};\n\nexport const Routes = () => (\n  <Suspense fallback={<Fragment />}>\n    <Switch>\n      <Route exact path={routes.home} component={Home} />\n      <Route exact path={routes.details} component={RemediationDetails} />\n      <Route\n        exact\n        path={routes.runDetails}\n        render={(props) => <ActivityDetails remediation={{}} {...props} />}\n      />\n      <Route\n        exact\n        path={routes.executorDetails}\n        render={(props) => <ExecutorDetails {...props} />}\n      />\n      <Redirect path=\"*\" to={routes.home} push />\n    </Switch>\n  </Suspense>\n);\n\nRoutes.propTypes = {\n  childProps: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func,\n    }),\n  }),\n};\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst GlobalSkeleton = () => (\n  <React.Fragment>\n    <PageHeader className=\"ins-remediations__skeleton\">\n      <PageHeaderTitle className=\"rem-s-page-header\" title=\"Remediations\" />\n    </PageHeader>\n    <Main>\n      <Spinner centered />\n    </Main>\n  </React.Fragment>\n);\n\nexport default GlobalSkeleton;\n","import PropTypes from 'prop-types';\nimport React, { createContext, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport GlobalSkeleton from './skeletons/GlobalSkeleton';\n\nimport { getIsReceptorConfigured } from './api';\n\n// Notifications\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nexport const PermissionContext = createContext();\n\nclass App extends Component {\n  unregister;\n  constructor() {\n    super();\n    this.state = {\n      readPermission: undefined,\n      writePermission: undefined,\n      executePermission: undefined,\n      isReceptorConfigured: undefined,\n      arePermissionLoaded: false,\n      hasSmartManagement: undefined,\n    };\n  }\n\n  handlePermissionUpdate = (hasRead, hasWrite, hasExecute) =>\n    this.setState({\n      readPermission: hasRead,\n      writePermission: hasWrite,\n      executePermission: hasExecute,\n      arePermissionLoaded: true,\n    });\n\n  componentWillUnmount() {\n    if (typeof this.unregister === 'function') {\n      this.unregister();\n    }\n  }\n  async componentDidMount() {\n    insights.chrome.init();\n    insights.chrome?.hideGlobalFilter?.();\n    insights.chrome.identifyApp('remediations');\n    // wait for auth first, otherwise the call to RBAC may 401\n    await window.insights.chrome.auth.getUser().then((user) =>\n      this.setState({\n        hasSmartManagement: user.entitlements.smart_management.is_entitled,\n      })\n    );\n    getIsReceptorConfigured().then((isConfigured) =>\n      this.setState({\n        isReceptorConfigured: isConfigured.data.length > 0,\n      })\n    );\n    this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (typeof event?.domEvent?.href === 'string') {\n        this.props.history.push(\n          event.domEvent.href.replace(this.props.basename, '')\n        );\n      }\n    });\n    window.insights.chrome\n      .getUserPermissions('remediations')\n      .then((remediationsPermissions) => {\n        const permissionList = remediationsPermissions.map(\n          (permissions) => permissions.permission\n        );\n        if (\n          permissionList.includes(\n            'remediations:*:*' || 'remediations:remediation:*'\n          )\n        ) {\n          this.handlePermissionUpdate(true, true, true);\n        } else {\n          this.handlePermissionUpdate(\n            permissionList.includes(\n              'remediations:remediation:read' || 'remediations:*:read'\n            ),\n            permissionList.includes(\n              'remediations:remediation:write' || 'remediations:*:write'\n            ),\n            permissionList.includes(\n              'remediations:remediation:execute' || 'remediations:*:execute'\n            )\n          );\n        }\n      });\n  }\n\n  render() {\n    const {\n      readPermission,\n      writePermission,\n      executePermission,\n      arePermissionLoaded,\n      isReceptorConfigured,\n      hasSmartManagement,\n    } = this.state;\n\n    return arePermissionLoaded ? (\n      <PermissionContext.Provider\n        value={{\n          permissions: {\n            read: readPermission,\n            write: writePermission,\n            execute: executePermission,\n          },\n          isReceptorConfigured,\n          hasSmartManagement,\n        }}\n      >\n        <NotificationsPortal />\n        <Routes childProps={this.props} />\n      </PermissionContext.Provider>\n    ) : (\n      <GlobalSkeleton />\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object,\n  basename: PropTypes.string.isRequired,\n};\n\n/**\n * withRouter: https://reacttraining.com/react-router/web/api/withRouter\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter(connect()(App));\n","export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'beta') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import { ACTION_TYPES } from './constants';\nimport {\n  remediations,\n  resolutions,\n  getRemediationStatus,\n  sources,\n  deleteSystemsFromRemediation,\n} from './api';\n\nexport const loadRemediations = (\n  sortBy = 'updated_at',\n  sortDir = 'desc',\n  filter,\n  limit,\n  offset,\n  system,\n  hideArchived\n) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATIONS,\n  payload: remediations.getRemediations(\n    `${sortDir === 'desc' ? '-' : ''}${sortBy}`,\n    filter,\n    limit,\n    offset,\n    system,\n    hideArchived\n  ),\n});\n\nexport const loadRemediation = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const loadRemediationStatus = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION_STATUS,\n  payload: getRemediationStatus(id), // TODO\n});\n\nexport const refreshRemediation = (id) => ({\n  type: ACTION_TYPES.REFRESH_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const createRemediation = (data) => ({\n  type: ACTION_TYPES.CREATE_REMEDIATIONS,\n  payload: remediations.createRemediation(data),\n});\n\nexport const patchRemediation = (id, data) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION,\n  payload: remediations.updateRemediation(id, data).then(() => data),\n});\n\nexport const deleteRemediation = (id) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION,\n  payload: remediations.deleteRemediation(id),\n});\n\nexport const deleteRemediationIssue = (id, issueId) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE,\n  payload: remediations\n    .deleteRemediationIssue(id, issueId)\n    .then(() => ({ id, issueId })),\n});\n\nexport const deleteRemediationIssueSystem = (id, issue, system) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM,\n  payload: remediations\n    .deleteRemediationIssueSystem(id, issue, system)\n    .then(() => ({ id, issue, system })),\n});\n\nexport const patchRemediationIssue = (id, issue, resolution) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION_ISSUE,\n  payload: remediations.updateRemediationIssue(id, issue, { resolution }),\n});\n\nexport const getResolutions = (ruleId) => ({\n  type: ACTION_TYPES.GET_RESOLUTIONS,\n  payload: resolutions.getResolutionsForIssue(ruleId),\n});\n\nexport const getConnectionStatus = (id) => {\n  return {\n    type: ACTION_TYPES.GET_CONNECTION_STATUS,\n    payload: remediations.getRemediationConnectionStatus(id),\n  };\n};\n\nexport const runRemediation = (id, etag, exclude) => {\n  return {\n    type: ACTION_TYPES.RUN_REMEDIATION,\n    payload: remediations.runRemediation(id, {\n      headers: { 'If-Match': etag },\n      data: { exclude },\n    }),\n  };\n};\n\nexport const setEtag = (etag) => ({\n  type: ACTION_TYPES.SET_ETAG,\n  payload: { etag },\n});\n\nexport const getPlaybookRuns = (remediationId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUNS,\n  payload: remediations.listPlaybookRuns(remediationId),\n});\n\nexport const cancelPlaybookRuns = (remediationId, runId) => ({\n  type: ACTION_TYPES.CANCEL_PLAYBOOK_RUNS,\n  payload: remediations.cancelPlaybookRuns(remediationId, runId),\n});\n\nexport const getPlaybookRun = (remediationId, runId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN,\n  payload: remediations.getPlaybookRunDetails(remediationId, runId),\n});\n\nexport const getPlaybookRunSystems = (\n  remediationId,\n  runId,\n  executorId,\n  limit = 50,\n  offset = 0,\n  ansibleHost\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS,\n  payload: remediations.getPlaybookRunSystems(\n    remediationId,\n    runId,\n    executorId,\n    limit,\n    offset,\n    ansibleHost\n  ),\n});\n\nexport const getPlaybookRunSystemDetails = (\n  remediationId,\n  runId,\n  systemId\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS,\n  payload: remediations.getPlaybookRunSystemDetails(\n    remediationId,\n    runId,\n    systemId\n  ),\n});\n\nexport const expandInventoryTable = (id, isOpen) => ({\n  type: ACTION_TYPES.EXPAND_INVENTORY_TABLE,\n  payload: {\n    id,\n    isOpen,\n  },\n});\n\nexport const getEndpoint = (id, options = {}) => ({\n  type: ACTION_TYPES.GET_ENDPOINT,\n  payload: sources.showEndpoint(id, options),\n});\n// payload: sources.listEndpoints(id, options)\n\nexport const selectEntity = (id, selected) => ({\n  type: ACTION_TYPES.SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const deleteSystems = (systems, remediation) => ({\n  type: ACTION_TYPES.DELTE_SYSTEMS,\n  payload: deleteSystemsFromRemediation(systems, remediation),\n});\n\nexport const checkExecutable = (id) => ({\n  type: ACTION_TYPES.CHECK_EXECUTABLE,\n  payload: remediations.checkExecutable(id),\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst NoReceptorBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Do more with your Find it Fix it capabilities\"\n      actionClose={<AlertActionCloseButton onClose={onClose} />}\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Configure your systems with Cloud Connector to fix systems across all\n          your Satellite instances.\n        </StackItem>\n        <StackItem>\n          {/* eslint-disable-next-line max-len */}\n          <a href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index\">\n            Learn how to configure\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default NoReceptorBanner;\n\nNoReceptorBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nNoReceptorBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Alert,\n  AlertGroup,\n  AlertActionCloseButton,\n} from '@patternfly/react-core';\n\nconst PlaybookToastAlerts = ({\n  key,\n  title,\n  description = '',\n  variant = 'success',\n}) => {\n  const [activeAlerts, setActiveAlerts] = useState([]);\n\n  useEffect(() => {\n    addActiveAlert(key, title, description, variant);\n  }, [key]);\n\n  const removeAlert = (key) => {\n    setActiveAlerts((previousAlerts) => [\n      previousAlerts.filter((alert) => alert.key !== key),\n    ]);\n  };\n\n  const addActiveAlert = (key, title, description, variant) => {\n    setActiveAlerts((activeAlerts) => [\n      ...activeAlerts,\n      { key: key, title: title, description: description, variant: variant },\n    ]);\n  };\n\n  return (\n    <div>\n      <AlertGroup isToast>\n        {activeAlerts.map(({ key, title, description, variant }) => (\n          <Alert\n            timeout\n            isLiveRegion\n            key={key}\n            variant={variant}\n            title={title}\n            onTimeout={() => removeAlert(key)}\n            actionClose={\n              <AlertActionCloseButton\n                title={title}\n                onClose={() => removeAlert(key)}\n              />\n            }\n          >\n            {description}\n          </Alert>\n        ))}\n      </AlertGroup>\n    </div>\n  );\n};\n\nPlaybookToastAlerts.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  variant: PropTypes.string,\n  key: PropTypes.string,\n};\n\nexport const generateUniqueId = () => new Date().getTime();\n\nexport default PlaybookToastAlerts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './ConfirmationDialog.scss';\n\nexport default function ConfirmationDialog({\n  isOpen = true,\n  title = 'Remove system?',\n  text = 'This action cannot be undone',\n  confirmText = 'Remove system',\n  onClose = (f) => f,\n}) {\n  return (\n    <Modal\n      title={\n        <div>\n          <ExclamationTriangleIcon className=\"rem-m-alert rem-c-delete-icon pf-u-mr-xs\" />\n          {title}\n        </div>\n      }\n      className=\"remediations rem-c-dialog\"\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      onClose={() => onClose(false)}\n      isFooterLeftAligned\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"danger\"\n          ouiaId=\"confirm\"\n          onClick={() => onClose(true)}\n        >\n          {confirmText}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          ouiaId=\"cancel\"\n          onClick={() => onClose(false)}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <h2>{text}</h2>\n    </Modal>\n  );\n}\n\nConfirmationDialog.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  text: PropTypes.string,\n  confirmText: PropTypes.string,\n  onClose: PropTypes.func,\n};\n","import React from 'react';\n\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\n\nimport { LockIcon } from '@patternfly/react-icons';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\n\nconst DeniedState = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Remediations\" />\n      </PageHeader>\n      <Main>\n        <EmptyState\n          variant={EmptyStateVariant.full}\n          className=\"rem-c-denied-state\"\n        >\n          <EmptyStateIcon icon={LockIcon} />\n          <Title headingLevel=\"h5\" size=\"lg\">\n            You do not have access to Remediations\n          </Title>\n          <EmptyStateBody>\n            Contact your organization administrator(s) for more information.\n          </EmptyStateBody>\n          {document.referrer ? (\n            <Button variant=\"primary\" onClick={() => history.back()}>\n              Return to previous page\n            </Button>\n          ) : (\n            <Button variant=\"primary\" component=\"a\" href=\".\">\n              Go to landing page\n            </Button>\n          )}\n        </EmptyState>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default DeniedState;\n","import React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport DesktopIcon from '@patternfly/react-icons/dist/js/icons/desktop-icon';\nimport PropTypes from 'prop-types';\n\nconst EmptyExecutePlaybookState = () => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={DesktopIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        This playbook has no systems associated with it.\n      </Title>\n      <EmptyStateBody>\n        Add at least one system and action to this playbook to use remote\n        execution.\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default EmptyExecutePlaybookState;\n\nEmptyExecutePlaybookState.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n  Alert,\n  Tooltip,\n  ExpandableSection,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { downloadPlaybook } from '../../api';\nimport { styledConnectionStatus } from '../statusHelper';\nimport {\n  TableHeader,\n  Table,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { generateUniqueId } from '../Alerts/PlaybookToastAlerts';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport './ExecuteModal.scss';\nimport EmptyExecutePlaybookState from '../EmptyExecutePlaybookState';\n\nexport const ExecuteModal = ({\n  isOpen,\n  onClose,\n  showRefresh,\n  isLoading,\n  data,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  getEndpoint,\n  sources,\n  setEtag,\n  setActiveAlert,\n}) => {\n  const [isUserEntitled, setIsUserEntitled] = useState(false);\n  const [connected, setConnected] = useState([]);\n  const [disconnected, setDisconnected] = useState([]);\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  useEffect(() => {\n    window.insights.chrome.auth\n      .getUser()\n      .then((user) =>\n        setIsUserEntitled(user.entitlements.smart_management.is_entitled)\n      );\n  }, []);\n\n  const combineStatuses = (status, availability) =>\n    status === 'connected'\n      ? availability\n        ? availability.availability_status\n        : 'loading'\n      : status;\n\n  useEffect(() => {\n    const [con, dis] = data.reduce(\n      ([pass, fail], e) =>\n        e && e.connection_status === 'connected'\n          ? [[...pass, { ...e }], fail]\n          : [pass, [...fail, e]],\n      [[], []]\n    );\n    setConnected(con);\n    setDisconnected(dis);\n    con.map((c) => c.endpoint_id && getEndpoint(c.endpoint_id));\n  }, [data]);\n\n  useEffect(() => {\n    const isAvailable = (connectionStatus, sourcesStatus, data) =>\n      combineStatuses(\n        connectionStatus,\n        sourcesStatus === 'fulfilled' && data\n      ) === 'available';\n\n    const updatedData = data.map((e) => ({\n      ...e,\n      connection_status: combineStatuses(\n        e.connection_status,\n        sources.status === 'fulfilled' && sources.data[`${e.endpoint_id}`]\n      ),\n    }));\n\n    if (sources.status === 'fulfilled') {\n      const [con, dis] = updatedData.reduce(\n        ([pass, fail], e) =>\n          isAvailable(\n            e.connection_status,\n            sources.status,\n            sources.data[`${e.endpoint_id}`]\n          )\n            ? [[...pass, { ...e }], fail]\n            : [pass, [...fail, { ...e }]],\n        [[], []]\n      );\n      setConnected(con);\n      setDisconnected(dis);\n    }\n  }, [sources]);\n\n  const generateRowsStatus = (con) => {\n    return styledConnectionStatus(\n      con.connection_status,\n      sources.status === 'fulfilled' &&\n        sources.data[`${con.endpoint_id}`] &&\n        sources.data[`${con.endpoint_id}`].availability_status_error\n    );\n  };\n\n  const rows = [...connected, ...disconnected].map((con) => ({\n    cells: [\n      {\n        title: con.executor_name ? (\n          <Tooltip content={`${con.executor_name}`}>\n            <span>\n              {con.executor_name.length > 25\n                ? `${con.executor_name.slice(0, 22)}...`\n                : con.executor_name}\n            </span>\n          </Tooltip>\n        ) : (\n          'Direct connection'\n        ),\n      },\n      con.system_count,\n      isUserEntitled && {\n        title: generateRowsStatus(con),\n      },\n    ],\n  }));\n  const connectedCount = connected.reduce((acc, e) => e.system_count + acc, 0);\n  const systemCount = data.reduce((acc, e) => e.system_count + acc, 0);\n\n  const pluralize = (number, str) =>\n    number > 1 ? `${number} ${str}s` : `${number} ${str}`;\n\n  return (\n    <Modal\n      className=\"remediations rem-c-execute-modal\"\n      variant={isDebug() ? ModalVariant.large : ModalVariant.small}\n      title={'Execute playbook'}\n      isOpen={isOpen}\n      onClose={onClose}\n      isFooterLeftAligned\n      actions={\n        systemCount !== 0\n          ? [\n              <Button\n                key=\"confirm\"\n                variant=\"primary\"\n                ouiaId=\"etag\"\n                isDisabled={connected.length === 0}\n                onClick={() => {\n                  runRemediation(\n                    remediationId,\n                    etag,\n                    disconnected.map((e) => e.executor_id).filter((e) => e)\n                  );\n                  setActiveAlert({\n                    key: generateUniqueId(),\n                    title: `Executing playbook ${remediationName}`,\n                    description: (\n                      <span>\n                        View results in the <b>Activity tab</b>\n                      </span>\n                    ),\n                    variant: 'success',\n                  });\n                }}\n              >\n                {isLoading\n                  ? 'Execute playbook'\n                  : `Execute playbook on ${pluralize(\n                      connectedCount,\n                      'system'\n                    )}`}\n              </Button>,\n              <Button\n                key=\"download\"\n                variant=\"secondary\"\n                ouiaId=\"download-playbook\"\n                onClick={() => {\n                  downloadPlaybook(remediationId);\n                  setActiveAlert({\n                    key: generateUniqueId(),\n                    title: 'Preparing playbook for download',\n                    description:\n                      'Once complete, your download will start automatically.',\n                    variant: 'info',\n                  });\n                }}\n              >\n                Download playbook\n              </Button>,\n              isDebug() ? (\n                <Button\n                  key=\"reset-etag\"\n                  onClick={() => setEtag('test')}\n                  ouiaId=\"reset-etag\"\n                >\n                  Reset etag\n                </Button>\n              ) : null,\n            ]\n          : [\n              <Button\n                key=\"close-modal\"\n                onClick={() => onClose()}\n                variant=\"primary\"\n              >\n                Close\n              </Button>,\n            ]\n      }\n    >\n      <div className=\"rem-c-execute-modal__body\">\n        {showRefresh ? (\n          <Alert\n            variant=\"warning\"\n            isInline\n            title=\"The connection status of systems associated with this Playbook has changed. Please review again.\"\n          />\n        ) : null}\n        <TextContent>\n          {isLoading ? (\n            <Skeleton size=\"lg\" />\n          ) : (\n            <Text component={TextVariants.p}>\n              Playbook contains <b>{`${pluralize(issueCount, 'action')}`}</b>\n              &nbsp;affecting\n              <b> {`${pluralize(systemCount, 'system')}.`} </b>\n            </Text>\n          )}\n          <Text>\n            <ExpandableSection toggleText=\"About remote execution with Cloud connector\">\n              Playbooks can be executed on systems which:\n              <List>\n                <ListItem>\n                  Are connected to Insights via a Satellite instance which has\n                  Receptor/Cloud Connector enabled, or <br />\n                  <Button\n                    className=\"pf-u-p-0\"\n                    key=\"download\"\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    // eslint-disable-next-line max-len\n                    href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    How to configure Receptor/Cloud Connector on Red Hat\n                    Satellite &nbsp;\n                    <ExternalLinkAltIcon />\n                  </Button>\n                </ListItem>\n                <ListItem>\n                  Are directly connected to Insights via Red Hat connector, and\n                  Cloud Connector is enabled <br />\n                  <Button\n                    className=\"pf-u-p-0\"\n                    key=\"configure\"\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    // eslint-disable-next-line max-len\n                    href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/red_hat_connector_configuration_guide/index\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    How to enable Cloud Connector with Red Hat connect &nbsp;\n                    <ExternalLinkAltIcon />\n                  </Button>\n                </ListItem>\n              </List>\n            </ExpandableSection>\n          </Text>\n          <Text component={TextVariants.p}>\n            Executed Ansible Playbooks run on eligible systems with Cloud\n            Connector. The playbook will be pushed immediately after selecting\n            “Execute playbook”. If the playbook has “Auto reboot” on, systems\n            requiring reboot to complete an action will reboot.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            isInline\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/articles/rhc\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            Learn more about Cloud Connector &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n          {rows.length !== 0 && (\n            <Text component={TextVariants.h4}>\n              Connection status of systems\n            </Text>\n          )}\n        </TextContent>\n        {isLoading && <Skeleton size=\"lg\" />}\n        {!isLoading && systemCount !== 0 && (\n          <Table\n            variant={TableVariant.compact}\n            aria-label=\"Systems\"\n            cells={[\n              {\n                title: 'Connection type',\n                value: 'type',\n              },\n              {\n                title: 'Systems',\n                value: 'count',\n              },\n              isUserEntitled && {\n                title: 'Connection status',\n                value: 'status',\n              },\n            ]}\n            rows={rows}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n        {!isLoading && systemCount === 0 && <EmptyExecutePlaybookState />}\n      </div>\n    </Modal>\n  );\n};\n\nExecuteModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  showRefresh: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  issueCount: PropTypes.number,\n  runRemediation: PropTypes.func,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  getEndpoint: PropTypes.func,\n  sources: PropTypes.object,\n  setActiveAlert: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { pluralize } from '../statusHelper';\n\nconst RemoveSystemModal = ({\n  isOpen,\n  selected,\n  onConfirm,\n  onClose,\n  remediationName,\n}) => (\n  <Modal\n    variant={ModalVariant.medium}\n    title={`Remove selected systems from ${remediationName}`}\n    isOpen={isOpen}\n    onClose={onClose}\n    appendTo={document.getElementsByClassName('remediations')[0]}\n    actions={[\n      <Button\n        key=\"remove-confirm\"\n        variant=\"danger\"\n        onClick={onConfirm}\n        ouiaId=\"confirm-delete\"\n      >\n        Remove\n      </Button>,\n      <Button key=\"remove-cancel\" variant=\"link\" onClick={onClose}>\n        Cancel\n      </Button>,\n    ]}\n  >\n    <Split hasGutter>\n      <SplitItem>\n        <ExclamationTriangleIcon size=\"xl\" className=\"ins-m-alert\" />\n      </SplitItem>\n      <SplitItem isFilled>\n        <Stack hasGutter>\n          <StackItem>\n            This action will remove{' '}\n            <b>\n              {selected.length === 1\n                ? selected[0]?.display_name\n                : selected.length}\n            </b>{' '}\n            {pluralize(selected.length, 'system')} from <b>{remediationName}</b>{' '}\n            Remediation.\n          </StackItem>\n          <StackItem>\n            Removing {pluralize(selected.length, 'system')} from this\n            Remediation will remove it from all associated issues in{' '}\n            <b>{remediationName}</b> Remediation. Be careful as you can end up\n            with Remediation without any systems.\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  </Modal>\n);\n\nRemoveSystemModal.propTypes = {\n  selected: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      display_name: PropTypes.string,\n    })\n  ).isRequired,\n  remediationName: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default RemoveSystemModal;\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n","import React, { useEffect, useRef, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { remediationSystems } from '../../store/reducers';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { deleteSystems, selectEntity, loadRemediation } from '../../actions';\nimport './SystemsTable.scss';\nimport RemoveSystemModal from './RemoveSystemModal';\nimport { generateUniqueId } from '../Alerts/PlaybookToastAlerts';\nimport {\n  calculateChecked,\n  calculateSystems,\n  fetchInventoryData,\n} from './helpers';\n\nconst SystemsTableWrapper = ({\n  remediation,\n  registry,\n  refreshRemediation,\n  setActiveAlert,\n}) => {\n  const [isOpen, setIsOpen] = useState();\n  const systemsRef = useRef();\n  const getEntitiesRef = useRef(() => undefined);\n  const activeSystem = useRef(undefined);\n  const dispatch = useDispatch();\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n\n  const onConfirm = () => {\n    (async () => {\n      const selectedSystems =\n        selected.size > 0\n          ? Array.from(selected, ([, value]) => value)\n          : [\n              {\n                ...activeSystem.current,\n              },\n            ];\n      const action = deleteSystems(selectedSystems, remediation);\n      dispatch(action);\n      await action.payload;\n      refreshRemediation();\n    })();\n    activeSystem.current = undefined;\n    setActiveAlert({\n      key: generateUniqueId(),\n      title: `Removed ${selected.size} ${\n        selected.size > 1 ? 'systems' : 'system'\n      } from playbook`,\n      description: '',\n      variant: 'success',\n    });\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    systemsRef.current = calculateSystems(remediation);\n  }, [remediation.id]);\n\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      noDetail\n      hideFilters={{\n        all: true,\n        name: false,\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n      bulkSelect={{\n        count: selected ? selected.size : 0,\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: () => {\n              dispatch(selectEntity(-1, false));\n            },\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select page (${rows.length})`,\n                  onClick: () => {\n                    dispatch(selectEntity(0, true));\n                  },\n                }\n              : {}),\n          },\n        ],\n        checked: calculateChecked(rows, selected),\n        onSelect: (value) => {\n          dispatch(selectEntity(0, value));\n        },\n      }}\n      getEntities={async (_i, config) =>\n        fetchInventoryData(config, systemsRef.current, getEntitiesRef.current)\n      }\n      onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities, api }) => {\n        getEntitiesRef.current = api?.getEntities;\n        registry?.register?.({\n          ...mergeWithEntities(remediationSystems(INVENTORY_ACTION_TYPES)),\n        });\n      }}\n      actions={[\n        {\n          title: 'Remove system',\n          onClick: (_event, _index, { id, display_name: displayName }) => {\n            activeSystem.current = {\n              id,\n              displayName,\n              issues: remediation.issues.filter((issue) =>\n                issue.systems.find(({ id: systemId }) => systemId === id)\n              ),\n            };\n            setIsOpen(true);\n          },\n        },\n      ]}\n    >\n      {loaded && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsOpen(true)}\n          isDisabled={selected.size === 0}\n        >\n          Remove system\n        </Button>\n      )}\n      <RemoveSystemModal\n        isOpen={isOpen}\n        onConfirm={onConfirm}\n        selected={\n          selected.size > 0\n            ? Array.from(selected, ([, value]) => value)\n            : [activeSystem.current]\n        }\n        onClose={() => {\n          activeSystem.current = undefined;\n          setIsOpen(false);\n        }}\n        remediationName={remediation.name}\n      />\n    </InventoryTable>\n  );\n};\n\nconst SystemsTable = (props) => {\n  const dispatch = useDispatch();\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return registry ? (\n    <Provider store={registry.store}>\n      <SystemsTableWrapper\n        registry={registry}\n        refreshRemediation={() =>\n          dispatch(loadRemediation(props.remediation.id))\n        }\n        setActiveAlert={props.setActiveAlert}\n        {...props}\n      />\n    </Provider>\n  ) : (\n    <Fragment />\n  );\n};\n\nSystemsTable.propTypes = {\n  remediation: PropTypes.shape({\n    id: PropTypes.string,\n    issues: PropTypes.arrayOf(\n      PropTypes.shape({\n        systems: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string,\n            display_name: PropTypes.string,\n            resolved: PropTypes.bool,\n          })\n        ),\n      })\n    ),\n  }),\n};\n\nSystemsTableWrapper.propTypes = {\n  ...SystemsTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  refreshRemediation: PropTypes.func,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default SystemsTable;\n","import React from 'react';\n\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  SyncIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\n\nimport { CancelButton } from '../containers/CancelButton';\n\nimport { capitalize } from '../Utilities/utils';\n\nconst connectorUrl = () =>\n  insights.chrome.isBeta()\n    ? `${window.location.origin}/beta/settings/connector`\n    : `${window.location.origin}/settings/connector`;\n\nexport const normalizeStatus = (status) =>\n  ({\n    running: 'running',\n    pending: 'running',\n    acked: 'running',\n    failure: 'failure',\n    canceled: 'canceled',\n    success: 'success',\n  }[status]);\n\nexport const renderStatusIcon = (status) =>\n  ({\n    running: (\n      <InProgressIcon\n        className=\"rem-c-running\"\n        aria-label=\"connection status\"\n      />\n    ),\n    success: (\n      <CheckCircleIcon\n        className=\"rem-c-success\"\n        aria-label=\"connection status\"\n      />\n    ),\n    failure: (\n      <TimesCircleIcon\n        className=\"rem-c-failure\"\n        aria-label=\"connection status\"\n      />\n    ),\n    canceled: (\n      <TimesCircleIcon\n        className=\"rem-c-canceled\"\n        aria-label=\"connection status\"\n      />\n    ),\n  }[status]);\n\nexport const renderStatus = (status, text) =>\n  ({\n    running: (\n      <Flex className=\"rem-c-running\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Running'}</b>\n        </FlexItem>\n        <FlexItem>\n          <InProgressIcon aria-label=\"connection status: running\" />\n        </FlexItem>\n      </Flex>\n    ),\n    success: (\n      <Flex className=\"rem-c-success\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Success'}</b>\n        </FlexItem>\n        <FlexItem>\n          <CheckCircleIcon aria-label=\"connection status: success\" />\n        </FlexItem>\n      </Flex>\n    ),\n    failure: (\n      <Flex className=\"rem-c-failure\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Failed'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: failed\" />\n        </FlexItem>\n      </Flex>\n    ),\n    canceled: (\n      <Flex className=\"rem-c-canceled\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Canceled'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: canceled\" />\n        </FlexItem>\n      </Flex>\n    ),\n  }[status]);\n\nconst statusTextClass = 'rem-c-status-text';\nexport const statusText = (executorStatus) =>\n  ({\n    running: <b className={`${statusTextClass} rem-c-running`}>Running</b>,\n    pending: <b className={`${statusTextClass} rem-c-running`}>Pending</b>,\n    acked: <b className={`${statusTextClass} rem-c-running`}> Acked </b>,\n    success: <b className={`${statusTextClass} rem-c-success`}>Succeeded</b>,\n    failure: <b className={`${statusTextClass} rem-c-failure`}>Failed</b>,\n    canceled: <b className={`${statusTextClass} rem-c-canceled`}>Canceled</b>,\n  }[executorStatus]);\n\nexport const pluralize = (number, str) =>\n  number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\nexport const StatusSummary = ({\n  executorStatus,\n  permission,\n  hasCancel,\n  counts,\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const runningCount =\n    counts.acked && !counts.acked.isNaN()\n      ? counts.running + counts.pending + counts.acked\n      : counts.running + counts.pending;\n  const failCount = counts.failure + counts.canceled;\n  const passCount = counts.success;\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  const statusBar = (\n    <Flex className=\"rem-c-status-bar\">\n      {executorStatus && <FlexItem>{statusText(executorStatus)}</FlexItem>}\n      <FlexItem>{renderStatus('success', `${passCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('failure', `${failCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('running', `${runningCount}`)}</FlexItem>\n      {isDebug() &&\n        hasCancel &&\n        permission.permissions.execute &&\n        executorStatus &&\n        normalizeStatus(executorStatus) === 'running' && (\n          <FlexItem>\n            <CancelButton\n              remediationName={remediationName}\n              remediationId={remediationId}\n              playbookId={playbookId}\n            />\n          </FlexItem>\n        )}\n    </Flex>\n  );\n\n  if (executorStatus) {\n    return (\n      <Tooltip\n        position=\"right\"\n        className=\"ins-c-status-tooltip\"\n        enableFlip\n        content={\n          <div>\n            Run: {capitalize(executorStatus)} <br />\n            Success: {pluralize(counts.success, 'system')} <br />\n            Failed: {pluralize(counts.failure, 'system')} <br />\n            Canceled: {pluralize(counts.canceled, 'system')} <br />\n            {counts.acked && !counts.acked.isNaN()\n              ? `Pending, Running, Acked: ${pluralize(\n                  counts.pending + counts.running + counts.acked,\n                  'system'\n                )}`\n              : `Pending, Running: ${pluralize(\n                  counts.pending + counts.running,\n                  'system'\n                )}`}\n          </div>\n        }\n      >\n        {statusBar}\n      </Tooltip>\n    );\n  }\n\n  return statusBar;\n};\n\nexport const styledConnectionStatus = (status, err) =>\n  ({\n    connected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <CheckCircleIcon\n            className=\"rem-c-reboot-check-circle rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Ready\n        </Text>\n      </TextContent>\n    ),\n    // TODO: delete?\n    available: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <CheckCircleIcon\n            className=\"rem-c-reboot-check-circle rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Ready\n        </Text>\n      </TextContent>\n    ),\n    disconnected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Connection issue\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Receptor not responding\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"troubleshoot\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Troubleshoot\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // TODO: delete?\n    unavailable: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <ExclamationCircleIcon\n            className=\"rem-c-failure rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Connection issue\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            {err ? err : 'Cloud Connector not responding'}\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"troubleshoot\"\n            // eslint-disable-next-line no-console\n            variant=\"link\"\n            onClick={() => console.log('TODO: add link')}\n          >\n            Troubleshoot\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_executor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Direct connection.\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Connect your systems to Satellite to automatically remediate.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2020-10/html/remediating_issues_across_your_red_hat_satellite_infrastructure_using_red_hat_insights/configuring-your-satellite-infrastructure-to-communicate-with-insights\"\n          >\n            Learn how to connect &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_source: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Satellite not configured\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Satellite not registered for Playbook execution\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"configure\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Learn how to register Satellite\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_receptor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <ExclamationCircleIcon\n            className=\"rem-c-failure rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Configure Cloud connector to automatically remediate\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2020-10/html/remediating_issues_across_your_red_hat_satellite_infrastructure_using_red_hat_insights/configuring-your-satellite-infrastructure-to-communicate-with-insights\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_rhc: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl()}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/red_hat_connector_configuration_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_smart_management: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Not entitled\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights is supported only for systems with Cloud\n            connector, a feature of Smart Management\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"#\"\n          >\n            Learn about Smart Management &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    disabled: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl()}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/red_hat_connector_configuration_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    loading: (\n      <TextContent>\n        <Text component={TextVariants.small}>\n          <SyncIcon\n            className=\"rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Checking\n        </Text>\n      </TextContent>\n    ),\n  }[status]);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalVariant, Button, Title } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './WarningModal.scss';\n\nexport const WarningModal = ({ isOpen, onModalCancel, onConfirmCancel }) => (\n  <Modal\n    header={\n      <Title\n        headingLevel=\"h1\"\n        size=\"2xl\"\n        className=\"ins-c-modal__cancel-run-warning-header\"\n      >\n        <ExclamationTriangleIcon\n          size=\"md\"\n          className=\"ins-c-modal__cancel-run-warning-header--icon\"\n        />\n        Cancel remediation process\n      </Title>\n    }\n    title=\"Cancel remediation process\"\n    hideTitle\n    variant={ModalVariant.small}\n    className=\"ins-c-modal__cancel-run-warning\"\n    isOpen={isOpen}\n    onClose={onModalCancel}\n    actions={[\n      <Button\n        key=\"confirm\"\n        variant=\"danger\"\n        ouiaId=\"cancel_playbook\"\n        onClick={onConfirmCancel}\n      >\n        Cancel playbook process\n      </Button>,\n      <Button\n        key=\"cancel\"\n        variant=\"link\"\n        ouiaId=\"cancel\"\n        onClick={onModalCancel}\n      >\n        Cancel\n      </Button>,\n    ]}\n    isFooterLeftAligned\n  >\n    <span>\n      Canceling a running playbook process only affects pending and running\n      tasks. It does not affect any previously succeeded or failed tasks that\n      have already run.\n    </span>\n  </Modal>\n);\n\nWarningModal.propTypes = {\n  type: PropTypes.string,\n  isOpen: PropTypes.bool,\n  onModalCancel: PropTypes.func,\n  onConfirmCancel: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport { WarningModal } from '../components/Modals/WarningModal';\n\nimport { useDispatch } from 'react-redux';\nimport { cancelPlaybookRuns } from '../actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const CancelButton = ({\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const [cancelWarningVisible, setcancelWarningVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const cancelRun = (remediationName, remediationId, playbookId) => {\n    dispatch(cancelPlaybookRuns(remediationId, playbookId));\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title: `Canceling playbook ${remediationName} successful`,\n        dismissDelay: 8000,\n        dismissable: false,\n      })\n    );\n    setcancelWarningVisible(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"link\" onClick={() => setcancelWarningVisible(true)}>\n        Cancel process\n      </Button>\n      <WarningModal\n        isOpen={cancelWarningVisible}\n        onModalCancel={() => setcancelWarningVisible(false)}\n        onConfirmCancel={() =>\n          cancelRun(remediationName, remediationId, playbookId)\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nCancelButton.propTypes = {\n  remediationName: PropTypes.string,\n  remediationId: PropTypes.string,\n  playbookId: PropTypes.string,\n};\n","import { useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport filter from 'lodash/filter';\nimport pickBy from 'lodash/pickBy';\nimport keys from 'lodash/keys';\nimport keyBy from 'lodash/keyBy';\nimport mapValues from 'lodash/mapValues';\nimport identity from 'lodash/identity';\nimport intersection from 'lodash/intersection';\n\nimport { SEARCH_DEBOUNCE_DELAY } from '../constants';\n\nconst chain =\n  (f1, f2) =>\n  (...args) => {\n    f1(...args);\n    f2(...args);\n  };\n\n/**\n * Returns a function f that, when called, invokes a sequence of callback functions.\n *\n * By default, this sequence only contains the identity function.\n * Additional callback functions can be added to the sequence by calling f.add().\n * When the function is called with parameters, e.g. f(1, 2), these parameters are passed to callback functions.\n * Callback functions may return a promise however these will *not* be awaited.\n * If a callback function throws an exception any following callback functions will *not* be invoked.\n *\n * Usage:\n * const f = callbacks();\n *\n * f.add(value => console.log(value));\n * f.add(value => console.log(value + 1));\n * f.add(value => console.log(value + 2));\n *\n * f(5); // prints 5 6 7\n */\nfunction callbacks() {\n  let cb = identity;\n  const fn = (...args) => cb(...args);\n  fn.add = (f) => (cb = chain(cb, f));\n  return fn;\n}\n\nfunction assertId(id) {\n  if (id === undefined) {\n    throw new Error('row does not define id!');\n  }\n}\n\nexport function useSorter(defaultSortBy = 2, defaultSortDir = 'asc') {\n  const [sortBy, setSortBy] = useState(defaultSortBy);\n  const [sortDir, setSortDir] = useState(defaultSortDir);\n\n  const cb = callbacks();\n\n  return {\n    sortBy,\n    sortDir,\n    onChange: cb.add,\n    props: {\n      sortBy: {\n        index: sortBy,\n        direction: sortDir,\n      },\n      onSort(event, sortBy, sortDir) {\n        cb(sortBy, sortDir);\n        setSortBy(sortBy);\n        setSortDir(sortDir);\n      },\n    },\n  };\n}\n\nexport function useFilter() {\n  const [value, setValue] = useState('');\n\n  const cb = callbacks();\n\n  const onValueChange = debounce((value) => {\n    cb(value);\n    setValue(value);\n  }, SEARCH_DEBOUNCE_DELAY);\n\n  return {\n    value,\n    setValue: onValueChange,\n    onChange: cb.add,\n    props: {\n      onFilterChange: onValueChange,\n    },\n  };\n}\n\nexport function useExpander(rowToId = (row) => row.id) {\n  const [value, setValue] = useState(false);\n  let rows = false;\n\n  return {\n    value,\n    register: (r) => {\n      rows = r;\n      rows.forEach((row) => {\n        if (rowToId(row) === value) {\n          row.isOpen = true;\n        }\n      });\n    },\n    props: {\n      onCollapse(event, index, value) {\n        if (!rows) {\n          throw new Error('register() not called on useExpander()');\n        }\n\n        const id = rowToId(rows[index]);\n        assertId(id);\n\n        setValue(value ? id : false);\n      },\n    },\n  };\n}\n\nexport function usePagination() {\n  const [page, setPage] = useState(1);\n  const [pageDebounced, setPageDebounced] = useState(1);\n  const [pageSize, setPageSize] = useState(20);\n\n  const reset = () => setPage(1);\n  const cb = callbacks();\n\n  return {\n    page,\n    pageDebounced,\n    offset: (page - 1) * pageSize,\n    pageSize,\n    setPage,\n    onChange: cb.add,\n    reset,\n    props: {\n      page,\n      perPage: pageSize,\n      onSetPage(event, value) {\n        setPage(value);\n        event.target.tagName === 'INPUT'\n          ? debounce(setPageDebounced, SEARCH_DEBOUNCE_DELAY)(value)\n          : setPageDebounced(value);\n        cb(value, pageSize);\n      },\n      onPerPageSelect(event, value) {\n        cb(page, value);\n        reset();\n        setPageSize(value);\n      },\n    },\n  };\n}\n\nfunction onSelectOne(selected, isSelected, id) {\n  assertId(id);\n\n  const result = {\n    ...selected,\n    [id]: isSelected,\n  };\n\n  return result;\n}\n\nfunction onSelectAll(rows, value, isSelected, rowToId) {\n  const rowIds = keyBy(\n    filter(rows, (row) => rowToId(row)),\n    rowToId\n  );\n\n  return {\n    ...value,\n    ...mapValues(rowIds, () => isSelected),\n  };\n}\n\nfunction isSelected(value, id) {\n  return Object.prototype.hasOwnProperty.call(value, id) ? value[id] : false;\n}\n\nexport function useSelector(rowToId = (row) => row.id) {\n  const [value, setValue] = useState({});\n  let rows = false;\n\n  return {\n    getSelectedIds(possibleIds) {\n      const selected = keys(pickBy(value, identity));\n      if (possibleIds) {\n        return intersection(selected, possibleIds);\n      }\n\n      return selected;\n    },\n    register: (r) => {\n      rows = r;\n      rows.forEach((row) => (row.selected = value[rowToId(row)] === true));\n    },\n    reset: () => setValue({}),\n    props: {\n      onSelect: (unused, isSelected, index) => {\n        if (!rows) {\n          throw new Error('register() not called on useSelector()');\n        }\n\n        setValue((value) =>\n          index === -1\n            ? onSelectAll(rows, value, isSelected, rowToId)\n            : onSelectOne(value, isSelected, rowToId(rows[index]))\n        );\n      },\n    },\n    tbodyProps: {\n      onRowClick(event, row) {\n        if (['A', 'BUTTON', 'INPUT'].includes(event.target.tagName)) {\n          return;\n        }\n\n        const id = rowToId(row);\n        assertId(id);\n        setValue((value) => ({\n          ...value,\n          [id]: !isSelected(value, id),\n        }));\n      },\n    },\n  };\n}\n","function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport reducers from './reducers';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorTitleKey: 'message',\n      errorDescriptionKey: 'description',\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register(reducers);\n  registry.register({ notifications: notificationsReducer });\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RedoIcon, TimesIcon } from '@patternfly/react-icons';\nimport { Fragment } from 'react';\n\nconst RebootColumn = ({ rebootRequired }) => {\n  const Icon = rebootRequired ? RedoIcon : TimesIcon;\n  return (\n    <Fragment>\n      <span>\n        <Icon /> {rebootRequired ? 'Yes' : 'No'}\n      </span>\n    </Fragment>\n  );\n};\n\nRebootColumn.propTypes = {\n  rebootRequired: PropTypes.bool,\n};\n\nexport default RebootColumn;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  cellWidth,\n  sortable,\n} from '@patternfly/react-table';\nimport RebootColumn from './RebootColumn';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\nimport { buildIssueUrl } from '../../Utilities/urls';\nimport sortBy from 'lodash/sortBy';\n\nconst issueType = {\n  advisor: 'Advisor recommendation',\n  vulnerabilities: 'Vulnerability',\n  'patch-advisory': 'Patch advisory',\n};\n\nconst sortByIndex = (issue) => [\n  issue.description,\n  issue.resolution.needs_reboot,\n  issueType?.[issue.id.split(':')[0]],\n  issue.resolved,\n];\n\nconst IssuesColumn = ({ issues, status, displayName }) => {\n  const [sortByConfig, setSortByConfig] = useState({\n    index: 0,\n    direction: 'asc',\n  });\n  const [isOpen, setIsOpen] = useState();\n  const StatusIcon = status ? CheckIcon : TimesIcon;\n  const sortedIssues = sortBy(\n    issues,\n    (sortIssue) => sortByIndex(sortIssue)[sortByConfig.index]\n  );\n  return (\n    <Fragment>\n      <Button variant=\"link\" isInline onClick={() => setIsOpen(true)}>\n        {issues.length}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        title={`Actions for system ${displayName}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Table\n          variant=\"compact\"\n          aria-label={`Issues table for ${displayName}`}\n          rows={(sortByConfig.direction === 'asc'\n            ? sortedIssues\n            : sortedIssues.reverse()\n          ).map((issue) => [\n            {\n              title: (\n                <Fragment>\n                  <div>\n                    <a variant=\"link\" isInline href={buildIssueUrl(issue.id)}>\n                      {issue.description}\n                    </a>\n                  </div>\n                  <div>{issue.resolution.description}</div>\n                </Fragment>\n              ),\n            },\n            {\n              title: (\n                <Fragment>\n                  <RebootColumn\n                    rebootRequired={issue.resolution.needs_reboot}\n                  />\n                </Fragment>\n              ),\n            },\n            issueType?.[issue.id.split(':')[0]] || 'Unknown',\n            {\n              title: (\n                <Fragment>\n                  <StatusIcon />{' '}\n                  {issue.resolved ? 'Remediated' : 'Not remediated'}\n                </Fragment>\n              ),\n            },\n          ])}\n          cells={[\n            {\n              title: 'Action',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable, cellWidth(20)],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable, cellWidth(15)],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable, cellWidth(20)],\n            },\n          ]}\n          sortBy={sortByConfig}\n          onSort={(_e, index, direction) =>\n            setSortByConfig({ index, direction })\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </Modal>\n    </Fragment>\n  );\n};\n\nIssuesColumn.propTypes = {\n  issues: PropTypes.arrayOf(PropTypes.shape()),\n  rebootRequired: PropTypes.bool,\n  status: PropTypes.bool,\n  displayName: PropTypes.string,\n};\n\nexport default IssuesColumn;\n","import React from 'react';\n\nimport { ACTION_TYPES } from '../constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport { RebootColumn, IssuesColumn } from '../components/SystemsTable';\n\nfunction issuesToSystemsIds(issues) {\n  return uniq(\n    flatMap(issues, (issue) => issue.systems.map((system) => system.id))\n  );\n}\n\nfunction computeRebootStats(remediation) {\n  const systems = issuesToSystemsIds(remediation.issues);\n  const rebootRequired = issuesToSystemsIds(\n    remediation.issues.filter((issue) => issue.resolution.needs_reboot)\n  );\n\n  return {\n    ...remediation,\n    stats: {\n      systemsWithReboot: rebootRequired.length,\n      systemsWithoutReboot: systems.length - rebootRequired.length,\n    },\n  };\n}\n\nexport const remediationSystems = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [ACTION_TYPES.SELECT_ENTITY]: (state, { payload }) => {\n      const selected = state.selected || new Map();\n      if (payload.selected) {\n        if (payload.id === 0) {\n          state?.rows?.forEach((row) => selected.set(row?.id, row));\n        } else {\n          const selectedRow = state?.rows?.find(\n            ({ id } = {}) => id === payload.id\n          );\n          selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n        }\n      } else {\n        if (payload.id === 0) {\n          state.rows.forEach((row) => selected.delete(row.id));\n        } else if (payload.id === -1) {\n          selected.clear();\n        } else {\n          selected.delete(payload.id);\n        }\n      }\n\n      return {\n        ...state,\n        selected: new Map(selected),\n      };\n    },\n    [`${LOAD_ENTITIES_FULFILLED}`]: (state) => {\n      return {\n        ...state,\n        rows: state.rows.map(({ id, ...row }) => ({\n          id,\n          ...row,\n          selected: !!state.selected?.get(id),\n        })),\n        columns: [\n          ...state.columns.filter(({ key }) =>\n            ['display_name', 'tags'].includes(key)\n          ),\n          {\n            key: 'issues',\n            title: 'Issues',\n            // eslint-disable-next-line react/display-name\n            renderFunc: (issues, id, { display_name }) => (\n              <IssuesColumn\n                issues={issues}\n                id={id}\n                displayName={display_name}\n              />\n            ),\n            props: { width: 15 },\n          },\n          {\n            key: 'rebootRequired',\n            title: 'Reboot required',\n            // eslint-disable-next-line react/display-name\n            renderFunc: (rebootRequired) => (\n              <RebootColumn rebootRequired={rebootRequired} />\n            ),\n            props: { width: 15 },\n          },\n        ].map((cell) => ({\n          ...cell,\n          props: {\n            ...(cell.props || {}),\n            isStatic: true,\n          },\n        })),\n      };\n    },\n  });\n\nconst reducers = {\n  remediations: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATIONS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATIONS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        value: action.payload,\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATIONS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  selectedRemediation: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATION_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        remediation: computeRebootStats(action.payload),\n      }),\n      [ACTION_TYPES.REFRESH_REMEDIATION_FULFILLED]: (state, action) => {\n        if (action.payload.id === state.remediation.id) {\n          return {\n            status: 'fulfilled',\n            remediation: computeRebootStats(action.payload),\n          };\n        }\n\n        return state;\n      },\n      [ACTION_TYPES.LOAD_REMEDIATION_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n      [ACTION_TYPES.PATCH_REMEDIATION_FULFILLED]: (\n        { status, remediation },\n        action\n      ) => {\n        return {\n          status,\n          remediation: {\n            ...remediation,\n            ...action.payload,\n          },\n        };\n      },\n      [ACTION_TYPES.DELETE_REMEDIATION_ISSUE_FULFILLED]: (state, action) => {\n        const issues = state.remediation.issues.filter(\n          (issue) => issue.id !== action.payload.issueId\n        );\n        if (action.payload.id === state.remediation.id) {\n          return {\n            status: 'fulfilled',\n            remediation: computeRebootStats({\n              ...state.remediation,\n              issues,\n              needs_reboot: issues.some(\n                (issue) => issue.resolution.needs_reboot\n              ), // eslint-disable-line camelcase\n            }),\n          };\n        }\n\n        return state;\n      },\n      [ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM_FULFILLED]: (\n        state,\n        action\n      ) => {\n        if (action.payload.id !== state.remediation.id) {\n          return state;\n        }\n\n        const issues = state.remediation.issues.filter((issue) => {\n          if (issue.id !== action.payload.issue) {\n            return true;\n          }\n\n          // if the action only had 1 systems, which is now gone, remove the action also\n          issue.systems = issue.systems.filter(\n            (system) => system.id !== action.payload.system\n          );\n          return issue.systems.length > 0;\n        });\n\n        return {\n          status: 'fulfilled',\n          remediation: computeRebootStats({\n            ...state.remediation,\n            issues,\n            needs_reboot: issues.some((issue) => issue.resolution.needs_reboot), // eslint-disable-line camelcase\n          }),\n        };\n      },\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  selectedRemediationStatus: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload,\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  connectionStatus: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_CONNECTION_STATUS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.GET_CONNECTION_STATUS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload.data,\n        etag: action.payload.etag,\n      }),\n      [ACTION_TYPES.GET_CONNECTION_STATUS_REJECTED]: () => ({\n        status: 'rejected',\n        data: [],\n      }),\n      [ACTION_TYPES.SET_ETAG]: (state, action) => ({\n        ...state,\n        etag: action.etag,\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  inventoryEntitiesReducer:\n    (props = { INVENTORY_ACTION_TYPES: {} }) =>\n    () =>\n      applyReducerHash({\n        [props.INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: (state) => {\n          return {\n            ...state,\n            columns: [\n              {\n                key: 'display_name',\n                title: 'Name',\n                // eslint-disable-next-line\n                renderFunc: (name, id, { display_name }) => <div><a href={props.urlBuilder(id)}>{display_name}</a></div>\n              },\n              {\n                key: 'system_status',\n                title: 'Status',\n                // eslint-disable-next-line\n                        renderFunc: (name, id) => <div>{props.generateStatus(id)}</div>\n              },\n            ],\n          };\n        },\n      }),\n\n  playbookActivityIntentory: (props) => () =>\n    applyReducerHash({\n      [props.INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: (state) => {\n        return {\n          ...state,\n          columns: [\n            {\n              key: 'display_name',\n              title: 'Name',\n              // eslint-disable-next-line\n              renderFunc: (name, id, { fqdn }) => <div><a href={props.urlBuilder(id)}>{fqdn || name || id}</a></div>\n            },\n            state.columns.find((col) => col.key === 'tags'),\n            {\n              key: 'status',\n              title: 'Status',\n              renderFunc: (status) => props.renderStatus(status),\n            },\n          ],\n        };\n      },\n\n      [ACTION_TYPES.EXPAND_INVENTORY_TABLE]: (state, action) => {\n        return {\n          ...state,\n          rows: state.rows.map((row) => ({\n            ...row,\n            isOpen:\n              row.id === action.payload.id ? action.payload.isOpen : false,\n          })),\n        };\n      },\n    }),\n\n  playbookRuns: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUNS_FULFILLED]: (state, action) => ({\n      status: 'fulfilled',\n      data: action.payload.data,\n      meta: action.payload.meta,\n    }),\n  }),\n\n  cancelPlaybookRuns: applyReducerHash(\n    {\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        value: action.payload,\n      }),\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  playbookRun: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUN_FULFILLED]: (state, action) => ({\n      data: action.payload,\n    }),\n  }),\n\n  playbookRunSystems: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_FULFILLED]: (state, action) => ({\n        ...action.payload,\n      }),\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_PENDING]: (state) => ({\n        ...state,\n        status: 'pending',\n      }),\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_REJECTED]: (state) => ({\n        ...state,\n        data: [],\n        status: 'rejected',\n      }),\n    },\n    {\n      data: [],\n      meta: {},\n    }\n  ),\n\n  playbookRunSystemDetails: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS_FULFILLED]: (\n      state,\n      action\n    ) => ({\n      ...action.payload,\n    }),\n  }),\n\n  runRemediation: applyReducerHash(\n    {\n      [ACTION_TYPES.RUN_REMEDIATION_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.RUN_REMEDIATION_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload.data,\n      }),\n      [ACTION_TYPES.RUN_REMEDIATION_REJECTED]: (state, action) => ({\n        status: action.payload.response.status === 412 ? 'changed' : 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  sources: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_ENDPOINT_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: {\n          ...state.data,\n          [action.payload.id]: action.payload,\n        },\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n  executable: applyReducerHash(\n    {\n      [ACTION_TYPES.CHECK_EXECUTABLE_REJECTED]: () => false,\n      [ACTION_TYPES.CHECK_EXECUTABLE_FULFILLED]: () => true,\n    },\n    false\n  ),\n};\n\nexport default reducers;\n"],"names":["actionWrapper","actionsList","callback","dispatch","Promise","all","map","event","payload","then","PlaybookCardHeader","name","id","remediation","remediationIdx","archived","selector","setExecuteOpen","update","loadRemediation","getConnectionStatus","downloadPlaybook","permission","setActiveAlert","useState","isOpen","setIsOpen","isArchived","setIsArchived","useDispatch","dropdownItems","archiveHandler","patchRemediation","push","DropdownItem","key","isDisabled","isReceptorConfigured","className","hasSmartManagement","permissions","execute","onClick","generateUniqueId","title","description","variant","addNotification","CardHeader","CardActions","Dropdown","isPlain","onSelect","f","toggle","KebabToggle","onToggle","position","type","checked","getSelectedIds","includes","onChange","e","props","target","CardTitle","Stack","hasGutter","StackItem","Badge","isRead","Link","to","DateFormat","date","updated_at","propTypes","PropTypes","PlaybookCard","complete","total","Card","isCompact","CardBody","Split","SplitItem","system_count","resolved_count","issue_count","CheckCircleIcon","Progress","value","measureLocation","ProgressMeasureLocation","ProgressVariant","renderProgress","executeOpen","EmptyRemediations","archivedCount","setShowArchived","Bullseye","EmptyState","EmptyStateIcon","icon","WrenchIcon","size","Title","headingLevel","EmptyStateBody","href","appUrl","toString","Button","ouiaId","SORTING_ITERATEES","RemediationTable","remediations","loadRemediations","sorter","filter","pagination","shouldUpdateGrid","setShouldUpdateGrid","setRemediationCount","showArchived","status","cards","useContext","PermissionContext","showRefreshMessage","setShowRefreshMessage","activeToastAlert","setActiveToastAlert","selectedRemediation","reduxSelector","state","connectionStatus","runningRemediation","runRemediation","sources","useEffect","column","sortBy","sortDir","pageSize","offset","undefined","meta","Main","Spinner","centered","data","reduce","result","length","register","ExecuteModal","onClose","showRefresh","remediationId","etag","isLoading","issueCount","issues","remediationStatus","getPlaybookRuns","setEtag","getEndpoint","activeAlert","PlaybookToastAlerts","Grid","sm","md","lg","idx","GridItem","TestButtons","localStorage","getItem","systems","allHosts","slice","dataProviderC1","dataProviderC2","this","isEnabled","window","insights","chrome","auth","getUser","getHosts","hosts","setState","results","RemediationBtn","dataProvider","children","onRemediationCreated","dataProviderA1","dataProviderA2","dataProviderC3","dataProviderC4","dataProviderC5","dataProviderD1","dataProviderD2","React","defaultProps","PlanName","Form","FormGroup","label","isRequired","fieldId","TextInput","handleTextInputChange","placeholder","autoFocus","Component","PlanSystems","systemValue","groupValue","onChangeSystemOptions","bind","onChangeSystemGroup","systemOptions","disabled","groupOptions","Radio","Select","option","index","SelectOption","document","isModalOpen","setIsModalOpen","noReceptorBannerVisible","setNoReceptorBannerVisible","useSorter","useFilter","useSelector","usePagination","remediationCount","filterText","setFilterText","dialogOpen","setDialogOpen","actions","pageDebounced","setValue","reset","selectedIds","sendNotification","submitted","getNotification","ModalStepContent","activeFiltersConfig","filters","category","chips","onDelete","Consumer","read","DeniedState","PageHeader","PageHeaderTitle","PrimaryToolbar","filterConfig","items","filterValues","_e","bulkSelect","count","isSelected","actionsConfig","valid","byId","keyBy","r","verifyDownload","download","write","setItem","itemCount","NoReceptorBanner","ConfirmationDialog","text","confirmText","del","deleteRemediation","Wizard","isLarge","content","RemediationDetails","lazy","ActivityDetails","ExecutorDetails","Routes","Suspense","fallback","Fragment","Switch","Route","exact","path","component","Home","render","Redirect","childProps","history","createContext","App","hasRead","hasWrite","hasExecute","readPermission","writePermission","executePermission","arePermissionLoaded","unregister","init","hideGlobalFilter","identifyApp","user","entitlements","smart_management","is_entitled","getIsReceptorConfigured","isConfigured","on","domEvent","replace","basename","getUserPermissions","remediationsPermissions","permissionList","handlePermissionUpdate","Provider","withRouter","connect","getIssuePrefix","split","getIssueApplication","getSystemName","display_name","hostname","includesIgnoreCase","included","toLowerCase","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","systemId","buildIssueUrl","parts","segment","app","urijs","baseURI","pathName","location","pathname","Error","limit","system","hideArchived","ACTION_TYPES","loadRemediationStatus","getRemediationStatus","refreshRemediation","createRemediation","deleteRemediationIssue","issueId","deleteRemediationIssueSystem","patchRemediationIssue","resolution","getResolutions","ruleId","resolutions","exclude","headers","cancelPlaybookRuns","runId","getPlaybookRun","getPlaybookRunSystems","executorId","ansibleHost","getPlaybookRunSystemDetails","expandInventoryTable","options","selectEntity","selected","deleteSystems","deleteSystemsFromRemediation","checkExecutable","Alert","isInline","actionClose","AlertActionCloseButton","activeAlerts","setActiveAlerts","addActiveAlert","removeAlert","previousAlerts","alert","AlertGroup","isToast","timeout","isLiveRegion","onTimeout","Date","getTime","Modal","ExclamationTriangleIcon","ModalVariant","isFooterLeftAligned","EmptyStateVariant","LockIcon","referrer","back","EmptyExecutePlaybookState","DesktopIcon","remediationName","isUserEntitled","setIsUserEntitled","connected","setConnected","disconnected","setDisconnected","isDebug","combineStatuses","availability","availability_status","pass","fail","connection_status","con","dis","c","endpoint_id","updatedData","sourcesStatus","isAvailable","generateRowsStatus","styledConnectionStatus","availability_status_error","rows","cells","executor_name","Tooltip","connectedCount","acc","systemCount","pluralize","number","str","executor_id","TextContent","Skeleton","Text","TextVariants","ExpandableSection","toggleText","List","ListItem","rel","ExternalLinkAltIcon","Table","TableVariant","TableHeader","TableBody","RemoveSystemModal","onConfirm","appendTo","getElementsByClassName","isFilled","calculateChecked","every","has","some","fetchInventoryData","getEntities","page","config","currSystems","hostnameOrId","per_page","hasItems","host","find","SystemsTableWrapper","registry","systemsRef","useRef","getEntitiesRef","activeSystem","entities","Map","loaded","current","curr","forEach","found","resolved","rebootRequired","needs_reboot","calculateSystems","InventoryTable","showTags","noDetail","hideFilters","tableProps","canSelectAll","_i","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","api","remediationSystems","_event","_index","displayName","selectedSystems","Array","from","action","SystemsTable","setRegistry","ReducerRegistry","promiseMiddleware","store","connectorUrl","isBeta","origin","normalizeStatus","running","pending","acked","failure","canceled","success","renderStatus","Flex","spacer","default","FlexItem","InProgressIcon","TimesCircleIcon","statusTextClass","StatusSummary","executorStatus","hasCancel","counts","playbookId","runningCount","isNaN","failCount","passCount","statusBar","statusText","enableFlip","capitalize","err","available","style","margin","unavailable","ExclamationCircleIcon","console","log","no_executor","no_source","no_receptor","no_rhc","no_smart_management","loading","SyncIcon","WarningModal","onModalCancel","onConfirmCancel","header","hideTitle","CancelButton","cancelWarningVisible","setcancelWarningVisible","dismissDelay","dismissable","cancelRun","callbacks","cb","identity","fn","add","f1","f2","assertId","defaultSortBy","defaultSortDir","setSortBy","setSortDir","direction","onSort","onValueChange","debounce","SEARCH_DEBOUNCE_DELAY","onFilterChange","setPage","setPageDebounced","setPageSize","perPage","onSetPage","tagName","onPerPageSelect","onSelectOne","onSelectAll","rowToId","rowIds","row","mapValues","Object","prototype","hasOwnProperty","call","possibleIds","keys","pickBy","intersection","unused","tbodyProps","onRowClick","assert","test","msg","TypeError","checkAllowedKeys","reference","checkRequiredKeys","checkSystems","isArray","validate","middleware","getRegistry","notificationsMiddleware","errorTitleKey","errorDescriptionKey","item","reducers","notifications","notificationsReducer","RebootColumn","Icon","RedoIcon","TimesIcon","issueType","advisor","vulnerabilities","IssuesColumn","sortByConfig","setSortByConfig","StatusIcon","CheckIcon","sortedIssues","sortIssue","reverse","transforms","sortable","cellWidth","issuesToSystemsIds","uniq","flatMap","computeRebootStats","stats","systemsWithReboot","systemsWithoutReboot","LOAD_ENTITIES_FULFILLED","applyReducerHash","set","selectedRow","clear","get","columns","renderFunc","width","cell","isStatic","selectedRemediationStatus","inventoryEntitiesReducer","urlBuilder","generateStatus","playbookActivityIntentory","fqdn","col","playbookRuns","playbookRun","playbookRunSystems","playbookRunSystemDetails","response","executable"],"sourceRoot":""}