{"version":3,"file":"js/4026.ff4b26b874dd90186121.js","mappings":"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","sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () =>\n  window.location.pathname\n    .split('/')\n    .filter((s) => s !== 'preview' && s.length > 0)\n    .shift();\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'preview' ? 'preview/' : '';\n};\n\nexport const getBaseUri = () =>\n  `${document.baseURI.replace('preview/', '')}${getEnvUrl()}`;\n\nexport const remediationUrl = (id) =>\n  `${getBaseUri()}${getGroup()}/remediations${id ? `/${id}` : ''}`;\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>Required</div>\n            ) : (\n              <div>Not required</div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              allSystemsNamed: allSystemsNamed.filter((system) =>\n                curr.systems.includes(system.id)\n              ),\n              allSystems: curr.systems,\n              cells: [\n                {\n                  title: (\n                    <Bullseye>\n                      <Spinner />\n                    </Bullseye>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nconst buildSystemRow = (allSystemsNamed = [], allSystems = []) => (\n  <SystemsTableWithContext\n    allSystemsNamed={allSystemsNamed}\n    allSystems={allSystems}\n    disabledColumns={['updated']}\n  />\n);\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  temp[rowKey + 1].cells = [\n    {\n      title: buildSystemRow(\n        rows[rowKey + 1].allSystemsNamed,\n        rows[rowKey + 1].allSystems\n      ),\n    },\n  ];\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK],\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    .then(({ id }) => {\n      setState({ id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(id, formValues[SELECT_PLAYBOOK], !isUpdate),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems, sortBy) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n  return {\n    ...state,\n    selected,\n    rows: sortByAttr(\n      state.rows.map(({ id, ...row }) => ({\n        id,\n        ...row,\n        selected: !!selected?.includes(id),\n      })),\n      'display_name',\n      sortBy?.direction || 'asc'\n    ),\n    sortBy,\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const sortByAttr = (systems, attribute, direction) =>\n  Array.isArray(systems)\n    ? systems.sort(\n        (a, b) =>\n          ((a[attribute] > b[attribute] && 1) || -1) *\n          (direction === 'asc' ? 1 : -1)\n      )\n    : [];\n\nexport const fetchSystemsInfo = async (\n  config,\n  sortableColumns = [],\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const isSortingValid = sortableColumns.includes(config.orderBy);\n  config.orderBy = isSortingValid ? config.orderBy : undefined;\n  config.orderDirection = isSortingValid\n    ? config.orderDirection?.toLowerCase()\n    : undefined;\n  allSystemsNamed = sortByAttr(allSystemsNamed, 'name', config.orderDirection);\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ? [curr.id] : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(sliced, { ...config, hasItems: true, page: 1 }, true)\n      : {};\n  return {\n    ...{\n      ...data,\n      results: sortByAttr(data.results, 'display_name', config.orderDirection),\n    },\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n    orderBy: config.orderBy,\n    orderDirection: config.orderDirection,\n    sortBy: { key: config.orderBy, direction: config.orderDirection },\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state, { payload }) =>\n      loadEntitiesFulfilled(state, allSystems, {\n        key: payload.orderBy,\n        direction: payload.orderDirection,\n      }),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), ...systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n\nexport const matchPermissions = (permissionA, permissionB) => {\n  const segmentsA = permissionA.split(':');\n  const segmentsB = permissionB.split(':');\n\n  if (segmentsA.length !== segmentsB.length) {\n    return false;\n  }\n\n  return segmentsA.every(\n    (segmentA, index) =>\n      segmentA === segmentsB[index] ||\n      segmentA === '*' ||\n      segmentsB[index] === '*'\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n  const sortableColumns = ['display_name'];\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.reduce(\n          (acc, curr) => [\n            ...acc,\n            ...(!disabledColumns.includes(curr.key)\n              ? [\n                  {\n                    ...curr,\n                    props: {\n                      ...(curr.props || {}),\n                      isStatic: !sortableColumns.includes(curr.key),\n                    },\n                  },\n                ]\n              : []),\n          ],\n          []\n        )\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(\n          config,\n          sortableColumns,\n          allSystemsNamed,\n          defaultGetEntities\n        )\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"names":["capitalize","string","concat","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","document","baseURI","replace","filter","s","length","shift","dedupeArray","array","_toConsumableArray","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","_curr$systems","_curr$systems2","isOpen","cells","title","action","React","Fragment","resolution","alternate","needsReboot","systems","props","parent","fullWidth","system","includes","allSystems","Bullseye","Spinner","colSpan","className","buildSystemRow","arguments","undefined","SystemsTableWithContext","disabledColumns","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","_formValues$RESOLUTIO","issueResolutions","find","r","resolutions","_formValues$EXISTING_","_formValues$EXISTING_2","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","_ref","_formValues$EXISTING_3","_formValues$EXISTING_4","_formValues$EXISTING_5","_formValues$EXISTING_6","_getResolution","_getResolution$","playbookSystems","issue","interval","setInterval","add","isUpdate","api","auto_reboot","name","then","_ref3","_data$onRemediationCr","onRemediationCreated","call","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","failed","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","_objectSpread","_ref6","_objectWithoutProperties","_excluded2","sortByAttr","attribute","Array","isArray","fetchSystemsInfo","_ref7","_asyncToGenerator","_regeneratorRuntime","_callee","config","_config$orderDirectio","_config$filters","_config$filters$hostn","getEntities","isSortingValid","hostnameOrId","sliced","_args","_context","prev","next","orderBy","orderDirection","toLowerCase","filters","page","per_page","hasItems","t0","sent","abrupt","results","total","sortBy","stop","_x","apply","splitArray","inputArray","perChunk","Math","ceil","_item","inventoryEntitiesReducer","_ref8","_applyReducerHash","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","_ref4","rowsIds","item","entitySelected","_defineProperty","_ref9","_ref5","_selected","_excluded","loadEntitiesFulfilled","shortenIssueId","_issueId$split","_issueId$split$slice","getIssuesMultiple","_resolutions$find","_ref10","needs_reboot","record","matchPermissions","permissionA","permissionB","segmentsA","segmentsB","every","segmentA","SystemsTable","registry","hasCheckbox","bulkSelect","inventory","useRef","sortableColumns","InventoryTable","hideFilters","tags","registeredWith","stale","columns","isStatic","noDetail","showTags","ref","_i","defaultGetEntities","onLoad","_ref2","mergeWithEntities","INVENTORY_ACTION_TYPES","register","entitiesReducer","tableProps","canSelectAll","defaultProps","propTypes","ReducerRegistry","isRequired","_useState","useState","_useState2","_slicedToArray","setRegistry","useEffect","promiseMiddleware","store","Provider","_extends"],"sourceRoot":""}