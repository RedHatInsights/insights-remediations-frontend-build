{"version":3,"file":"js/RemediationDetails.b3bc304ede2730d0ebcc.js","mappings":"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","sources":["webpack:///./src/Utilities/model.js","webpack:///./src/Utilities/urls.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/SystemsTable/helpers.js","webpack:///./src/components/ResolutionModal/ResolutionStep.js","webpack:///./src/components/ResolutionEditButton.js","webpack:///./src/containers/ConnectedComponents.js","webpack:///./src/components/DeleteButton.js","webpack:///./src/containers/DeleteButtons.js","webpack:///./src/components/RemediationDetailsSystemDropdown.js","webpack:///./src/components/Layouts/IconInline.js","webpack:///./src/components/Modals/SystemsStatusModal.js","webpack:///./src/components/SystemForActionButton.js","webpack:///./src/Utilities/debug.js","webpack:///./src/components/EmptyStates/EmptyActions.js","webpack:///./src/components/RemediationDetailsTable.js","webpack:///./src/components/SystemsTable/RemoveSystemModal.js","webpack:///./src/components/SystemsTable/RebootColumn.js","webpack:///./src/components/SystemsTable/IssuesColumn.js","webpack:///./src/components/SystemsTable/Columns.js","webpack:///./src/components/SystemsTable/SystemsTable.js","webpack:///./src/components/RemediationActivityTable.js","webpack:///./src/components/Dialogs/TextInputDialog.js","webpack:///./src/components/RemediationDetailsDropdown.js","webpack:///./src/components/ExecuteButton.js","webpack:///./src/containers/ExecuteButtons.js","webpack:///./src/components/Alerts/UpsellBanner.js","webpack:///./src/components/EmptyStates/ActivityTabUpsell.js","webpack:///./src/skeletons/SkeletonTableToolbar.js","webpack:///./src/skeletons/SkeletonTabs.js","webpack:///./src/skeletons/RemediationDetailsSkeleton.js","webpack:///./src/components/EmptyStates/EmptyActivityTable.js","webpack:///./src/components/RemediationSummary.js","webpack:///./src/Utilities/useConnectionStatus.js","webpack:///./src/routes/RemediationDetails.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["export function getIssuePrefix(id) {\n  return id.split(':')[0];\n}\n\nexport function getIssueApplication({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'Advisor';\n    case 'ssg':\n      return 'Compliance';\n    case 'vulnerabilities':\n      return 'Vulnerability';\n    case 'patch-advisory':\n      return 'Patch';\n    default:\n      return 'Unknown';\n  }\n}\n\n/* eslint-disable camelcase */\nexport function getSystemName({ display_name, hostname, id }) {\n  if (display_name) {\n    return display_name;\n  }\n\n  if (hostname) {\n    return hostname;\n  }\n\n  return id;\n}\n\nexport function formatUser(user) {\n  return `${user.first_name} ${user.last_name}`;\n}\n\nexport function includesIgnoreCase(text, included) {\n  return text.toLowerCase().includes(included.toLowerCase());\n}\n\nexport const DATE_FORMAT = 'DD MMM YYYY, hh:mm UTC';\n","import urijs from 'urijs';\nimport { getIssuePrefix } from './model';\n\n// Get the current group since we can be mounted at two urls\nexport function getGroup() {\n  const pathName = window.location.pathname.split('/');\n\n  if (pathName[1] === 'preview') {\n    return pathName[2];\n  }\n\n  return pathName[1];\n}\n\nexport function buildInventoryUrl(systemId, tab) {\n  return appUrl('inventory').segment(systemId).segment(tab).toString();\n}\n\nexport function getInventoryTabForIssue({ id }) {\n  switch (getIssuePrefix(id)) {\n    case 'advisor':\n      return 'advisor';\n    case 'vulnerabilities':\n      return 'vulnerabilities';\n    case 'ssg':\n      return 'compliance';\n    case 'patch-advisory':\n      return 'patch';\n    default:\n      return 'general_information';\n  }\n}\n\nexport function inventoryUrlBuilder(issue) {\n  const tab = getInventoryTabForIssue(issue);\n  const base = appUrl('inventory').toString();\n\n  // intentionally not using urijs here to optimize for large number of systems\n  return (systemId) => `${base}/${systemId}?appName=${tab}`;\n}\n\nexport function buildIssueUrl(id) {\n  const parts = id.split(':');\n\n  switch (parts[0]) {\n    case 'advisor':\n      return appUrl(parts[0])\n        .segment('recommendations')\n        .segment(parts[1])\n        .toString();\n    case 'vulnerabilities':\n      return appUrl(parts[0]).segment('cves').segment(parts[1]).toString();\n    case 'patch-advisory':\n      return appUrl(parts[0])\n        .segment('advisories')\n        .segment(parts[1] + ':' + parts[2])\n        .toString();\n    default:\n      return null;\n  }\n}\n\nexport function appUrl(app) {\n  switch (app) {\n    case 'advisor':\n      return urijs(document.baseURI).segment('insights').segment('advisor');\n    case 'vulnerabilities':\n      return urijs(document.baseURI)\n        .segment('insights')\n        .segment('vulnerability');\n    case 'compliance':\n    case 'ssg':\n      return urijs(document.baseURI).segment('insights').segment('compliance');\n    case 'inventory':\n      return urijs(document.baseURI).segment(getGroup()).segment('inventory');\n    case 'patch-advisory':\n      return urijs(document.baseURI).segment('insights').segment('patch');\n    default:\n      throw new Error(`Unknown app: ${app}`);\n  }\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","export const calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nexport const calculateSystems = (remediation) =>\n  remediation?.issues?.reduce((acc, curr) => {\n    curr?.systems?.forEach((host) => {\n      const found = acc.find(({ id }) => host.id === id);\n      const issue = {\n        id: curr.id,\n        resolution: curr.resolution,\n        description: curr.description,\n      };\n      if (found) {\n        found.issues = [\n          ...found.issues,\n          { ...issue, resolved: found.resolved },\n        ];\n        found.rebootRequired = found.issues.some(\n          ({ resolution }) => resolution?.needs_reboot\n        );\n      } else {\n        acc.push({\n          ...host,\n          issues: [{ ...issue, resolved: host.resolved }],\n          rebootRequired: curr?.resolution?.needs_reboot,\n        });\n      }\n    });\n    return acc;\n  }, []) || [];\n\nexport const fetchInventoryData = async (\n  { page = 0, ...config } = {},\n  systems,\n  getEntities\n) => {\n  const currSystems = systems.filter(({ display_name }) =>\n    config.filters?.hostnameOrId\n      ? display_name.includes(config.filters.hostnameOrId)\n      : true\n  );\n\n  const data = await getEntities(\n    currSystems\n      .slice((page - 1) * config.per_page, page * config.per_page)\n      .map(({ id }) => id),\n    { ...config, hasItems: true },\n    true\n  );\n\n  return {\n    ...data,\n    page,\n    results: data.results.map((host) => ({\n      ...currSystems.find(({ id }) => id === host.id),\n      ...host,\n    })),\n    total: currSystems.length,\n  };\n};\n\nexport const mergedColumns = (defaultColumns = [], customColumns = []) => {\n  return customColumns.map((column) => {\n    const inventoryColumn = defaultColumns.find(\n      (invColumn) => invColumn.key === column.key\n    );\n\n    return inventoryColumn || column;\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Form,\n  Label,\n  Radio,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nimport { Reboot } from '@redhat-cloud-services/frontend-components/Reboot';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport './ChooseResolutionModal.scss';\n\nclass ResolutionStep extends Component {\n  constructor(props) {\n    super(props);\n    this.issue = props.issue;\n    this.state = {\n      selected: props.issue.resolution,\n      resolutions: false,\n    };\n  }\n\n  onRadioChange = (resolution) => {\n    this.setState({ selected: resolution });\n  };\n\n  async componentDidMount() {\n    const resolutions = await this.props.getResolutions(this.issue.id);\n    this.setState({ resolutions: resolutions.value });\n  }\n\n  getSelectedResolution = () => {\n    return this.state.selected;\n  };\n\n  render() {\n    const { resolutions, selected } = this.state;\n    let resolutionsDisplay;\n\n    if (resolutions) {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Form>\n              {resolutions.resolutions.map((resolution) => (\n                <div className=\"ins-c-resolution-option\" key={resolution.id}>\n                  <Radio\n                    label={\n                      <Stack className=\"ins-c-resolution-choice__details\">\n                        <StackItem>{resolution.description}</StackItem>\n                        {/*\n                                                    <StackItem>\n                                                        <Battery label=\"Resolution risk\" severity={ resolution.resolution_risk } />\n                                                    </StackItem>\n                                                    */}\n                        {resolution.needs_reboot && (\n                          <StackItem>\n                            <Reboot red />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    }\n                    aria-label={resolution.description}\n                    id={resolution.id}\n                    name=\"radio\"\n                    defaultChecked={resolution.id === selected.id}\n                    onChange={() => this.onRadioChange(resolution)}\n                  />\n                </div>\n              ))}\n            </Form>\n          </StackItem>\n        </React.Fragment>\n      );\n    } else {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Stack hasGutter>\n        <StackItem>\n          <div>Select resolution for this action.</div>\n        </StackItem>\n        <StackItem>\n          <Split hasGutter>\n            <SplitItem>\n              <Label>Action</Label>\n            </SplitItem>\n            <SplitItem isFilled>\n              <h1 className=\"ins-m-text__bold\">{this.issue.description}</h1>\n            </SplitItem>\n          </Split>\n        </StackItem>\n\n        {resolutionsDisplay}\n      </Stack>\n    );\n  }\n}\n\nResolutionStep.propTypes = {\n  issue: PropTypes.object.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionStep;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport ResolutionStep from './ResolutionModal/ResolutionStep';\n\nconst ResolutionEditButton = ({\n  remediation,\n  issue,\n  onResolutionSelected,\n  getResolutions,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const resolutionStep = useRef();\n\n  const onModalClose = (result) => {\n    setIsOpen(false);\n    const resolution = resolutionStep.current?.getSelectedResolution();\n\n    if (result && issue.resolution.id !== resolution.id) {\n      onResolutionSelected(remediation.id, issue.id, resolution.id);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setIsOpen(true)}>Edit</a>\n      {isOpen && (\n        <Modal\n          variant={ModalVariant.medium}\n          className=\"rem-c-resolution-modal\"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Edit resolution\"\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={onModalClose}>\n              Save\n            </Button>,\n            <Button\n              key=\"cancel\"\n              variant=\"secondary\"\n              onClick={() => setIsOpen(false)}\n            >\n              Cancel\n            </Button>,\n          ]}\n        >\n          <ResolutionStep\n            key=\"ResolutionStep\"\n            issue={issue}\n            ref={resolutionStep}\n            getResolutions={getResolutions}\n          />\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nResolutionEditButton.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  onResolutionSelected: PropTypes.func.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionEditButton;\n","import {\n  refreshRemediation,\n  patchRemediationIssue,\n  getResolutions,\n} from '../actions';\nimport { connect } from 'react-redux';\n\nimport ResolutionEditButton from '../components/ResolutionEditButton';\n\nexport const ConnectResolutionEditButton = connect(\n  (f) => f,\n  (dispatch) => ({\n    onResolutionSelected: async (remediation, issue, resolution) => {\n      await dispatch(patchRemediationIssue(remediation, issue, resolution));\n      dispatch(refreshRemediation(remediation));\n    },\n    getResolutions: (ruleId) => dispatch(getResolutions(ruleId)),\n  })\n)(ResolutionEditButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\n\nimport './DeleteButton.scss';\n\nclass DeleteButton extends Component {\n  state = {\n    dialogOpen: false,\n  };\n\n  onButtonClicked = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  onDialogClose = (result) => {\n    this.setState({ dialogOpen: false });\n    result && this.props.onDelete();\n  };\n\n  render() {\n    const { dialogOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button\n          onClick={this.onButtonClicked}\n          isDisabled={this.props.isDisabled}\n          variant={this.props.variant}\n        >\n          {this.props.label}\n        </Button>\n        {dialogOpen && (\n          <ConfirmationDialog\n            title={this.props.dialogTitle}\n            confirmText={this.props.dialogConfirmationText}\n            text={this.props.dialogMessage}\n            onClose={this.onDialogClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nDeleteButton.propTypes = {\n  label: PropTypes.string,\n  dialogTitle: PropTypes.string,\n  dialogMessage: PropTypes.string,\n  dialogConfirmationText: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  onDelete: PropTypes.func.isRequired,\n  variant: PropTypes.string,\n};\n\nDeleteButton.defaultProps = {\n  label: 'Delete',\n  variant: 'link',\n};\n\nexport default DeleteButton;\n","import { deleteRemediation, loadRemediationStatus } from '../actions';\nimport { connect } from 'react-redux';\nimport { loadRemediations, deleteRemediationIssue } from '../actions';\n\nimport DeleteButton from '../components/DeleteButton';\n\nexport const DeleteRemediationsButton = connect(\n  (state, { remediations }) => ({\n    dialogMessage: `You will not be able to recover ${\n      remediations.length > 1 ? 'these remediations' : 'this remediation'\n    }`,\n  }),\n  (dispatch, { remediations }) => ({\n    onDelete: async () => {\n      await Promise.all(\n        remediations.map((r) => dispatch(deleteRemediation(r)))\n      );\n      dispatch(loadRemediations());\n    },\n  })\n)(DeleteButton);\n\nexport const DeleteActionsButton = connect(\n  (state, { issues }) => ({\n    label: `Remove action${issues.length > 1 ? 's' : ''}`,\n    dialogTitle: `Remove action${issues.length > 1 ? 's' : ''}`,\n    dialogConfirmationText: `Remove action${issues.length > 1 ? 's' : ''}`,\n  }),\n  (dispatch, { remediation, issues, afterDelete, isBeta }) => ({\n    onDelete: async () => {\n      await Promise.all(\n        issues.map((issueId) =>\n          dispatch(deleteRemediationIssue(remediation.id, issueId))\n        )\n      );\n      if (isBeta) {\n        dispatch(loadRemediationStatus(remediation.id));\n      }\n\n      afterDelete();\n    },\n  })\n)(DeleteButton);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Button } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core/deprecated';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { getSystemName } from '../Utilities/model';\nimport { dispatchNotification } from '../Utilities/dispatcher';\n\nfunction RemediationDetailsSystemDropdown({\n  remediation,\n  issue,\n  system,\n  onDelete,\n}) {\n  const [open, setOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`This playbook will not address ${\n          issue.description\n        } on ${getSystemName(system)}`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n          dispatchNotification({\n            title: `Removed systems from ${remediation.name}`,\n            description: '',\n            variant: 'success',\n            dismissable: true,\n            autoDismiss: true,\n          });\n        }}\n      />\n\n      <Dropdown\n        onSelect={(f) => f}\n        toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n        isOpen={open}\n        position={DropdownPosition.right}\n        isPlain\n      >\n        <Button onClick={() => setDeleteDialogOpen(true)} variant=\"link\">\n          Remove system\n        </Button>\n      </Dropdown>\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsSystemDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  system: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst connected = connect(null, (dispatch) => ({\n  onDelete: (id, issue, system) =>\n    dispatch(deleteRemediationIssueSystem(id, issue, system)),\n}))(RemediationDetailsSystemDropdown);\n\nexport default connected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconInline.scss';\n\nexport const IconInline = ({ icon, text }) => {\n  return (\n    <div className=\"rem-c-icon-inline\">\n      {icon}\n      <span className=\"rem-c-icon-inline__text\">{text}</span>\n    </div>\n  );\n};\n\nIconInline.propTypes = {\n  icon: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\n\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n  ToolbarGroup,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\nimport reducers from '../../store/reducers';\nimport RemediationDetailsSystemDropdown from '../RemediationDetailsSystemDropdown';\nimport ConfirmationDialog from '../ConfirmationDialog';\nimport { getSystemName } from '../../Utilities/model';\nimport { IconInline } from '../Layouts/IconInline';\n\nexport const SystemsStatusModal = ({\n  isOpen,\n  onClose,\n  issue,\n  remediation,\n  onDelete,\n}) => {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [system, setSystem] = useState({});\n  const [systemStatuses, setSystemStatuses] = useState({});\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [filterText, setFilterText] = useState('');\n  const inventory = useRef(null);\n  const { current: urlBuilder } = useRef(inventoryUrlBuilder(issue));\n\n  useEffect(() => {\n    const statuses = {};\n    issue.systems.map((system) => {\n      statuses[system.id] =\n        system.resolved === true ? (\n          <IconInline icon={<CheckIcon />} text=\"Remediated\" />\n        ) : (\n          <IconInline icon={<TimesIcon />} text=\"Not remediated\" />\n        );\n    });\n    setSystemStatuses(statuses);\n  }, []);\n\n  // eslint-disable-next-line react/display-name\n  const detailDropdown = (remediation, issue) => (system) =>\n    (\n      <RemediationDetailsSystemDropdown\n        remediation={remediation}\n        issue={issue}\n        system={system}\n      />\n    );\n\n  const generateStatus = (id) => {\n    return systemStatuses[id];\n  };\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      setPage(options.page);\n      setPageSize(options.per_page);\n      //FIX_ME: onRefreshData is triggered multiple times with same options\n      inventory.current.onRefreshData({ timestamp: Date.now(), ...options });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Modal\n        className=\"remediations\"\n        variant={ModalVariant.large}\n        title={`System${issue.systems.length > 1 ? 's' : ''} for action ${\n          issue.description\n        }`}\n        isOpen={isOpen}\n        onClose={onClose}\n        isFooterLeftAligned\n      >\n        <div className=\"rem-c-toolbar__filter\">\n          <InventoryTable\n            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) =>\n              getRegistry().register({\n                ...mergeWithEntities(\n                  reducers.inventoryEntitiesReducer({\n                    INVENTORY_ACTION_TYPES,\n                    detailDropdown: detailDropdown(remediation, issue),\n                    urlBuilder,\n                    generateStatus,\n                  })()\n                ),\n              })\n            }\n            ref={inventory}\n            items={orderBy(\n              issue.systems.filter((s) =>\n                getSystemName(s).includes(filterText)\n              ),\n              [(s) => getSystemName(s), (s) => s.id]\n            )}\n            onRefresh={onRefresh}\n            page={page}\n            total={issue.systems.length}\n            perPage={pageSize}\n            hasCheckbox={false}\n            actions={[\n              {\n                title: ' Remove system',\n                onClick: (event, rowId, rowData) => {\n                  setSystem(rowData);\n                  setDeleteDialogOpen(true);\n                },\n              },\n            ]}\n          >\n            <TableToolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <ConditionalFilter\n                    items={[\n                      {\n                        value: 'display_name',\n                        label: 'Name',\n                        filterValues: {\n                          placeholder: 'Search by name',\n                          type: conditionalFilterType.text,\n                          value: filterText,\n                          onChange: (e, selected) => setFilterText(selected),\n                        },\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </TableToolbar>\n          </InventoryTable>\n        </div>\n      </Modal>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`Removing the system ${getSystemName(system)} from the action ${\n          issue.description\n        }\n                    will remove this system’s remediation from the playbook.`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nSystemsStatusModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  issue: PropTypes.object,\n  remediation: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { SystemsStatusModal } from './Modals/SystemsStatusModal';\nimport './SystemForActionButton.scss';\n\nexport const SystemForActionButton = ({ issue, remediation, title }) => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setOpen(true)}>{title}</a>\n      <SystemsStatusModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        issue={issue}\n        remediation={remediation}\n        onDelete={(id, issue, system) =>\n          dispatch(deleteRemediationIssueSystem(id, issue, system))\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nSystemForActionButton.propTypes = {\n  issue: PropTypes.object.isRequired,\n  remediation: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","const debug = localStorage.getItem('remediations:debug') === 'true';\n\nexport const pagination = debug\n  ? {\n      perPageOptions: [1, 2, 3, 4, 5, 10, 15, 20, 25, 50, 100, 200].map(\n        (i) => ({ title: `${i}`, value: i })\n      ),\n    }\n  : {};\n","import React from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { appUrl } from '../../Utilities/urls';\n\nexport const EmptyActions = (filtered) => {\n  return (\n    <Bullseye className=\"pf-u-pt-2xl\">\n      <EmptyState>\n        {filtered.filtered === true ? (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            No actions found\n          </Title>\n        ) : (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            This playbook is empty\n          </Title>\n        )}\n        <EmptyStateBody>\n          To add an action, select issues identified in\n          <br />\n          <a href={appUrl('advisor').toString()}>Recommendations</a>,&nbsp;\n          <a href={appUrl('compliance').toString()}>Compliance</a> or&nbsp;\n          <a href={appUrl('vulnerabilities').toString()}>Vulnerability</a>&nbsp;\n          and select\n          <br />\n          <strong>Remediate with Ansible.</strong>\n        </EmptyStateBody>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyActions.propTypes = {\n  filtered: PropTypes.bool.isRequired,\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport flatMap from 'lodash/flatMap';\nimport orderBy from 'lodash/orderBy';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport { sortable, TableVariant } from '@patternfly/react-table';\nimport {\n  TableHeader,\n  Table,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { dispatchNotification } from '../Utilities/dispatcher';\n\nimport { getIssueApplication, includesIgnoreCase } from '../Utilities/model';\nimport { buildIssueUrl } from '../Utilities/urls';\nimport './RemediationTable.scss';\n\nimport { ConnectResolutionEditButton } from '../containers/ConnectedComponents';\nimport { DeleteActionsButton } from '../containers/DeleteButtons';\nimport { SystemForActionButton } from './SystemForActionButton';\n\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport * as debug from '../Utilities/debug';\n\nimport './RemediationDetailsTable.scss';\nimport { PermissionContext } from '../App';\nimport { EmptyActions } from './EmptyStates/EmptyActions';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nfunction resolutionDescriptionCell(remediation, issue) {\n  const url = buildIssueUrl(issue.id);\n\n  if (issue.resolutions_available <= 1) {\n    return url ? (\n      <React.Fragment>\n        <span>\n          <a href={url}>{issue.description}</a>\n          <br />\n          {issue.resolution.description}\n        </span>\n      </React.Fragment>\n    ) : (\n      issue.resolution.description\n    );\n  }\n\n  return url ? (\n    <React.Fragment>\n      <span>\n        <a href={url}>{issue.description}</a>\n        <br />\n        {issue.resolution.description}\n        <br />\n        <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n      </span>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      {issue.resolution.description}\n      <br />\n      <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n    </React.Fragment>\n  );\n}\n\nfunction needsRebootCell(needsReboot) {\n  return <span>{needsReboot ? 'Required' : 'Not required'}</span>;\n}\n\nfunction systemsForAction(issue, remediation, title) {\n  return (\n    <SystemForActionButton\n      key={issue.id}\n      remediation={remediation}\n      issue={issue}\n      title={title}\n    />\n  );\n}\n\nfunction getResolvedSystems(issue) {\n  let count = 0;\n  issue.systems.map((system) => {\n    if (system.resolved) {\n      count++;\n    }\n  });\n  return count;\n}\n\nconst SORTING_ITERATEES = [\n  null, // checkboxes\n  (i) => i.description,\n  null, // resolution steps\n  (i) => i.resolution.needs_reboot,\n  (i) => i.systems.length,\n  (i) => getIssueApplication(i),\n];\n\nconst buildRow = (remediation) => (issue) => {\n  const row = [\n    {\n      isOpen: false,\n      id: issue.id,\n      cells: [\n        {\n          title: resolutionDescriptionCell(remediation, issue),\n        },\n        {\n          title: needsRebootCell(issue.resolution.needs_reboot),\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${issue.systems.length}`\n          ),\n        },\n        {\n          title: getIssueApplication(issue),\n          props: { className: 'rem-m-nowrap' },\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${getResolvedSystems(issue)}/${issue.systems.length} remediated`\n          ),\n        },\n      ],\n    },\n  ];\n\n  return row;\n};\n\nfunction RemediationDetailsTable(props) {\n  const pagination = usePagination();\n  const sorter = useSorter(1, 'asc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const permission = useContext(PermissionContext);\n  const [filterText, setFilterText] = useState('');\n  const [prevRemediationsCount, setPrevRemediationsCount] = useState(0); // eslint-disable-line\n  const chrome = useChrome();\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  sorter.onChange(pagination.reset);\n  filter.onChange(pagination.reset);\n\n  const filtered = props.remediation.issues.filter((i) =>\n    includesIgnoreCase(i.description, filter.value.trim())\n  );\n  const sorted = orderBy(\n    filtered,\n    [SORTING_ITERATEES[sorter.sortBy]],\n    [sorter.sortDir]\n  );\n  const paged = sorted.slice(\n    pagination.offset,\n    pagination.offset + pagination.pageSize\n  );\n\n  const rows = flatMap(paged, buildRow(props.remediation));\n\n  selector.register(rows);\n  const selectedIds = selector.getSelectedIds();\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Action', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  const bulkSelectCheck = (data) => {\n    return data?.filter((action) => action.selected === true);\n  };\n\n  return (\n    <div className=\"test\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: [\n            {\n              label: 'Search actions',\n              type: 'text',\n              filterValues: {\n                id: 'filter-by-string',\n                key: 'filter-by-string',\n                placeholder: 'Search',\n                value: filterText,\n                onChange: (_e, value) => {\n                  setFilterText(value);\n                },\n              },\n            },\n          ],\n        }}\n        bulkSelect={{\n          isDisabled: rows ? false : true,\n          items: [\n            {\n              title: 'Select none (0)',\n              onClick: () => {\n                selector.props.onSelect('none');\n              },\n            },\n            rows.length > 0\n              ? {\n                  title: `Select page (${rows?.length})`,\n                  onClick: () => {\n                    bulkSelectCheck(rows).length === 0\n                      ? selector.props.onSelect('page', true, 0)\n                      : rows.length === bulkSelectCheck(rows).length\n                      ? selector.props.onSelect('page', false, 0)\n                      : selector.props.onSelect('page', true, 0);\n                  },\n                }\n              : {},\n            rows.length > 0\n              ? {\n                  title: `Select all (${props?.remediation?.issues.length})`,\n                  onClick: () => {\n                    selector.register(props?.remediation.issues);\n                    selectedIds?.length < props?.remediation?.issues.length\n                      ? selector.props.onSelect('page', true, 0)\n                      : selector.props.onSelect('page', false, 0);\n                  },\n                }\n              : {},\n          ],\n          checked:\n            selectedIds.length && filtered.length > selectedIds.length\n              ? null\n              : selectedIds.length,\n          count: selectedIds.length,\n          onSelect: () => {\n            bulkSelectCheck(rows).length === 0\n              ? selector.props.onSelect('page', true, 0)\n              : selector.props.onSelect('page', false, 0);\n          },\n        }}\n        actionsConfig={{\n          actions: [\n            <DeleteActionsButton\n              key={props.remediation.id}\n              variant=\"secondary\"\n              isDisabled={!selectedIds.length}\n              remediation={props.remediation}\n              issues={selectedIds}\n              afterDelete={() => {\n                dispatchNotification({\n                  title: `Removed ${selectedIds.length} actions from ${props.remediation.name}`,\n                  description: '',\n                  variant: 'success',\n                  dismissable: true,\n                  autoDismiss: true,\n                });\n                selector.reset;\n              }}\n              isBeta={chrome?.isBeta?.()}\n            />,\n          ],\n        }}\n        pagination={{ ...pagination.props, itemCount: filtered.length }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {rows.length > 0 ? (\n        <Table\n          variant={TableVariant.compact}\n          aria-label=\"Actions\"\n          canSelectAll={false}\n          className=\"ins-c-remediation-details-table\"\n          cells={[\n            {\n              title: 'Actions',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable],\n            },\n            {\n              title: 'Systems',\n              transforms: [sortable],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable],\n            },\n          ]}\n          rows={rows}\n          {...sorter.props}\n          {...(permission.permissions.write && { ...selector.props })}\n        >\n          <TableHeader />\n          <TableBody {...selector.tbodyProps} />\n        </Table>\n      ) : filter.value ? (\n        <EmptyActions filtered={true} />\n      ) : (\n        <EmptyActions filtered={false} />\n      )}\n      {rows.length > 0 && (\n        <TableToolbar isFooter>\n          <Pagination\n            variant=\"bottom\"\n            dropDirection=\"up\"\n            itemCount={filtered.length}\n            {...pagination.props}\n            {...debug.pagination}\n          />\n        </TableToolbar>\n      )}\n    </div>\n  );\n}\n\nRemediationDetailsTable.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  status: PropTypes.object.isRequired,\n};\n\nexport default RemediationDetailsTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Icon,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { pluralize } from '../statusHelper';\n\nconst RemoveSystemModal = ({\n  isOpen,\n  selected,\n  onConfirm,\n  onClose,\n  remediationName,\n}) => (\n  <Modal\n    variant={ModalVariant.medium}\n    title={`Remove selected systems from ${remediationName}`}\n    isOpen={isOpen}\n    onClose={onClose}\n    appendTo={document.getElementsByClassName('remediations')[0]}\n    actions={[\n      <Button\n        key=\"remove-confirm\"\n        variant=\"danger\"\n        onClick={onConfirm}\n        ouiaId=\"confirm-delete\"\n      >\n        Remove\n      </Button>,\n      <Button key=\"remove-cancel\" variant=\"link\" onClick={onClose}>\n        Cancel\n      </Button>,\n    ]}\n  >\n    <Split hasGutter>\n      <SplitItem>\n        <Icon size=\"xl\" className=\"ins-m-alert\" status=\"warning\">\n          <ExclamationTriangleIcon />\n        </Icon>\n      </SplitItem>\n      <SplitItem isFilled>\n        <Stack hasGutter>\n          <StackItem>\n            This action will remove{' '}\n            {selected.length === 1 ? (\n              <span>\n                <b> {selected[0]?.display_name} </b> system\n              </span>\n            ) : (\n              <span>\n                <b> {selected.length} </b> systems\n              </span>\n            )}{' '}\n            from <b>{remediationName}</b> Remediation.\n          </StackItem>\n          <StackItem>\n            Removing {pluralize(selected.length, 'system')} from this\n            Remediation will remove it from all associated issues in{' '}\n            <b>{remediationName}</b> Remediation. Be careful as you can end up\n            with Remediation without any systems.\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  </Modal>\n);\n\nRemoveSystemModal.propTypes = {\n  selected: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      display_name: PropTypes.string,\n    })\n  ).isRequired,\n  remediationName: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default RemoveSystemModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\nconst RebootColumn = ({ rebootRequired }) => {\n  return (\n    <Fragment>\n      <span>{rebootRequired ? 'Required' : 'Not required'}</span>\n    </Fragment>\n  );\n};\n\nRebootColumn.propTypes = {\n  rebootRequired: PropTypes.bool,\n};\n\nexport default RebootColumn;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { cellWidth, sortable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table/deprecated';\nimport RebootColumn from './RebootColumn';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\nimport { buildIssueUrl } from '../../Utilities/urls';\nimport sortBy from 'lodash/sortBy';\n\nconst issueType = {\n  advisor: 'Advisor recommendation',\n  vulnerabilities: 'Vulnerability',\n  'patch-advisory': 'Patch advisory',\n};\n\nconst sortByIndex = (issue) => [\n  issue.description,\n  issue.resolution.needs_reboot,\n  issueType?.[issue.id.split(':')[0]],\n  issue.resolved,\n];\n\nconst IssuesColumn = ({ issues, display_name }) => {\n  const [sortByConfig, setSortByConfig] = useState({\n    index: 0,\n    direction: 'asc',\n  });\n  const [isOpen, setIsOpen] = useState();\n  const sortedIssues = sortBy(\n    issues,\n    (sortIssue) => sortByIndex(sortIssue)[sortByConfig.index]\n  );\n  return (\n    <Fragment>\n      <Button variant=\"link\" isInline onClick={() => setIsOpen(true)}>\n        {issues.length}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        title={`Actions for system ${display_name}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Table\n          variant=\"compact\"\n          aria-label={`Issues table for ${display_name}`}\n          rows={(sortByConfig.direction === 'asc'\n            ? sortedIssues\n            : sortedIssues.reverse()\n          ).map((issue) => [\n            {\n              title: (\n                <Fragment>\n                  <div>\n                    <a href={buildIssueUrl(issue.id)}>{issue.description}</a>\n                  </div>\n                  <div>{issue.resolution.description}</div>\n                </Fragment>\n              ),\n            },\n            {\n              title: (\n                <Fragment>\n                  <RebootColumn\n                    rebootRequired={issue.resolution.needs_reboot}\n                  />\n                </Fragment>\n              ),\n            },\n            issueType?.[issue.id.split(':')[0]] || 'Unknown',\n            {\n              title: (\n                <Fragment>\n                  {issue.resolved ? <CheckIcon /> : <TimesIcon />}{' '}\n                  {issue.resolved ? 'Remediated' : 'Not remediated'}\n                </Fragment>\n              ),\n            },\n          ])}\n          cells={[\n            {\n              title: 'Action',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable, cellWidth(20)],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable, cellWidth(15)],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable, cellWidth(20)],\n            },\n          ]}\n          sortBy={sortByConfig}\n          onSort={(_e, index, direction) =>\n            setSortByConfig({ index, direction })\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      </Modal>\n    </Fragment>\n  );\n};\n\nIssuesColumn.propTypes = {\n  issues: PropTypes.arrayOf(PropTypes.shape()),\n  display_name: PropTypes.string,\n};\n\nexport default IssuesColumn;\n","import React from 'react';\nimport IssuesColumn from './IssuesColumn';\nimport RebootColumn from './RebootColumn';\n\nexport default [\n  {\n    key: 'display_name',\n  },\n  {\n    key: 'tags',\n  },\n  {\n    key: 'system_profile',\n  },\n  {\n    key: 'issues',\n    title: 'Issues',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (issues, _, { display_name }) => (\n      <IssuesColumn issues={issues} display_name={display_name} />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n  {\n    key: 'rebootRequired',\n    title: 'Reboot required',\n    // eslint-disable-next-line react/display-name\n    renderFunc: (rebootRequired) => (\n      <RebootColumn rebootRequired={rebootRequired} />\n    ),\n    props: {\n      width: 15,\n      isStatic: true,\n    },\n  },\n];\n","import React, { useEffect, useRef, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { remediationSystems } from '../../store/reducers';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { deleteSystems, selectEntity, loadRemediation } from '../../actions';\nimport './SystemsTable.scss';\nimport RemoveSystemModal from './RemoveSystemModal';\nimport { dispatchNotification } from '../../Utilities/dispatcher';\nimport {\n  calculateSystems,\n  fetchInventoryData,\n  mergedColumns,\n  calculateChecked,\n} from './helpers';\nimport systemsColumns from './Columns';\n\nconst SystemsTableWrapper = ({ remediation, registry, refreshRemediation }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const systemsRef = useRef();\n  const getEntitiesRef = useRef(() => undefined);\n  const activeSystem = useRef(undefined);\n  const dispatch = useDispatch();\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n\n  const onConfirm = () => {\n    (async () => {\n      const selectedSystems =\n        selected.size > 0\n          ? Array.from(selected, ([, value]) => value)\n          : [\n              {\n                ...activeSystem.current,\n              },\n            ];\n      const action = deleteSystems(selectedSystems, remediation);\n      dispatch(action);\n      await action.payload;\n      refreshRemediation();\n    })();\n    activeSystem.current = undefined;\n    dispatchNotification({\n      title: `Removed ${selected.size} ${\n        selected.size > 1 ? 'systems' : 'system'\n      } from playbook`,\n      description: '',\n      variant: 'success',\n      dismissable: true,\n      autoDismiss: true,\n    });\n    setIsOpen(false);\n  };\n\n  const bulkSelectCheck = (data) => {\n    return data?.filter((system) => system.selected === true);\n  };\n  const bulkSelectorSwitch = (selection) => {\n    switch (selection) {\n      case 'none':\n        systemsRef.current.map((system) =>\n          dispatch(selectEntity(system.id, false))\n        );\n        break;\n      case 'page':\n        dispatch(selectEntity(0, true));\n        break;\n      case 'deselect page':\n        rows.map(() => dispatch(selectEntity(0, false)));\n        break;\n      case 'all':\n        systemsRef.current.map((system) =>\n          dispatch(selectEntity(system.id, true))\n        );\n        break;\n      case 'deselect all':\n        systemsRef.current.map((system) =>\n          dispatch(selectEntity(system.id, false))\n        );\n        break;\n    }\n  };\n  useEffect(() => {\n    systemsRef.current = calculateSystems(remediation);\n  }, [remediation.id]);\n\n  return (\n    <InventoryTable\n      variant=\"compact\"\n      showTags\n      noDetail\n      hideFilters={{\n        all: true,\n        name: false,\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n      columns={(defaultColumns) =>\n        mergedColumns(defaultColumns, systemsColumns)\n      }\n      bulkSelect={{\n        isDisabled: rows ? false : true,\n        count: selected ? selected.size : 0,\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: () => bulkSelectorSwitch('none'),\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select page (${rows.length})`,\n                  onClick: () => {\n                    !selected //if nothing is selected - select the page\n                      ? bulkSelectorSwitch('page')\n                      : bulkSelectCheck(rows).length === rows.length //it compares the selected rows to the total selected values so you can deselect the page\n                      ? bulkSelectorSwitch('deselect page')\n                      : systemsRef.current.length > selected.size //it compares the total amount of rows to the selected values, so you can select additional page\n                      ? bulkSelectorSwitch('page')\n                      : bulkSelectorSwitch('deselect page');\n                  },\n                }\n              : {}),\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select all (${systemsRef.current.length})`,\n                  onClick: () => {\n                    calculateChecked(systemsRef.current, selected)\n                      ? bulkSelectorSwitch('deselect all')\n                      : bulkSelectorSwitch('all');\n                  },\n                }\n              : {}),\n          },\n        ],\n        checked: calculateChecked(systemsRef.current, selected),\n        onSelect: () => {\n          bulkSelectCheck(rows).length === rows.length\n            ? bulkSelectorSwitch('deselect page')\n            : bulkSelectorSwitch('page');\n        },\n      }}\n      getEntities={async (_i, config) =>\n        fetchInventoryData(config, systemsRef.current, getEntitiesRef.current)\n      }\n      onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities, api }) => {\n        getEntitiesRef.current = api?.getEntities;\n        registry?.register?.({\n          ...mergeWithEntities(remediationSystems(INVENTORY_ACTION_TYPES)),\n        });\n      }}\n      actions={[\n        {\n          title: 'Remove system',\n          onClick: (_event, _index, { id, display_name }) => {\n            activeSystem.current = {\n              id,\n              display_name,\n              issues: remediation.issues.filter((issue) =>\n                issue.systems.find(({ id: systemId }) => systemId === id)\n              ),\n            };\n            setIsOpen(true);\n          },\n        },\n      ]}\n    >\n      {loaded && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsOpen(true)}\n          isDisabled={selected.size === 0}\n        >\n          Remove system\n        </Button>\n      )}\n      <RemoveSystemModal\n        isOpen={isOpen}\n        onConfirm={onConfirm}\n        selected={\n          selected.size > 0\n            ? Array.from(selected, ([, value]) => value)\n            : [activeSystem.current]\n        }\n        onClose={() => {\n          activeSystem.current = undefined;\n          setIsOpen(false);\n        }}\n        remediationName={remediation.name}\n      />\n    </InventoryTable>\n  );\n};\n\nconst SystemsTable = (props) => {\n  const dispatch = useDispatch();\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return registry ? (\n    <Provider store={registry.store}>\n      <SystemsTableWrapper\n        registry={registry}\n        refreshRemediation={() =>\n          dispatch(loadRemediation(props.remediation.id))\n        }\n        {...props}\n      />\n    </Provider>\n  ) : (\n    <Fragment />\n  );\n};\n\nSystemsTable.propTypes = {\n  remediation: PropTypes.shape({\n    id: PropTypes.string,\n    issues: PropTypes.arrayOf(\n      PropTypes.shape({\n        systems: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.string,\n            display_name: PropTypes.string,\n            resolved: PropTypes.bool,\n          })\n        ),\n      })\n    ),\n  }),\n};\n\nSystemsTableWrapper.propTypes = {\n  ...SystemsTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  refreshRemediation: PropTypes.func,\n};\n\nexport default SystemsTable;\n","import React, { useState, useEffect, useContext } from 'react';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport PropTypes from 'prop-types';\n\nimport { expandable } from '@patternfly/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport { StatusSummary, normalizeStatus } from './statusHelper';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationActivityTable.scss';\n\nconst RemediationActivityTable = ({ remediation, playbookRuns }) => {\n  const [rows, setRows] = useState([]);\n  const permission = useContext(PermissionContext);\n\n  const generateRows = (playbookRuns) => {\n    return playbookRuns.reduce(\n      (acc, playbooks, i) => [\n        ...acc,\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: (\n                <Link to={`/${remediation.id}/${playbooks.id}`}>\n                  <DateFormat type=\"exact\" date={playbooks.created_at} />\n                </Link>\n              ),\n              cellFormatters: [expandable],\n            },\n            playbooks.created_by.last_name // for reasons unknown, last_name is not available sometimes\n              ? `${playbooks.created_by.first_name} ${playbooks.created_by.last_name}`\n              : `${playbooks.created_by.username}`,\n            {\n              title: (\n                <StatusSummary\n                  executorStatus={normalizeStatus(playbooks.status)}\n                  counts={playbooks.executors.reduce(\n                    (acc, ex) => ({\n                      pending: acc.pending + ex.counts.pending,\n                      running: acc.running + ex.counts.running,\n                      success: acc.success + ex.counts.success,\n                      failure: acc.failure + ex.counts.failure,\n                      canceled: acc.canceled + ex.counts.canceled,\n                      acked: acc.acked + ex.counts.acked,\n                    }),\n                    {\n                      pending: 0,\n                      running: 0,\n                      success: 0,\n                      failure: 0,\n                      canceled: 0,\n                      acked: 0,\n                    }\n                  )}\n                  hasCancel\n                  remediationName={remediation.name}\n                  remediationId={remediation.id}\n                  playbookId={playbooks.id}\n                  permission={permission}\n                />\n              ),\n            },\n          ],\n        },\n        {\n          parent: 2 * i,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <Table\n                  aria-label=\"Compact expandable table\"\n                  cells={['Connection', 'Systems', 'Playbook run status']}\n                  rows={playbooks.executors.map((e) => ({\n                    cells: [\n                      {\n                        title: (\n                          <Link\n                            to={`/${remediation.id}/${playbooks.id}/${e.executor_id}`}\n                          >\n                            {e.executor_name}\n                          </Link>\n                        ),\n                      },\n                      e.system_count,\n                      {\n                        title: (\n                          <StatusSummary\n                            executorStatus={normalizeStatus(e.status)}\n                            counts={e.counts}\n                            permission={permission}\n                          />\n                        ),\n                      },\n                    ],\n                  }))}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              ),\n            },\n          ],\n        },\n      ],\n      []\n    );\n  };\n\n  useEffect(() => {\n    if (playbookRuns && playbookRuns.length) {\n      setRows(() => generateRows(playbookRuns));\n    }\n  }, [playbookRuns]);\n\n  const handleOnCollapse = (event, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const columns = ['Run on', 'Run by', 'Status'];\n\n  return (\n    <Table\n      className=\"rem-c-activity-table\"\n      aria-label=\"Collapsible table\"\n      onCollapse={handleOnCollapse}\n      rows={rows}\n      cells={columns}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nRemediationActivityTable.propTypes = {\n  remediation: PropTypes.object,\n  playbookRuns: PropTypes.array,\n};\n\nexport default RemediationActivityTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  FormGroup,\n  Modal,\n  TextInput,\n  ModalVariant,\n  HelperText,\n  HelperTextItem,\n  FormHelperText,\n} from '@patternfly/react-core';\n\nexport default function TextInputDialog(props) {\n  const [value, setValue] = useState(props.value || '');\n  const [valid, setValid] = useState(true);\n  const { title, onCancel, onSubmit, ariaLabel, className } = props;\n\n  function onChange(value) {\n    setValue(value);\n\n    if (props.pattern) {\n      setValid(props.pattern.test(value));\n    }\n  }\n\n  return (\n    <Modal\n      title={title}\n      isOpen={true}\n      onClose={(event) => onCancel(event)}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onSubmit(value)}\n          isDisabled={!valid}\n          ouiaId=\"save\"\n        >\n          Save\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"secondary\"\n          onClick={onCancel}\n          ouiaId=\"cancel\"\n        >\n          Cancel\n        </Button>,\n      ]}\n      variant={ModalVariant.small}\n      className={className}\n    >\n      <FormGroup\n        fieldId=\"remediation-name\"\n        helperTextInvalid=\"Playbook name has to contain alphanumeric characters\"\n        isValid={valid}\n      >\n        <TextInput\n          value={value}\n          type=\"text\"\n          onChange={(_event, value) => onChange(value)}\n          aria-label={ariaLabel || 'input text'}\n          autoFocus\n          isValid={valid}\n        />\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              Include your middle name if you have one.\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </Modal>\n  );\n}\n\nTextInputDialog.propTypes = {\n  title: PropTypes.string.isRequired,\n  onCancel: PropTypes.func,\n  onSubmit: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n  pattern: PropTypes.instanceOf(RegExp),\n};\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nimport { Button } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core/deprecated';\nimport TextInputDialog from './Dialogs/TextInputDialog';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediation, patchRemediation } from '../actions';\nimport { dispatchNotification } from '../Utilities/dispatcher';\n\nimport { PermissionContext } from '../App';\n\nconst playbookNamePattern = /^$|^.*[\\w\\d]+.*$/;\nconst EMPTY_NAME = 'Unnamed Playbook';\n\nfunction RemediationDetailsDropdown({ remediation, onRename, onDelete }) {\n  const [open, setOpen] = useState(false);\n  const [renameDialogOpen, setRenameDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const permission = useContext(PermissionContext);\n  const navigate = useNavigate();\n\n  return (\n    <React.Fragment>\n      {renameDialogOpen && (\n        <TextInputDialog\n          title=\"Edit playbook name\"\n          ariaLabel=\"Playbook name\"\n          value={remediation.name}\n          onCancel={() => setRenameDialogOpen(false)}\n          onSubmit={(name) => {\n            setRenameDialogOpen(false);\n            onRename(remediation.id, name);\n            dispatchNotification({\n              title: `Updated playbook name to ${name}`,\n              description: '',\n              variant: 'success',\n              dismissable: true,\n              autoDismiss: true,\n            });\n          }}\n          pattern={playbookNamePattern}\n        />\n      )}\n\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        title=\"Remove playbook?\"\n        text=\"You will not be able to recover this Playbook\"\n        confirmText=\"Remove playbook\"\n        onClose={(confirm) => {\n          setDeleteDialogOpen(false);\n          if (confirm) {\n            onDelete(remediation.id);\n            dispatchNotification({\n              title: `Deleted playbook ${remediation.name}`,\n              variant: 'success',\n              dismissable: true,\n              autoDismiss: true,\n            });\n            navigate('/');\n          }\n        }}\n      />\n\n      {permission.permissions.write && (\n        <Dropdown\n          onSelect={(f) => f}\n          toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n          isOpen={open}\n          position={DropdownPosition.right}\n          isPlain\n        >\n          <Button onClick={() => setRenameDialogOpen(true)} variant=\"link\">\n            Rename\n          </Button>\n          <Button\n            className=\"rem-c-button__danger-link\"\n            onClick={() => setDeleteDialogOpen(true)}\n            variant=\"link\"\n            isDanger\n          >\n            Delete\n          </Button>\n        </Dropdown>\n      )}\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  onRename: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst connected = connect(null, (dispatch) => ({\n  onRename: (id, name) => {\n    if (!name) {\n      name = EMPTY_NAME;\n    }\n    dispatch(patchRemediation(id, { name }));\n  },\n  onDelete: (id) => dispatch(deleteRemediation(id)),\n}))(RemediationDetailsDropdown);\n\nexport default connected;\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport './ExecuteButton.scss';\nimport './Status.scss';\n\nconst ExecuteButton = ({\n  isLoading,\n  isDisabled,\n  disabledStateText,\n  data,\n  getConnectionStatus,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  remediationStatus,\n  setEtag,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n\n  const isEnabled = () =>\n    true || localStorage.getItem('remediations:fifi:debug') === 'true';\n\n  useEffect(() => {\n    if (remediationStatus === 'changed') {\n      getConnectionStatus(remediationId);\n      setShowRefreshMessage(true);\n    } else if (remediationStatus === 'fulfilled') {\n      setOpen(false);\n    }\n  }, [remediationStatus]);\n\n  const buttonWithTooltip = () => {\n    return isDisabled ? (\n      <Tooltip content={disabledStateText} position=\"auto\">\n        <Button isAriaDisabled>Execute playbook</Button>\n      </Tooltip>\n    ) : (\n      <Button\n        data-testid=\"execute-button-enabled\"\n        onClick={() => {\n          setOpen(true);\n          getConnectionStatus(remediationId);\n        }}\n      >\n        Execute playbook\n      </Button>\n    );\n  };\n\n  return isEnabled() ? (\n    <React.Fragment>\n      {buttonWithTooltip()}\n      {open && (\n        <ExecuteModal\n          isOpen={open}\n          onClose={() => {\n            setShowRefreshMessage(false);\n            setOpen(false);\n          }}\n          showRefresh={showRefreshMessage}\n          remediationId={remediationId}\n          remediationName={remediationName}\n          data={data}\n          etag={etag}\n          isLoading={isLoading}\n          issueCount={issueCount}\n          runRemediation={runRemediation}\n          setEtag={setEtag}\n        />\n      )}\n    </React.Fragment>\n  ) : null;\n};\n\nExecuteButton.propTypes = {\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  getConnectionStatus: PropTypes.func,\n  runRemediation: PropTypes.func,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  remediationStatus: PropTypes.string,\n  issueCount: PropTypes.number,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  disabledStateText: PropTypes.string,\n};\n\nExecuteButton.defaultProps = {\n  data: [],\n  isDisabled: false,\n};\n\nexport default ExecuteButton;\n","import { connect } from 'react-redux';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  getEndpoint,\n  checkExecutable,\n} from '../actions';\nimport ExecuteButton from '../components/ExecuteButton';\n\nexport const ExecutePlaybookButton = connect(\n  ({\n    connectionStatus: { data, status, etag },\n    selectedRemediation,\n    runRemediation,\n    sources,\n    executable,\n  }) => ({\n    data,\n    isLoading: status !== 'fulfilled',\n    issueCount: selectedRemediation.remediation.issues.length,\n    etag,\n    remediationStatus: runRemediation.status,\n    sources,\n    executable,\n  }),\n  (dispatch) => ({\n    getConnectionStatus: (id) => {\n      dispatch(getConnectionStatus(id));\n    },\n    runRemediation: (id, etag, exclude) => {\n      dispatch(runRemediation(id, etag, exclude)).then(() =>\n        dispatch(getPlaybookRuns(id))\n      );\n    },\n    setEtag: (etag) => {\n      dispatch(setEtag(etag));\n    },\n    getEndpoint: (id) => {\n      dispatch(getEndpoint(id));\n    },\n    checkExecutable: (id) => {\n      dispatch(checkExecutable(id));\n    },\n  })\n)(ExecuteButton);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst UpsellBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Put Insights into action\"\n      actionClose={\n        <AlertActionCloseButton\n          onClose={onClose}\n          data-testid=\"upselBanner-close\"\n        />\n      }\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Enable push-button remediation across your hybrid cloud environment\n          with Red Hat Satellite.\n        </StackItem>\n        <StackItem>\n          <a href=\"https://www.redhat.com/en/technologies/management/satellite\">\n            Learn more\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default UpsellBanner;\n\nUpsellBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nUpsellBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React from 'react';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Bullseye,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { CloudIcon } from '@patternfly/react-icons';\n\n// TODO: Fill Learn more link\n\nconst ActivityTabUpsell = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateHeader\n        titleText=\"Get more with Find it Fix it capabilities\"\n        icon={<EmptyStateIcon icon={CloudIcon} />}\n        headingLevel=\"h5\"\n      />\n      <EmptyStateBody>\n        Upgrade to Red Hat Satellite to remediate all your systems, across\n        regions and geographies directly from Red Hat Insights.\n      </EmptyStateBody>\n      <EmptyStateFooter>\n        <Button\n          variant=\"link\"\n          component=\"a\"\n          ouiaId=\"learn_more\"\n          href=\"https://www.redhat.com/en/technologies/management/satellite\"\n        >\n          Learn more\n        </Button>\n      </EmptyStateFooter>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivityTabUpsell;\n","import React, { Fragment } from 'react';\nimport { Toolbar, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport {\n  Button,\n  InputGroup,\n  TextInput,\n  InputGroupItem,\n} from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core/deprecated';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nconst SkeletonTableToolbar = () => {\n  const items = (\n    <Fragment>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <DropdownToggle\n              isDisabled\n              splitButtonItems={[\n                <DropdownToggleCheckbox\n                  id=\"skeleton-dropdown\"\n                  key=\"skeleton-dropdown\"\n                  aria-label=\"Loading Select all\"\n                />,\n              ]}\n              id=\"skeleton-dropdown-toggle\"\n            />\n          }\n        />\n      </ToolbarItem>\n      <ToolbarItem>\n        <InputGroup>\n          <InputGroupItem isFill>\n            <TextInput\n              value=\"Search\"\n              isDisabled\n              name=\"skeleton-search\"\n              id=\"skeleton-search\"\n              type=\"search\"\n              aria-label=\"search loading\"\n            />\n          </InputGroupItem>\n          <InputGroupItem>\n            <Button\n              isDisabled\n              variant=\"control\"\n              aria-label=\"search button for search input\"\n            >\n              <SearchIcon />\n            </Button>\n          </InputGroupItem>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button isDisabled variant=\"primary\">\n          Remove action\n        </Button>\n      </ToolbarItem>\n    </Fragment>\n  );\n\n  return (\n    <Toolbar id=\"skeleton-toolbar\">\n      <ToolbarContent> {items} </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default SkeletonTableToolbar;\n","import React from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst SkeletonTabs = () => {\n  return (\n    <Tabs activeKey={0} className=\"ins-s-tabs\">\n      <Tab eventKey={0} title={<TabTitleText>Actions</TabTitleText>} />\n      <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>} />\n      <Tab eventKey={2} title={<TabTitleText>Activity</TabTitleText>} />\n    </Tabs>\n  );\n};\n\nexport default SkeletonTabs;\n","import React from 'react';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport SkeletonTable from './SkeletonTable';\nimport SkeletonTableToolbar from './SkeletonTableToolbar';\nimport SkeletonTabs from './SkeletonTabs';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { Dropdown, KebabToggle } from '@patternfly/react-core/deprecated';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst RemediationDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"rem-c-page-details__header\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to=\"/\"> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Level className=\"rem-l-level\">\n          <LevelItem>\n            <PageHeaderTitle\n              className=\"rem-s-page-header\"\n              title={\n                <React.Fragment>\n                  <Skeleton size=\"md\" />\n                </React.Fragment>\n              }\n            />\n          </LevelItem>\n          <LevelItem>\n            <Split hasGutter>\n              <SplitItem>\n                <Button isDisabled variant=\"link\">\n                  Download playbook\n                </Button>\n              </SplitItem>\n              <SplitItem>\n                <Dropdown\n                  toggle={<KebabToggle isDisabled={true} />}\n                  isOpen={false}\n                  isPlain\n                />\n              </SplitItem>\n            </Split>\n          </LevelItem>\n        </Level>\n        <RemediationSummarySkeleton />\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <StackItem className=\"ins-c-playbookSummary__tabs\">\n            <SkeletonTabs />\n            <SkeletonTableToolbar />\n            <SkeletonTable />\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default RemediationDetailsSkeleton;\n\nconst RemediationSummarySkeleton = () => {\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{ x: 'Resolved', y: 1 }}\n          labels={({ datum }) => (datum.x ? `${datum.x}: ${datum.y}%` : null)}\n          title={'Loading'}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Latest activity\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacer-lg' }}>\n                <DescriptionList title=\"Autoreboot\">\n                  <Skeleton size=\"md\" />\n                </DescriptionList>\n              </FlexItem>\n            </Flex>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n","import React from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n} from '@patternfly/react-table/deprecated';\n\nimport './EmptyActivityTable.scss';\n\nconst EmptyActivityTable = () => (\n  <Table\n    aria-label=\"No activity\"\n    cells={['Run on', 'Run by', 'Status']}\n    ouiaId=\"activity-table\"\n    rows={[\n      {\n        cells: [\n          {\n            title: (\n              <EmptyState className=\"rem-c-activity-table__empty\">\n                <EmptyStateHeader titleText=\"No activity\" headingLevel=\"h5\" />\n                <EmptyStateBody>\n                  Execute this playbook to see a history and summary of the\n                  activity.\n                </EmptyStateBody>\n              </EmptyState>\n            ),\n            props: { colSpan: 3 },\n          },\n        ],\n      },\n    ]}\n  >\n    <TableHeader />\n    <TableBody />\n  </Table>\n);\n\nexport default EmptyActivityTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\nimport {\n  CheckCircleIcon,\n  OffIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport DescriptionList from '../components/Layouts/DescriptionList';\nimport classnames from 'classnames';\nimport { StatusSummary } from '../components/statusHelper';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport './RemediationSummary.scss';\n\nexport const RemediationSummary = ({\n  remediation,\n  playbookRuns,\n  switchAutoReboot,\n  context,\n}) => {\n  const handleRebootChange = (autoReboot) => {\n    switchAutoReboot(remediation.id, autoReboot);\n  };\n\n  const generateNumIssuesReboot = () => {\n    let count = 0;\n    for (const issue of remediation.issues) {\n      if (issue.resolution.needs_reboot) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  const generateNumRebootString = (num) => {\n    return `${num} issue${num === 1 ? '' : 's'} require${\n      num === 1 ? 's' : ''\n    } reboot to remediate`;\n  };\n\n  const pluralize = (number, str) =>\n    number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\n  const rebootEnabled = () => {\n    return (\n      <div>\n        <CheckCircleIcon className=\"rem-c-success\" />\n        <b className=\"ins-c-remediation-summary__reboot--enabled\"> Enabled </b>\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn off\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const rebootDisabled = (required) => {\n    return (\n      <div>\n        <OffIcon />\n        <b\n          className={`ins-c-remediation-summary__reboot--disabled${\n            required ? '--warning' : ''\n          }`}\n        >\n          Off\n        </b>\n        {required && (\n          <React.Fragment>\n            <ExclamationTriangleIcon className=\"ins-c-remediation-summary__reboot--required--icon\" />\n            <b className=\"ins-c-remediation-summary__reboot--required\">\n              {generateNumRebootString(generateNumIssuesReboot())}\n            </b>\n          </React.Fragment>\n        )}\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn on\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const generateAutoRebootStatus = (status, needsReboot) => {\n    return status ? rebootEnabled() : rebootDisabled(needsReboot);\n  };\n\n  const renderAutoReboot = (remediation) => {\n    return (\n      <DescriptionList\n        className=\"rem-c-playbookSummary__settings\"\n        title=\"Autoreboot\"\n      >\n        <Flex>\n          <FlexItem\n            className={classnames(\n              'ins-c-reboot-status',\n              {\n                'ins-c-reboot-status__enabled':\n                  remediation.auto_reboot && remediation.needs_reboot,\n              },\n              { 'ins-c-reboot-status__disabled': !remediation.auto_reboot }\n            )}\n            spacer={{ default: 'spacer-xl' }}\n          >\n            {generateAutoRebootStatus(\n              remediation.auto_reboot,\n              remediation.needs_reboot\n            )}\n          </FlexItem>\n        </Flex>\n      </DescriptionList>\n    );\n  };\n\n  const renderLatestActivity = (playbookRuns) => {\n    if (playbookRuns.length) {\n      const mostRecent = playbookRuns[0];\n      return (\n        <FlexItem spacer={{ default: 'spacer-xl' }}>\n          <DescriptionList\n            needsPointer\n            className=\"rem-c-description-list-latest-activity\"\n            title=\"Latest activity\"\n          >\n            <StatusSummary\n              executorStatus={mostRecent.status}\n              counts={mostRecent.executors.reduce(\n                (acc, ex) => ({\n                  pending: acc.pending + ex.counts.pending,\n                  running: acc.running + ex.counts.running,\n                  success: acc.success + ex.counts.success,\n                  failure: acc.failure + ex.counts.failure,\n                  canceled: acc.canceled + ex.counts.canceled,\n                  acked: acc.acked + ex.counts.acked,\n                }),\n                {\n                  pending: 0,\n                  running: 0,\n                  success: 0,\n                  failure: 0,\n                  canceled: 0,\n                  acked: 0,\n                }\n              )}\n              permission={{}}\n            />\n            <span className=\"rem-c-description-list-latest-activity__date\">\n              <DateFormat type=\"relative\" date={mostRecent.updated_at} />\n            </span>\n            <Link to={`/${mostRecent.remediation_id}/${mostRecent.id}`}>\n              View\n            </Link>\n          </DescriptionList>\n        </FlexItem>\n      );\n    }\n  };\n\n  const getResolvedCount = (issues) => {\n    let count = 0;\n    issues.map((i) => i.systems.every((s) => s.resolved) && count++);\n    return count;\n  };\n\n  const { stats } = remediation;\n\n  const totalSystems = stats.systemsWithReboot + stats.systemsWithoutReboot;\n\n  const resolvedCount = getResolvedCount(remediation.issues);\n\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{\n            x: 'Resolved',\n            y: (resolvedCount / remediation.issues.length) * 100,\n          }}\n          labels={({ data }) => (data.x ? `${data.x}: ${data.y}%` : null)}\n          title={`${resolvedCount}/${remediation.issues.length}`}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      {pluralize(totalSystems, 'system')}\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  {playbookRuns && renderLatestActivity(playbookRuns)}\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>{renderAutoReboot(remediation)}</StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRemediationSummary.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  playbookRuns: PropTypes.array,\n  switchAutoReboot: PropTypes.func.isRequired,\n  context: PropTypes.object.isRequired,\n};\n","import { useAxiosWithPlatformInterceptors } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nconst { API_BASE } = require('../config');\nimport { useState, useEffect, useRef } from 'react';\n\nexport const useConnectionStatus = (remediation) => {\n  const axios = useAxiosWithPlatformInterceptors();\n  const [isConnected, setisConnected] = useState();\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    mounted.current = true;\n    const fetchData = async () => {\n      try {\n        const connection_status =\n          remediation &&\n          (await axios.get(\n            `${API_BASE}/remediations/${remediation.id}/connection_status`\n          ));\n        mounted.current &&\n          setisConnected(\n            connection_status.data?.[0].connection_status === 'connected'\n          );\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted.current = false;\n    };\n  }, [remediation]);\n\n  return isConnected;\n};\n","import React, { useEffect, useState, useContext, useMemo } from 'react';\nimport Link from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { useSearchParams, useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\nimport RemediationDetailsTable from '../components/RemediationDetailsTable';\nimport SystemsTable from '../components/SystemsTable/SystemsTable';\nimport RemediationActivityTable from '../components/RemediationActivityTable';\nimport RemediationDetailsDropdown from '../components/RemediationDetailsDropdown';\nimport { normalizeStatus } from '../components/statusHelper';\nimport { ExecutePlaybookButton } from '../containers/ExecuteButtons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport UpsellBanner from '../components/Alerts/UpsellBanner';\nimport ActivityTabUpsell from '../components/EmptyStates/ActivityTabUpsell';\nimport DeniedState from '../components/DeniedState';\nimport SkeletonTable from '../skeletons/SkeletonTable';\nimport '../components/Status.scss';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Split,\n  SplitItem,\n  Tabs,\n  Tab,\n} from '@patternfly/react-core';\n\nimport RemediationDetailsSkeleton from '../skeletons/RemediationDetailsSkeleton';\nimport EmptyActivityTable from '../components/EmptyStates/EmptyActivityTable';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationDetails.scss';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport { RemediationSummary } from '../components/RemediationSummary';\nimport { dispatchNotification } from '../Utilities/dispatcher';\nimport { useConnectionStatus } from '../Utilities/useConnectionStatus';\n\nconst RemediationDetails = ({\n  selectedRemediation,\n  selectedRemediationStatus,\n  loadRemediation,\n  loadRemediationStatus,\n  switchAutoReboot,\n  playbookRuns,\n  getPlaybookRuns,\n  checkExecutable,\n  executable,\n}) => {\n  const chrome = useChrome();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const { isFedramp, isBeta, isOrgAdmin = () => false } = chrome;\n  const context = useContext(PermissionContext);\n\n  const [upsellBannerVisible, setUpsellBannerVisible] = useState(\n    localStorage.getItem('remediations:bannerStatus') !== 'dismissed'\n  );\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n\n  const handleUpsellToggle = () => {\n    setUpsellBannerVisible(false);\n    localStorage.setItem('remediations:bannerStatus', 'dismissed');\n  };\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const handleTabClick = (event, tabName) =>\n    setSearchParams({\n      ...Object.fromEntries(searchParams),\n      activeTab: tabName,\n    });\n\n  const disabledStateText = useMemo(() => {\n    if (!context.permissions.execute) {\n      if (isOrgAdmin()) {\n        return (\n          'Executing the playbook requires having the remediations:remediation:execute permission' +\n          ' which is included in the Remediations administrator role. Manage your roles in User access.'\n        );\n      } else {\n        return (\n          'Executing the playbook requires having the remediations:remediation:execute permission' +\n          ' which is included in the Remediations administrator role. Contact your Organization Administrator for access.'\n        );\n      }\n    } else if (!executable) {\n      return 'Your account must be entitled to Satellite to execute playbooks.';\n    }\n\n    return 'Unable to execute playbook.';\n  }, [chrome]);\n\n  useEffect(() => {\n    loadRemediation(id).catch((e) => {\n      if (e && e.response && e.response.status === 404) {\n        navigate('/');\n        return;\n      }\n\n      throw e;\n    });\n\n    if (isBeta?.()) {\n      loadRemediationStatus(id);\n    }\n    checkExecutable(id);\n  }, []);\n\n  useEffect(() => {\n    getPlaybookRuns(id);\n  }, [getPlaybookRuns]);\n\n  useEffect(() => {\n    playbookRuns;\n    if (\n      playbookRuns &&\n      playbookRuns.length &&\n      normalizeStatus(playbookRuns[0].status) === 'running'\n    ) {\n      const interval = setInterval(() => getPlaybookRuns(id), 10000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playbookRuns]);\n\n  const renderActivityState = (isEntitled, playbookRuns, remediation) => {\n    if (!isEntitled) {\n      return <ActivityTabUpsell />;\n    }\n\n    if (Array.isArray(playbookRuns) && playbookRuns.length) {\n      return (\n        <RemediationActivityTable\n          remediation={remediation}\n          playbookRuns={playbookRuns}\n        />\n      );\n    }\n\n    if (Array.isArray(playbookRuns) && !playbookRuns.length) {\n      return <EmptyActivityTable />;\n    }\n\n    return <SkeletonTable />;\n  };\n\n  const { status, remediation } = selectedRemediation;\n\n  const isConnected = useConnectionStatus(remediation);\n\n  useEffect(() => {\n    remediation &&\n      chrome.updateDocumentTitle(\n        `${remediation.name} - Remediations | Red Hat Insights`\n      );\n  }, [chrome, remediation]);\n\n  if (status !== 'fulfilled' && status !== 'rejected') {\n    return <RemediationDetailsSkeleton />;\n  }\n\n  if (status === 'rejected') {\n    return <InvalidObject />;\n  }\n\n  if (status === 'fulfilled') {\n    return context.permissions.read === false ? (\n      <DeniedState />\n    ) : (\n      <div className=\"page__remediation-details\">\n        <PageHeader>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to=\"/\"> Remediations </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive> {remediation.name} </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className=\"rem-l-level\">\n            <LevelItem>\n              <PageHeaderTitle title={remediation.name} />\n            </LevelItem>\n            <LevelItem>\n              <Split hasGutter>\n                <SplitItem>\n                  <ExecutePlaybookButton\n                    isDisabled={\n                      !isConnected ||\n                      !context.permissions.execute ||\n                      !executable ||\n                      isFedramp\n                    }\n                    disabledStateText={disabledStateText}\n                    remediationId={remediation.id}\n                    remediationName={remediation.name}\n                  ></ExecutePlaybookButton>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    isDisabled={!remediation.issues.length}\n                    variant=\"secondary\"\n                    onClick={() => {\n                      downloadPlaybook(remediation.id);\n                      dispatchNotification({\n                        title: 'Preparing playbook for download.',\n                        description:\n                          'Once complete, your download will start automatically.',\n                        variant: 'info',\n                        dismissable: true,\n                        autoDismiss: true,\n                      });\n                    }}\n                  >\n                    Download playbook\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <RemediationDetailsDropdown remediation={remediation} />\n                </SplitItem>\n              </Split>\n            </LevelItem>\n          </Level>\n          <RemediationSummary\n            remediation={remediation}\n            playbookRuns={playbookRuns}\n            switchAutoReboot={switchAutoReboot}\n            context={context}\n          />\n        </PageHeader>\n        <Main>\n          <Stack hasGutter>\n            {!executable && upsellBannerVisible && (\n              <StackItem>\n                <UpsellBanner onClose={() => handleUpsellToggle()} />\n              </StackItem>\n            )}\n            {executable && noReceptorBannerVisible && (\n              <StackItem>\n                <NoReceptorBanner onClose={() => handleNoReceptorToggle()} />\n              </StackItem>\n            )}\n            <StackItem className=\"ins-c-playbookSummary__tabs\">\n              <Tabs\n                activeKey={searchParams.get('activeTab') || 'issues'}\n                onSelect={handleTabClick}\n              >\n                <Tab eventKey={'issues'} title=\"Actions\">\n                  <RemediationDetailsTable\n                    remediation={remediation}\n                    status={selectedRemediationStatus}\n                  />\n                </Tab>\n                <Tab eventKey={'systems'} title=\"Systems\">\n                  <SystemsTable remediation={remediation} />\n                </Tab>\n                <Tab eventKey={'activity'} title=\"Activity\">\n                  {renderActivityState(executable, playbookRuns, remediation)}\n                </Tab>\n              </Tabs>\n            </StackItem>\n          </Stack>\n        </Main>\n      </div>\n    );\n  }\n};\n\nRemediationDetails.propTypes = {\n  selectedRemediation: PropTypes.object,\n  selectedRemediationStatus: PropTypes.object,\n  loadRemediation: PropTypes.func.isRequired,\n  loadRemediationStatus: PropTypes.func.isRequired,\n  switchAutoReboot: PropTypes.func.isRequired,\n  deleteRemediation: PropTypes.func.isRequired,\n  executePlaybookBanner: PropTypes.shape({\n    isVisible: PropTypes.bool,\n  }),\n  addNotification: PropTypes.func.isRequired,\n  playbookRuns: PropTypes.array,\n  getPlaybookRuns: PropTypes.func,\n  checkExecutable: PropTypes.func,\n  executable: PropTypes.object,\n};\n\nexport default connect(\n  ({\n    selectedRemediation,\n    selectedRemediationStatus,\n    executePlaybookBanner,\n    playbookRuns,\n    executable,\n  }) => ({\n    selectedRemediation,\n    selectedRemediationStatus,\n    executePlaybookBanner,\n    playbookRuns: playbookRuns.data,\n    remediation: selectedRemediation.remediation,\n    executable,\n  }),\n  (dispatch) => ({\n    loadRemediation: (id) => dispatch(actions.loadRemediation(id)),\n    loadRemediationStatus: (id) => dispatch(actions.loadRemediationStatus(id)),\n    // eslint-disable-next-line camelcase\n    switchAutoReboot: (id, auto_reboot) =>\n      dispatch(actions.patchRemediation(id, { auto_reboot })),\n    deleteRemediation: (id) => dispatch(actions.deleteRemediation(id)),\n    addNotification: (content) => dispatch(addNotification(content)),\n    getPlaybookRuns: (id) => dispatch(actions.getPlaybookRuns(id)),\n    checkExecutable: (id) => dispatch(actions.checkExecutable(id)),\n  })\n)(RemediationDetails);\n","import React, { Fragment } from 'react';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Table, TableHeader } from '@patternfly/react-table/deprecated';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["getIssuePrefix","id","split","getIssueApplication","_ref","getSystemName","_ref2","display_name","hostname","includesIgnoreCase","text","included","toLowerCase","includes","inventoryUrlBuilder","issue","tab","getInventoryTabForIssue","base","appUrl","toString","systemId","concat","buildIssueUrl","parts","segment","app","urijs","document","baseURI","pathName","window","location","pathname","Error","DescriptionList","title","className","children","isBold","hasGutter","needsPointer","props","_objectWithoutProperties","_excluded","descriptionListClasses","classnames","_defineProperty","mainClasses","React","_extends","propTypes","calculateChecked","rows","arguments","length","undefined","selected","every","has","some","calculateSystems","remediation","_remediation$issues","issues","reduce","acc","curr","_curr$systems","systems","forEach","host","_curr$resolution","found","find","_ref3","resolution","description","_toConsumableArray","_objectSpread","resolved","rebootRequired","_ref4","needs_reboot","push","fetchInventoryData","_ref6","_asyncToGenerator","_regeneratorRuntime","_callee","_ref5","getEntities","_ref5$page","page","config","currSystems","data","_args","_context","prev","next","filter","_ref7","_config$filters","filters","hostnameOrId","slice","per_page","map","_ref8","hasItems","sent","abrupt","results","_ref9","total","stop","apply","mergedColumns","defaultColumns","column","invColumn","key","ResolutionStep","_Component","_this","_classCallCheck","_callSuper","_assertThisInitialized","setState","state","resolutions","_componentDidMount","_inherits","_createClass","value","this","getResolutions","resolutionsDisplay","_this2","_this$state","StackItem","Form","Radio","label","Stack","Reboot","red","name","defaultChecked","onChange","onRadioChange","Skeleton","Split","SplitItem","Label","isFilled","Component","PropTypes","isRequired","ResolutionEditButton","onResolutionSelected","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","resolutionStep","useRef","onClick","Modal","variant","ModalVariant","medium","onClose","actions","Button","result","_resolutionStep$curre","current","getSelectedResolution","ref","ConnectResolutionEditButton","connect","f","dispatch","_onResolutionSelected","patchRemediationIssue","refreshRemediation","_x","_x2","_x3","ruleId","DeleteButton","_len","args","Array","_key","dialogOpen","onDelete","onButtonClicked","isDisabled","ConfirmationDialog","dialogTitle","confirmText","dialogConfirmationText","dialogMessage","onDialogClose","defaultProps","remediations","_onDelete","Promise","all","r","deleteRemediation","loadRemediations","DeleteActionsButton","_onDelete2","afterDelete","isBeta","_callee2","_context2","issueId","deleteRemediationIssue","loadRemediationStatus","RemediationDetailsSystemDropdown","system","open","setOpen","_useState3","_useState4","deleteDialogOpen","setDeleteDialogOpen","dispatchNotification","dismissable","autoDismiss","Dropdown","onSelect","toggle","KebabToggle","onToggle","position","DropdownPosition","right","isPlain","deleteRemediationIssueSystem","IconInline","icon","SystemsStatusModal","setSystem","_useState5","_useState6","systemStatuses","setSystemStatuses","_useState7","_useState8","setPage","_useState9","_useState10","pageSize","setPageSize","_useState11","_useState12","filterText","setFilterText","inventory","urlBuilder","useEffect","statuses","CheckIcon","TimesIcon","detailDropdown","generateStatus","large","isFooterLeftAligned","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","reducers","inventoryEntitiesReducer","items","orderBy","s","onRefresh","options","onRefreshData","timestamp","Date","now","perPage","hasCheckbox","event","rowId","rowData","TableToolbar","ToolbarGroup","ToolbarItem","ConditionalFilter","filterValues","placeholder","type","conditionalFilterType","e","SystemForActionButton","useDispatch","pagination","localStorage","getItem","perPageOptions","i","EmptyActions","filtered","Bullseye","EmptyState","Title","size","headingLevel","EmptyStateBody","href","resolutionDescriptionCell","url","resolutions_available","systemsForAction","getResolvedSystems","count","SORTING_ITERATEES","RemediationDetailsTable","_props$remediation","_chrome$isBeta","usePagination","sorter","useSorter","useFilter","selector","useSelector","permission","useContext","PermissionContext","chrome","useChrome","setValue","reset","trim","paged","sortBy","sortDir","offset","flatMap","needsReboot","cells","selectedIds","getSelectedIds","activeFiltersConfig","category","chips","bulkSelectCheck","action","PrimaryToolbar","filterConfig","_e","bulkSelect","_props$remediation2","checked","actionsConfig","call","itemCount","Table","TableVariant","compact","canSelectAll","transforms","sortable","permissions","write","TableHeader","TableBody","tbodyProps","isFooter","Pagination","dropDirection","debug","status","RemoveSystemModal","_selected$","onConfirm","remediationName","appendTo","getElementsByClassName","ouiaId","Icon","ExclamationTriangleIcon","pluralize","RebootColumn","Fragment","issueType","advisor","vulnerabilities","IssuesColumn","index","direction","sortByConfig","setSortByConfig","sortedIssues","sortIssue","isInline","reverse","cellWidth","onSort","renderFunc","_","width","isStatic","SystemsTableWrapper","registry","systemsRef","getEntitiesRef","activeSystem","entities","Map","loaded","bulkSelectorSwitch","selection","selectEntity","showTags","noDetail","hideFilters","tableProps","columns","systemsColumns","_i","_registry$register","api","remediationSystems","_event","_index","_ref10","_ref11","selectedSystems","from","deleteSystems","payload","_ref12","SystemsTable","setRegistry","ReducerRegistry","promiseMiddleware","Provider","store","loadRemediation","RemediationActivityTable","playbookRuns","setRows","playbooks","Link","to","DateFormat","date","created_at","cellFormatters","expandable","created_by","last_name","first_name","username","StatusSummary","executorStatus","normalizeStatus","counts","executors","ex","pending","running","success","failure","canceled","acked","hasCancel","remediationId","playbookId","parent","fullWidth","executor_id","executor_name","system_count","generateRows","onCollapse","collapseRows","TextInputDialog","valid","setValid","onCancel","onSubmit","ariaLabel","small","FormGroup","fieldId","helperTextInvalid","isValid","TextInput","pattern","test","autoFocus","FormHelperText","HelperText","HelperTextItem","RegExp","playbookNamePattern","RemediationDetailsDropdown","onRename","renameDialogOpen","setRenameDialogOpen","navigate","useNavigate","confirm","isDanger","patchRemediation","ExecuteButton","isLoading","disabledStateText","getConnectionStatus","issueCount","runRemediation","etag","remediationStatus","setEtag","showRefreshMessage","setShowRefreshMessage","Tooltip","content","isAriaDisabled","ExecuteModal","showRefresh","ExecutePlaybookButton","_ref$connectionStatus","connectionStatus","selectedRemediation","sources","executable","exclude","then","getPlaybookRuns","getEndpoint","checkExecutable","UpsellBanner","Alert","actionClose","AlertActionCloseButton","EmptyStateHeader","titleText","EmptyStateIcon","CloudIcon","EmptyStateFooter","component","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","InputGroup","InputGroupItem","isFill","SearchIcon","Toolbar","ToolbarContent","Tabs","activeKey","Tab","eventKey","TabTitleText","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Level","LevelItem","PageHeaderTitle","RemediationSummarySkeleton","Main","SkeletonTabs","SkeletonTableToolbar","SkeletonTable","ChartDonutUtilization","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","subTitle","subTitleComponent","ChartLabel","thresholds","color","height","padding","bottom","left","top","Flex","FlexItem","spacer","default","colSpan","RemediationSummary","number","str","switchAutoReboot","context","handleRebootChange","autoReboot","rebootDisabled","required","OffIcon","num","_step","_iterator","_createForOfIteratorHelper","n","done","err","generateNumIssuesReboot","auto_reboot","generateAutoRebootStatus","CheckCircleIcon","stats","totalSystems","systemsWithReboot","systemsWithoutReboot","resolvedCount","mostRecent","updated_at","remediation_id","renderLatestActivity","renderAutoReboot","API_BASE","require","RemediationDetails","selectedRemediationStatus","useParams","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","isFedramp","_chrome$isOrgAdmin","isOrgAdmin","upsellBannerVisible","setUpsellBannerVisible","noReceptorBannerVisible","setNoReceptorBannerVisible","useMemo","execute","response","interval","setInterval","clearInterval","isConnected","axios","useAxiosWithPlatformInterceptors","setisConnected","mounted","fetchData","_connection_status$da","connection_status","t0","get","t1","console","error","useConnectionStatus","updateDocumentTitle","RemediationDetailsSkeleton","InvalidObject","read","DeniedState","downloadPlaybook","setItem","NoReceptorBanner","tabName","Object","fromEntries","activeTab","isEntitled","isArray","EmptyActivityTable","ActivityTabUpsell","renderActivityState","executePlaybookBanner","isVisible","addNotification","_React$Component","EmptyTable","centered","Spinner"],"sourceRoot":""}