{"version":3,"file":"js/ExecutorDetails.1659536755223.0f69e7ffdbd8f2a19f10.js","mappings":"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","sources":["webpack:///./src/components/RemediationsLogViewer.js","webpack:///./src/components/SystemDetails.js","webpack:///./src/skeletons/ExecutorDetailsSkeleton.js","webpack:///./src/components/Alerts/RunFailed.js","webpack:///./src/components/ExecutorDetails.js","webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\n\nconst RemediationsLogViewer = ({ data }) => {\n  return (\n    <LogViewer\n      data={data}\n      toolbar={\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <LogViewerSearch placeholder=\"Search\" />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n      }\n    />\n  );\n};\n\nRemediationsLogViewer.propTypes = {\n  data: PropTypes.string,\n};\n\nexport default RemediationsLogViewer;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/esm/light';\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\nimport RemediationsLogViewer from './RemediationsLogViewer';\n\nimport { Spinner } from '@patternfly/react-core';\nimport { Title } from '@patternfly/react-core';\n\nimport './SystemDetails.scss';\n\nSyntaxHighlighter.registerLanguage('yaml', yaml);\n\nconst PlaybookSystemDetails = ({ systemId, playbookRunSystemDetails }) => {\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h4\" size=\"xl\" className=\"rem-c-title-job-output\">\n        Playbook log\n      </Title>\n      {systemId && systemId === playbookRunSystemDetails.system_id ? (\n        <React.Fragment>\n          <RemediationsLogViewer data={playbookRunSystemDetails.console} />\n          {playbookRunSystemDetails.status === 'running' && (\n            <div className=\"rem-l-playbook-running\">\n              <Spinner\n                size=\"lg\"\n                aria-valuetext=\"playbook in progress\"\n                className=\"ins-c-spinner__playbook-running\"\n              />\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        <Skeleton size=\"lg\" />\n      )}\n    </React.Fragment>\n  );\n};\n\nPlaybookSystemDetails.propTypes = {\n  systemId: PropTypes.string,\n  status: PropTypes.string,\n  console: PropTypes.string,\n  playbookRunSystemDetails: PropTypes.shape({\n    system_id: PropTypes.string,\n    status: PropTypes.string,\n    console: PropTypes.string,\n  }),\n};\n\nPlaybookSystemDetails.defaultProps = {\n  playbookRunSystemDetails: {},\n};\n\nexport default connect(({ playbookRunSystemDetails }) => ({\n  playbookRunSystemDetails,\n}))(PlaybookSystemDetails);\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from './SkeletonTable';\n\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n} from '@patternfly/react-core';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst ExecutorDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle title={<Skeleton size=\"lg\" />} />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  <Skeleton size=\"lg\" />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <Card>\n            <CardHeader className=\"rem-m-card__header-bold\">\n              <Button>Download playbook</Button>\n            </CardHeader>\n\n            <CardBody>\n              <SkeletonTable />\n            </CardBody>\n          </Card>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ExecutorDetailsSkeleton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport '../Status.scss';\n\nconst RunFailed = ({ name }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon className=\"rem-c-failure\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Run failed\n      </Title>\n      <EmptyStateBody>\n        Playbook failed to run on {name}. Connection was lost. Try executing the\n        remediation again, and if the problem persist, constact your system\n        administrator(s).\n      </EmptyStateBody>\n      <Button variant=\"link\">Learn more</Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nRunFailed.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default RunFailed;\n","import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  ToolbarItem,\n  Toolbar,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport reducers from '../store/reducers';\nimport DescriptionList from './Layouts/DescriptionList';\nimport {\n  getPlaybookRuns,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  expandInventoryTable,\n  loadRemediation,\n} from '../actions';\nimport { downloadPlaybook } from '../api';\nimport { normalizeStatus, renderStatus, StatusSummary } from './statusHelper';\nimport PlaybookSystemDetails from './SystemDetails';\nimport ExecutorDetailsSkeleton from '../skeletons/ExecutorDetailsSkeleton';\nimport RunFailed from './Alerts/RunFailed';\nimport { inventoryUrlBuilder } from '../Utilities/urls';\nimport './ExecutorDetails.scss';\nimport { PermissionContext } from '../App';\nimport { register } from '../store';\nlet refreshInterval;\n\nconst ExecutorDetails = ({\n  match: {\n    params: { executor_id, run_id, id },\n  },\n  remediation,\n  playbookRun,\n  playbookRunSystems,\n  playbookRunSystemDetails,\n  getPlaybookRun,\n  getPlaybookRunSystems,\n  getPlaybookRunSystemDetails,\n  onCollapseInventory,\n  loadRemediation,\n}) => {\n  const [executor, setExecutor] = useState({});\n  const [systems, setSystems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [openId, setOpenId] = useState();\n  const [firstExpand, setFirstExpand] = useState(false);\n  const [debouncedGetPlaybookRunSystems, setDebounce] = useState();\n  const inventory = useRef(null);\n\n  const urlBuilder = inventoryUrlBuilder({ id: 'default' });\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        options.per_page,\n        options.per_page * (options.page - 1)\n      );\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  useEffect(() => {\n    loadRemediation(id);\n    getPlaybookRun(id, run_id);\n    setDebounce(() => AwesomeDebouncePromise(getPlaybookRunSystems, 500));\n\n    return () => {\n      if (refreshInterval) {\n        clearInterval(refreshInterval);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (playbookRun && playbookRun.data) {\n      setExecutor(\n        playbookRun.data.executors.find(\n          (executor) => executor.executor_id === executor_id\n        ) || {}\n      );\n    }\n\n    if (playbookRunSystems.status !== 'pending') {\n      getPlaybookRunSystems(\n        id,\n        run_id,\n        executor_id,\n        pageSize,\n        pageSize * (page - 1),\n        filter\n      );\n    }\n  }, [playbookRun]);\n\n  useEffect(() => {\n    if (!firstExpand) {\n      getPlaybookRun(id, run_id);\n    }\n\n    if (\n      normalizeStatus(playbookRunSystemDetails.status) !== 'running' &&\n      refreshInterval\n    ) {\n      clearInterval(refreshInterval);\n    }\n\n    setFirstExpand(false);\n  }, [playbookRunSystemDetails.status]);\n\n  useEffect(() => {\n    setSystems(() =>\n      playbookRunSystems.data.map(({ system_id, system_name, status }) => ({\n        id: system_id,\n        display_name: system_name,\n        status,\n        isOpen: openId === system_id,\n        children: <PlaybookSystemDetails systemId={system_id} />,\n      }))\n    );\n  }, [playbookRunSystems]);\n\n  const renderInventorycard = (status) => (\n    <Main>\n      <Stack hasGutter>\n        <Card className=\"rem-c-card__playbook-log\">\n          <CardBody>\n            <InventoryTable\n              ref={inventory}\n              onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n                register({\n                  ...mergeWithEntities(\n                    reducers.playbookActivityIntentory({\n                      INVENTORY_ACTION_TYPES,\n                      // eslint-disable-next-line react/display-name\n                      renderStatus: (status) => (\n                        <div className=\"rem-c-status-bar\">\n                          {renderStatus(normalizeStatus(status))}\n                        </div>\n                      ),\n                      urlBuilder,\n                    })()\n                  ),\n                })\n              }\n              items={playbookRunSystems.status !== 'pending' ? systems : []}\n              isLoaded={playbookRunSystems.status !== 'pending'}\n              onRefresh={onRefresh}\n              page={page}\n              total={playbookRunSystems.meta.total}\n              perPage={pageSize}\n              hasCheckbox={false}\n              expandable\n              showTags\n              onExpandClick={\n                status === 'running'\n                  ? (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        if (refreshInterval) {\n                          clearInterval(refreshInterval);\n                        }\n\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                        refreshInterval = setInterval(\n                          () =>\n                            getPlaybookRunSystemDetails(\n                              remediation.id,\n                              run_id,\n                              id\n                            ),\n                          5000\n                        );\n                      } else {\n                        setOpenId(undefined);\n                        clearInterval(refreshInterval);\n                      }\n\n                      onCollapseInventory(isOpen, id);\n                    }\n                  : (_e, _i, isOpen, { id }) => {\n                      setFirstExpand(true);\n                      if (isOpen) {\n                        setOpenId(id);\n                        getPlaybookRunSystemDetails(remediation.id, run_id, id);\n                      } else {\n                        setOpenId(undefined);\n                      }\n\n                      clearInterval(refreshInterval);\n                      onCollapseInventory(isOpen, id);\n                    }\n              }\n            >\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <ConditionalFilter\n                      items={[\n                        {\n                          value: 'display_name',\n                          label: 'Name',\n                          filterValues: {\n                            placeholder: 'Filter by name',\n                            type: conditionalFilterType.text,\n                            value: filter,\n                            onChange: (e, selected) => {\n                              setFilter(selected);\n                              setPage(1);\n                              debouncedGetPlaybookRunSystems(\n                                id,\n                                run_id,\n                                executor_id,\n                                pageSize,\n                                0,\n                                selected\n                              );\n                            },\n                          },\n                        },\n                      ]}\n                    />\n                  </ToolbarItem>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => downloadPlaybook(remediation.id)}\n                    >\n                      Download playbook\n                    </Button>\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </InventoryTable>\n          </CardBody>\n        </Card>\n      </Stack>\n    </Main>\n  );\n\n  const renderMain = (status) =>\n    ({\n      running: renderInventorycard(status),\n      success: renderInventorycard(status),\n      failure: renderInventorycard(status),\n      canceled: renderInventorycard(status),\n      epicFailure: (\n        <Main>\n          <Stack hasGutter>\n            <Card>\n              <CardHeader className=\"rem-m-card__header-bold\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => downloadPlaybook(remediation.id)}\n                >\n                  Download playbook\n                </Button>\n              </CardHeader>\n\n              <CardBody>\n                <RunFailed name={executor.executor_name} />\n              </CardBody>\n            </Card>\n          </Stack>\n        </Main>\n      ),\n    }[normalizeStatus(status)]);\n\n  const permission = useContext(PermissionContext);\n\n  return remediation && executor && playbookRun && playbookRun.data ? (\n    <React.Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={`/`}> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}`}> {remediation.name} </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to={`/${remediation.id}/${run_id}`}>\n              <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n            </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive> {executor.executor_name} </BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <PageHeaderTitle\n              title={\n                normalizeStatus(executor.status) === 'Running' ? (\n                  <React.Fragment>\n                    <InProgressIcon\n                      className=\"rem-c-running\"\n                      aria-label=\"connection status\"\n                    />\n                    {executor.executor_name}\n                  </React.Fragment>\n                ) : (\n                  executor.executor_name\n                )\n              }\n            />\n          </StackItem>\n          <StackItem>\n            <Split hasGutter>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run status\"\n                >\n                  {executor.status ? (\n                    <StatusSummary\n                      executorStatus={executor.status}\n                      counts={executor.counts}\n                      permission={permission}\n                    />\n                  ) : (\n                    <Skeleton size=\"lg\" />\n                  )}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run by\"\n                >\n                  {`${playbookRun.data.created_by.first_name} ${playbookRun.data.created_by.last_name}`}\n                </DescriptionList>\n              </SplitItem>\n              <SplitItem>\n                <DescriptionList\n                  className=\"rem-c-playbookSummary__settings\"\n                  title=\"Run on\"\n                >\n                  <DateFormat type=\"exact\" date={playbookRun.data.created_at} />\n                </DescriptionList>\n              </SplitItem>\n            </Split>\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      {renderMain(normalizeStatus(executor.status))}\n    </React.Fragment>\n  ) : (\n    <ExecutorDetailsSkeleton />\n  );\n};\n\nExecutorDetails.propTypes = {\n  match: PropTypes.object,\n  remediation: PropTypes.object,\n  playbookRun: PropTypes.object,\n  playbookRunSystems: PropTypes.object,\n  playbookRunSystemDetails: PropTypes.object,\n  getPlaybookRun: PropTypes.func,\n  getPlaybookRunSystems: PropTypes.func,\n  getPlaybookRunSystemDetails: PropTypes.func,\n  onCollapseInventory: PropTypes.func,\n  loadRemediation: PropTypes.func,\n};\n\nExecutorDetails.defaultProps = {\n  remediation: {},\n};\n\nconst connected = connect(\n  ({\n    playbookRuns,\n    playbookRun,\n    playbookRunSystems,\n    playbookRunSystemDetails,\n    selectedRemediation,\n  }) => ({\n    playbookRuns: playbookRuns.data,\n    playbookRun,\n    playbookRunSystemDetails,\n    playbookRunSystems,\n    remediation: selectedRemediation.remediation,\n  }),\n  (dispatch) => ({\n    getPlaybookRuns: (id) => dispatch(getPlaybookRuns(id)),\n    getPlaybookRun: (id, runId) => dispatch(getPlaybookRun(id, runId)),\n    getPlaybookRunSystems: (\n      remediationId,\n      runId,\n      executorId,\n      limit,\n      offset,\n      ansibleHost\n    ) =>\n      dispatch(\n        getPlaybookRunSystems(\n          remediationId,\n          runId,\n          executorId,\n          limit,\n          offset,\n          ansibleHost\n        )\n      ),\n    getPlaybookRunSystemDetails: (remediationId, runId, systemId) =>\n      dispatch(getPlaybookRunSystemDetails(remediationId, runId, systemId)),\n    onCollapseInventory: (isOpen, id) =>\n      dispatch(expandInventoryTable(id, isOpen)),\n    loadRemediation: (id) => dispatch(loadRemediation(id)),\n  })\n)(ExecutorDetails);\nexport default connected;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","import React, { Fragment } from 'react';\nimport { Table, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["RemediationsLogViewer","data","LogViewer","toolbar","Toolbar","ToolbarContent","ToolbarItem","LogViewerSearch","placeholder","propTypes","PropTypes","SyntaxHighlighter","yaml","PlaybookSystemDetails","systemId","playbookRunSystemDetails","Title","headingLevel","size","className","system_id","console","status","Spinner","Skeleton","defaultProps","connect","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Stack","hasGutter","StackItem","PageHeaderTitle","title","Split","SplitItem","DescriptionList","Main","Card","CardHeader","Button","CardBody","SkeletonTable","RunFailed","name","Bullseye","EmptyState","EmptyStateIcon","icon","ExclamationCircleIcon","EmptyStateBody","variant","refreshInterval","ExecutorDetails","match","params","executor_id","run_id","id","remediation","playbookRun","playbookRunSystems","getPlaybookRun","getPlaybookRunSystems","getPlaybookRunSystemDetails","onCollapseInventory","loadRemediation","useState","executor","setExecutor","systems","setSystems","filter","setFilter","page","setPage","pageSize","setPageSize","openId","setOpenId","firstExpand","setFirstExpand","debouncedGetPlaybookRunSystems","setDebounce","inventory","useRef","urlBuilder","inventoryUrlBuilder","onRefresh","options","current","per_page","onRefreshData","useEffect","AwesomeDebouncePromise","clearInterval","executors","find","normalizeStatus","map","display_name","system_name","isOpen","children","renderInventorycard","InventoryTable","ref","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","register","reducers","renderStatus","items","isLoaded","total","meta","perPage","hasCheckbox","expandable","showTags","onExpandClick","_e","_i","setInterval","undefined","ConditionalFilter","value","label","filterValues","type","conditionalFilterType","onChange","e","selected","onClick","downloadPlaybook","permission","useContext","PermissionContext","Link","to","DateFormat","date","created_at","executor_name","InProgressIcon","executorStatus","counts","created_by","first_name","last_name","running","success","failure","canceled","epicFailure","playbookRuns","selectedRemediation","dispatch","getPlaybookRuns","runId","remediationId","executorId","limit","offset","ansibleHost","expandInventoryTable","isBold","needsPointer","props","descriptionListClasses","classnames","mainClasses","state","columns","rows","this","Fragment","Table","cells","TableVariant","TableHeader","centered","isFooter","React"],"sourceRoot":""}