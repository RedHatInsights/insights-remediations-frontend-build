{"version":3,"file":"js/4026.9bf4195e366f2a99a2d1.js","mappings":"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","sources":["webpack:///./src/Utilities/utils.js","webpack:///./src/modules/RemediationsModal/common/SystemsTable.js"],"sourcesContent":["export function capitalize(string) {\n  return `${string.charAt(0).toUpperCase() + string.slice(1)}`;\n}\n\n/* eslint-disable camelcase */\nimport React, { Fragment } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport * as api from '../api';\nimport uniqWith from 'lodash/uniqWith';\nimport isEqual from 'lodash/isEqual';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport { SystemsTableWithContext } from '../modules/RemediationsModal/common/SystemsTable';\n\nexport const CAN_REMEDIATE = 'remediations:remediation:write';\nexport const AUTO_REBOOT = 'auto-reboot';\nexport const HAS_MULTIPLES = 'has-multiples';\nexport const SELECT_PLAYBOOK = 'select-playbook';\nexport const SELECTED_RESOLUTIONS = 'selected-resolutions';\nexport const MANUAL_RESOLUTION = 'manual-resolution';\nexport const EXISTING_PLAYBOOK_SELECTED = 'existing-playbook-selected';\nexport const EXISTING_PLAYBOOK = 'existing-playbook';\nexport const SYSTEMS = 'systems';\nexport const RESOLUTIONS = 'resolutions';\nexport const ISSUES_MULTIPLE = 'issues-multiple';\nexport const TOGGLE_BULK_SELECT = 'toggle-bulk-select';\n\n// Get the current group since we can be mounted at two urls\nexport const getGroup = () =>\n  window.location.pathname\n    .split('/')\n    .filter((s) => s !== 'preview' && s.length > 0)\n    .shift();\n\nexport const getEnvUrl = () => {\n  const pathName = window.location.pathname.split('/');\n  return pathName[1] === 'preview' ? 'preview/' : '';\n};\n\nexport const getBaseUri = () =>\n  `${document.baseURI.replace('preview/', '')}${getEnvUrl()}`;\n\nexport const remediationUrl = (id) =>\n  `${getBaseUri()}${getGroup()}/remediations${id ? `/${id}` : ''}`;\n\nexport const dedupeArray = (array) => [...new Set(array)];\n\nexport const pluralize = (count, str, fallback) =>\n  count !== 1 ? fallback || str + 's' : str;\n\nconst sortRecords = (records, sortByState) =>\n  [...records].sort((a, b) => {\n    const key = Object.keys(a)[sortByState.index - 1];\n    return (\n      (a[key] > b[key] ? 1 : a[key] < b[key] ? -1 : 0) *\n      (sortByState.direction === 'desc' ? -1 : 1)\n    );\n  });\n\nexport const buildRows = (\n  records,\n  sortByState,\n  showAlternate,\n  allSystemsNamed\n) =>\n  sortRecords(records, sortByState).reduce(\n    (acc, curr, index) => [\n      ...acc,\n      {\n        isOpen: false,\n        cells: [\n          { title: curr.action },\n          {\n            title: (\n              <Fragment key={`${index}-description`}>\n                <p key={`${index}-resolution`}>{curr.resolution}</p>\n                {showAlternate && curr.alternate > 0 && (\n                  <p key={`${index}-alternate`}>\n                    {curr.alternate} alternate{' '}\n                    {pluralize(curr.alternate, 'resolution')}\n                  </p>\n                )}\n              </Fragment>\n            ),\n          },\n          {\n            title: curr.needsReboot ? (\n              <div>Required</div>\n            ) : (\n              <div>Not required</div>\n            ),\n          },\n          {\n            title: curr.systems?.length || 0,\n            props: { isOpen: false },\n          },\n        ],\n      },\n      ...(curr.systems?.length > 0\n        ? [\n            {\n              parent: index * 2,\n              fullWidth: true,\n              allSystemsNamed: allSystemsNamed.filter((system) =>\n                curr.systems.includes(system.id)\n              ),\n              allSystems: curr.systems,\n              cells: [\n                {\n                  title: (\n                    <Bullseye>\n                      <Spinner />\n                    </Bullseye>\n                  ),\n                  props: { colSpan: 5, className: 'pf-m-no-padding' },\n                },\n              ],\n            },\n          ]\n        : []),\n    ],\n    []\n  );\n\nconst buildSystemRow = (allSystemsNamed = [], allSystems = []) => (\n  <SystemsTableWithContext\n    allSystemsNamed={allSystemsNamed}\n    allSystems={allSystems}\n    disabledColumns={['updated']}\n  />\n);\n\nexport const onCollapse = (event, rowKey, isOpen, rows, setRows) => {\n  let temp = [...rows];\n  rows[rowKey].isOpen = isOpen;\n  temp[rowKey + 1].cells = [\n    {\n      title: buildSystemRow(\n        rows[rowKey + 1].allSystemsNamed,\n        rows[rowKey + 1].allSystems\n      ),\n    },\n  ];\n  setRows(temp);\n};\n\nexport const getResolution = (issueId, formValues) => {\n  const issueResolutions =\n    formValues[RESOLUTIONS].find((r) => r.id === issueId)?.resolutions || [];\n\n  if (\n    formValues[MANUAL_RESOLUTION] &&\n    issueId in formValues[SELECTED_RESOLUTIONS]\n  ) {\n    return issueResolutions.filter(\n      (r) => r.id === formValues[SELECTED_RESOLUTIONS][issueId]\n    );\n  }\n\n  if (formValues[EXISTING_PLAYBOOK_SELECTED]) {\n    const existing = formValues[EXISTING_PLAYBOOK]?.issues?.find(\n      (i) => i.id === issueId\n    );\n\n    if (existing) {\n      return issueResolutions.filter((r) => r.id === existing.resolution.id);\n    }\n  }\n\n  return issueResolutions;\n};\n\nexport function createNotification(id, name, isNewSwitch) {\n  const verb = isNewSwitch ? 'created' : 'updated';\n  return {\n    variant: 'success',\n    title: `Playbook ${verb}`,\n    description: (\n      <span>\n        You have successfully {verb} <a href={remediationUrl(id)}>{name}</a>.\n      </span>\n    ),\n    dismissable: true,\n  };\n}\n\nexport const submitRemediation = (formValues, data, basePath, setState) => {\n  let percent = 1;\n  setState({ percent });\n\n  const issues = data.issues\n    .map(({ id }) => {\n      const playbookSystems =\n        formValues[EXISTING_PLAYBOOK]?.issues\n          ?.find((i) => i.id === id)\n          ?.systems?.map((s) => s.id) || [];\n      return {\n        id,\n        resolution: getResolution(id, formValues)?.[0]?.id,\n        systems: dedupeArray([\n          ...(formValues[EXISTING_PLAYBOOK_SELECTED] ? [] : playbookSystems),\n          ...(formValues[SYSTEMS][id] || []),\n        ]),\n      };\n    })\n    .filter((issue) => issue.systems.length > 0);\n\n  const interval = setInterval(() => {\n    percent < 99 && setState({ percent: ++percent });\n  }, (issues.length + Object.keys(formValues[SYSTEMS]).length) / 10);\n\n  const add = { issues, systems: [] };\n\n  const { id } = formValues[EXISTING_PLAYBOOK] || {};\n  const isUpdate = formValues[EXISTING_PLAYBOOK_SELECTED];\n\n  (\n    (isUpdate &&\n      api.patchRemediation(\n        id,\n        { add, auto_reboot: formValues[AUTO_REBOOT] },\n        basePath\n      )) ||\n    api.createRemediation(\n      {\n        name: formValues[SELECT_PLAYBOOK],\n        add,\n        auto_reboot: formValues[AUTO_REBOOT],\n      },\n      basePath\n    )\n  )\n    .then(({ id }) => {\n      setState({ id, percent: 100 });\n      data?.onRemediationCreated?.({\n        remediation: { id, name },\n        getNotification: () =>\n          createNotification(id, formValues[SELECT_PLAYBOOK], !isUpdate),\n      });\n    })\n    .catch(() => {\n      setState({ failed: true });\n    })\n    .finally(() => clearInterval(interval));\n};\n\nexport const entitySelected = (state, { payload }) => {\n  let selected = state.selected || [];\n  if (payload.selected) {\n    selected = [\n      ...selected,\n      ...(payload.id === 0 ? state.rows.map((row) => row.id) : [payload.id]),\n    ];\n  } else {\n    if (payload.id === 0) {\n      const rowsIds = state.rows.map((row) => row.id);\n      selected = selected.filter((item) => !rowsIds.includes(item));\n    } else {\n      selected =\n        payload.id === -1 ? [] : selected.filter((item) => item !== payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected,\n  };\n};\n\nexport const loadEntitiesFulfilled = (state, allSystems, sortBy) => {\n  let selected = state.selected || [];\n  if (!state.selected) {\n    selected = allSystems ? allSystems : state.rows.map((row) => row.id);\n  }\n  return {\n    ...state,\n    selected,\n    rows: sortByAttr(\n      state.rows.map(({ id, ...row }) => ({\n        id,\n        ...row,\n        selected: !!selected?.includes(id),\n      })),\n      'display_name',\n      sortBy?.direction || 'asc'\n    ),\n    sortBy,\n  };\n};\n\nexport const changeBulkSelect = (state, action) => {\n  const removeSelected = !action.payload;\n  if (!removeSelected) {\n    state.selected = dedupeArray([\n      ...state.selected,\n      ...state.rows.map((row) => row.id),\n    ]);\n  }\n\n  return {\n    ...state,\n    selected: removeSelected ? [] : state.selected,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !removeSelected,\n    })),\n  };\n};\n\nexport const sortByAttr = (systems, attribute, direction) =>\n  Array.isArray(systems)\n    ? systems.sort(\n        (a, b) =>\n          ((a[attribute] > b[attribute] && 1) || -1) *\n          (direction === 'asc' ? 1 : -1)\n      )\n    : [];\n\nexport const fetchSystemsInfo = async (\n  config,\n  sortableColumns = [],\n  allSystemsNamed = [],\n  getEntities\n) => {\n  const isSortingValid = sortableColumns.includes(config.orderBy);\n  config.orderBy = isSortingValid ? config.orderBy : undefined;\n  config.orderDirection = isSortingValid\n    ? config.orderDirection?.toLowerCase()\n    : undefined;\n  allSystemsNamed = sortByAttr(allSystemsNamed, 'name', config.orderDirection);\n  const hostnameOrId = config?.filters?.hostnameOrId?.toLowerCase();\n  const systems = hostnameOrId\n    ? allSystemsNamed.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...(curr.name.toLowerCase().includes(hostnameOrId) ? [curr.id] : []),\n        ],\n        []\n      )\n    : allSystemsNamed.map((system) => system.id);\n  const sliced = systems.slice(\n    (config.page - 1) * config.per_page,\n    config.page * config.per_page\n  );\n  const data =\n    sliced.length > 0\n      ? await getEntities(sliced, { ...config, hasItems: true, page: 1 }, true)\n      : {};\n  return {\n    ...{\n      ...data,\n      results: sortByAttr(data.results, 'display_name', config.orderDirection),\n    },\n    total: systems.length,\n    page: config.page,\n    per_page: config.per_page,\n    orderBy: config.orderBy,\n    orderDirection: config.orderDirection,\n    sortBy: { key: config.orderBy, direction: config.orderDirection },\n  };\n};\n\nexport const splitArray = (inputArray, perChunk) =>\n  [...new Array(Math.ceil(inputArray.length / perChunk))].map((_item, key) =>\n    inputArray.slice(key * perChunk, (key + 1) * perChunk)\n  );\n\nexport const getPlaybookSystems = (playbook) =>\n  (playbook &&\n    uniqWith(\n      playbook.issues?.reduce(\n        (acc, curr) => [\n          ...acc,\n          ...curr.systems.map((system) => ({\n            id: system.id,\n            name: system.display_name,\n          })),\n        ],\n        []\n      ),\n      isEqual\n    )) ||\n  [];\n\nexport const inventoryEntitiesReducer = (\n  allSystems,\n  { LOAD_ENTITIES_FULFILLED }\n) =>\n  applyReducerHash({\n    SELECT_ENTITY: (state, action) => entitySelected(state, action),\n    [LOAD_ENTITIES_FULFILLED]: (state, { payload }) =>\n      loadEntitiesFulfilled(state, allSystems, {\n        key: payload.orderBy,\n        direction: payload.orderDirection,\n      }),\n    [TOGGLE_BULK_SELECT]: changeBulkSelect,\n  });\n\nexport const shortenIssueId = (issueId) =>\n  issueId?.split('|')?.slice(-1)?.[0] || issueId;\n\nexport const getIssuesMultiple = (\n  issues = [],\n  systems = [],\n  resolutions = []\n) =>\n  issues\n    .map((issue) => {\n      const issueResolutions =\n        resolutions.find((r) => r.id === issue.id)?.resolutions || [];\n      const { description, needs_reboot: needsReboot } =\n        issueResolutions?.[0] || {};\n      return {\n        action: issues.find((i) => i.id === issue.id).description,\n        resolution: description,\n        needsReboot,\n        systems: dedupeArray([...(issue.systems || []), ...systems]),\n        id: issue.id,\n        alternate: issueResolutions?.length - 1,\n      };\n    })\n    .filter((record) => record.alternate > 0);\n\nexport const matchPermissions = (permissionA, permissionB) => {\n  const segmentsA = permissionA.split(':');\n  const segmentsB = permissionB.split(':');\n\n  if (segmentsA.length !== segmentsB.length) {\n    return false;\n  }\n\n  return segmentsA.every(\n    (segmentA, index) =>\n      segmentA === segmentsB[index] ||\n      segmentA === '*' ||\n      segmentsB[index] === '*'\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport propTypes from 'prop-types';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport InventoryTable from '@redhat-cloud-services/frontend-components/Inventory/InventoryTable';\nimport {\n  fetchSystemsInfo,\n  inventoryEntitiesReducer as entitiesReducer,\n} from '../../../Utilities/utils';\nimport './systemsTable.scss';\n\nconst SystemsTable = ({\n  registry,\n  allSystemsNamed,\n  allSystems,\n  hasCheckbox,\n  disabledColumns,\n  bulkSelect,\n}) => {\n  const inventory = useRef(null);\n  const sortableColumns = ['display_name'];\n\n  return (\n    <InventoryTable\n      hideFilters={{\n        tags: true,\n        registeredWith: true,\n        stale: true,\n      }}\n      columns={(columns) =>\n        columns.reduce(\n          (acc, curr) => [\n            ...acc,\n            ...(!disabledColumns.includes(curr.key)\n              ? [\n                  {\n                    ...curr,\n                    props: {\n                      ...(curr.props || {}),\n                      isStatic: !sortableColumns.includes(curr.key),\n                    },\n                  },\n                ]\n              : []),\n          ],\n          []\n        )\n      }\n      noDetail\n      variant=\"compact\"\n      hasCheckbox={hasCheckbox}\n      showTags\n      bulkSelect={bulkSelect}\n      ref={inventory}\n      getEntities={(_i, config, showTags, defaultGetEntities) =>\n        fetchSystemsInfo(\n          config,\n          sortableColumns,\n          allSystemsNamed,\n          defaultGetEntities\n        )\n      }\n      onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n        registry.register(\n          mergeWithEntities(entitiesReducer(allSystems, INVENTORY_ACTION_TYPES))\n        );\n      }}\n      tableProps={{\n        canSelectAll: false,\n      }}\n    ></InventoryTable>\n  );\n};\n\nSystemsTable.defaultProps = {\n  disabledColumns: [],\n  hasCheckbox: false,\n};\n\nSystemsTable.propTypes = {\n  registry: propTypes.instanceOf(ReducerRegistry).isRequired,\n  allSystemsNamed: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n    })\n  ).isRequired,\n  allSystems: propTypes.arrayOf(propTypes.string).isRequired,\n  hasCheckbox: propTypes.bool,\n  disabledColumns: propTypes.arrayOf(propTypes.string),\n  bulkSelect: propTypes.object,\n};\n\nexport const SystemsTableWithContext = (props) => {\n  const [registry, setRegistry] = useState();\n\n  useEffect(() => {\n    setRegistry(() => new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return registry?.store ? (\n    <Provider store={registry.store}>\n      <div className=\"pf-u-pl-lg\">\n        <SystemsTable {...props} registry={registry} />\n      </div>\n    </Provider>\n  ) : null;\n};\n\nexport default SystemsTable;\n"],"names":["capitalize","string","charAt","toUpperCase","slice","CAN_REMEDIATE","AUTO_REBOOT","SELECT_PLAYBOOK","SELECTED_RESOLUTIONS","MANUAL_RESOLUTION","EXISTING_PLAYBOOK_SELECTED","EXISTING_PLAYBOOK","SYSTEMS","RESOLUTIONS","ISSUES_MULTIPLE","TOGGLE_BULK_SELECT","getEnvUrl","window","location","pathname","split","remediationUrl","id","document","baseURI","replace","filter","s","length","shift","dedupeArray","array","Set","pluralize","count","str","fallback","buildRows","records","sortByState","showAlternate","allSystemsNamed","sort","a","b","key","Object","keys","index","direction","sortRecords","reduce","acc","curr","isOpen","cells","title","action","Fragment","resolution","alternate","needsReboot","systems","props","parent","fullWidth","system","includes","allSystems","Bullseye","Spinner","colSpan","className","buildSystemRow","disabledColumns","onCollapse","event","rowKey","rows","setRows","temp","getResolution","issueId","formValues","issueResolutions","find","r","resolutions","existing","issues","i","submitRemediation","data","basePath","setState","percent","map","playbookSystems","issue","interval","setInterval","add","isUpdate","api","auto_reboot","name","then","onRemediationCreated","remediation","getNotification","isNewSwitch","verb","variant","description","href","dismissable","createNotification","failed","clearInterval","changeBulkSelect","state","removeSelected","payload","selected","row","sortByAttr","attribute","Array","isArray","fetchSystemsInfo","config","getEntities","isSortingValid","orderBy","undefined","orderDirection","toLowerCase","hostnameOrId","filters","sliced","page","per_page","hasItems","results","total","sortBy","splitArray","inputArray","perChunk","Math","ceil","_item","inventoryEntitiesReducer","LOAD_ENTITIES_FULFILLED","applyReducerHash","SELECT_ENTITY","rowsIds","item","entitySelected","loadEntitiesFulfilled","shortenIssueId","getIssuesMultiple","needs_reboot","record","matchPermissions","permissionA","permissionB","segmentsA","segmentsB","every","segmentA","SystemsTable","registry","hasCheckbox","bulkSelect","inventory","useRef","sortableColumns","hideFilters","tags","registeredWith","stale","columns","isStatic","noDetail","showTags","ref","_i","defaultGetEntities","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","register","entitiesReducer","tableProps","canSelectAll","defaultProps","propTypes","ReducerRegistry","isRequired","SystemsTableWithContext","useState","setRegistry","useEffect","promiseMiddleware","store","Provider"],"sourceRoot":""}