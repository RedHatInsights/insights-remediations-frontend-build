{"version":3,"file":"js/RemediationDetails.1665606379176.c464dadd4f8ce77caf35.js","mappings":"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","sources":["webpack:///./src/components/Layouts/DescriptionList.js","webpack:///./src/components/ResolutionModal/ResolutionStep.js","webpack:///./src/components/ResolutionEditButton.js","webpack:///./src/containers/ConnectedComponents.js","webpack:///./src/components/DeleteButton.js","webpack:///./src/containers/DeleteButtons.js","webpack:///./src/components/RemediationDetailsSystemDropdown.js","webpack:///./src/components/Layouts/IconInline.js","webpack:///./src/components/Modals/SystemsStatusModal.js","webpack:///./src/components/SystemForActionButton.js","webpack:///./src/Utilities/debug.js","webpack:///./src/components/EmptyStates/EmptyActions.js","webpack:///./src/components/RemediationDetailsTable.js","webpack:///./src/components/RemediationActivityTable.js","webpack:///./src/components/Dialogs/TextInputDialog.js","webpack:///./src/components/RemediationDetailsDropdown.js","webpack:///./src/components/ExecuteButton.js","webpack:///./src/containers/ExecuteButtons.js","webpack:///./src/components/Alerts/UpsellBanner.js","webpack:///./src/components/EmptyStates/ActivityTabUpsell.js","webpack:///./src/skeletons/SkeletonTableToolbar.js","webpack:///./src/skeletons/SkeletonTabs.js","webpack:///./src/skeletons/RemediationDetailsSkeleton.js","webpack:///./src/components/EmptyStates/EmptyActivityTable.js","webpack:///./src/components/RemediationSummary.js","webpack:///./src/routes/RemediationDetails.js","webpack:///./src/skeletons/SkeletonTable.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './DescriptionList.scss';\n\nconst DescriptionList = ({\n  title,\n  className,\n  children,\n  isBold,\n  hasGutter,\n  needsPointer,\n  ...props\n}) => {\n  const descriptionListClasses = classnames(\n    'rem-c-description-list__description',\n    { ['rem-c-description-list__description--bold']: isBold },\n    { ['rem-c-description-list__description--withGutter']: hasGutter },\n    { ['rem-c-description-list__description--needsPointer']: needsPointer }\n  );\n\n  const mainClasses = classnames(className, 'rem-c-description-list');\n\n  return (\n    <dl className={mainClasses} {...props}>\n      <dt className=\"rem-c-description-list__title\">\n        <b>{title}</b>\n      </dt>\n      <dd className={descriptionListClasses}> {children} </dd>\n    </dl>\n  );\n};\n\nexport default DescriptionList;\n\nDescriptionList.propTypes = {\n  title: propTypes.string,\n  children: propTypes.any,\n  isBold: propTypes.bool,\n  className: propTypes.string,\n  hasGutter: propTypes.bool,\n  needsPointer: propTypes.bool,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Form,\n  Label,\n  Radio,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nimport { Reboot } from '@redhat-cloud-services/frontend-components/Reboot';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport './ChooseResolutionModal.scss';\n\nclass ResolutionStep extends Component {\n  constructor(props) {\n    super(props);\n    this.issue = props.issue;\n    this.state = {\n      selected: props.issue.resolution,\n      resolutions: false,\n    };\n  }\n\n  onRadioChange = (resolution) => {\n    this.setState({ selected: resolution });\n  };\n\n  async componentDidMount() {\n    const resolutions = await this.props.getResolutions(this.issue.id);\n    this.setState({ resolutions: resolutions.value });\n  }\n\n  getSelectedResolution = () => {\n    return this.state.selected;\n  };\n\n  render() {\n    const { resolutions, selected } = this.state;\n    let resolutionsDisplay;\n\n    if (resolutions) {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Form>\n              {resolutions.resolutions.map((resolution) => (\n                <div className=\"ins-c-resolution-option\" key={resolution.id}>\n                  <Radio\n                    label={\n                      <Stack className=\"ins-c-resolution-choice__details\">\n                        <StackItem>{resolution.description}</StackItem>\n                        {/*\n                                                    <StackItem>\n                                                        <Battery label=\"Resolution risk\" severity={ resolution.resolution_risk } />\n                                                    </StackItem>\n                                                    */}\n                        {resolution.needs_reboot && (\n                          <StackItem>\n                            <Reboot red />\n                          </StackItem>\n                        )}\n                      </Stack>\n                    }\n                    aria-label={resolution.description}\n                    id={resolution.id}\n                    name=\"radio\"\n                    defaultChecked={resolution.id === selected.id}\n                    onChange={() => this.onRadioChange(resolution)}\n                  />\n                </div>\n              ))}\n            </Form>\n          </StackItem>\n        </React.Fragment>\n      );\n    } else {\n      resolutionsDisplay = (\n        <React.Fragment>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n          <StackItem>\n            <Skeleton />\n          </StackItem>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Stack hasGutter>\n        <StackItem>\n          <div>Select resolution for this action.</div>\n        </StackItem>\n        <StackItem>\n          <Split hasGutter>\n            <SplitItem>\n              <Label>Action</Label>\n            </SplitItem>\n            <SplitItem isFilled>\n              <h1 className=\"ins-m-text__bold\">{this.issue.description}</h1>\n            </SplitItem>\n          </Split>\n        </StackItem>\n\n        {resolutionsDisplay}\n      </Stack>\n    );\n  }\n}\n\nResolutionStep.propTypes = {\n  issue: PropTypes.object.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionStep;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport ResolutionStep from './ResolutionModal/ResolutionStep';\n\nconst ResolutionEditButton = ({\n  remediation,\n  issue,\n  onResolutionSelected,\n  getResolutions,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const resolutionStep = useRef();\n\n  const onModalClose = (result) => {\n    setIsOpen(false);\n    const resolution = resolutionStep.current?.getSelectedResolution();\n\n    if (result && issue.resolution.id !== resolution.id) {\n      onResolutionSelected(remediation.id, issue.id, resolution.id);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setIsOpen(true)}>Edit</a>\n      {isOpen && (\n        <Modal\n          variant={ModalVariant.medium}\n          className=\"rem-c-resolution-modal\"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          title=\"Edit resolution\"\n          actions={[\n            <Button key=\"confirm\" variant=\"primary\" onClick={onModalClose}>\n              Save\n            </Button>,\n            <Button\n              key=\"cancel\"\n              variant=\"secondary\"\n              onClick={() => setIsOpen(false)}\n            >\n              Cancel\n            </Button>,\n          ]}\n        >\n          <ResolutionStep\n            key=\"ResolutionStep\"\n            issue={issue}\n            ref={resolutionStep}\n            getResolutions={getResolutions}\n          />\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nResolutionEditButton.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  onResolutionSelected: PropTypes.func.isRequired,\n  getResolutions: PropTypes.func.isRequired,\n};\n\nexport default ResolutionEditButton;\n","import {\n  refreshRemediation,\n  patchRemediationIssue,\n  getResolutions,\n} from '../actions';\nimport { connect } from 'react-redux';\n\nimport ResolutionEditButton from '../components/ResolutionEditButton';\n\nexport const ConnectResolutionEditButton = connect(\n  (f) => f,\n  (dispatch) => ({\n    onResolutionSelected: async (remediation, issue, resolution) => {\n      await dispatch(patchRemediationIssue(remediation, issue, resolution));\n      dispatch(refreshRemediation(remediation));\n    },\n    getResolutions: (ruleId) => dispatch(getResolutions(ruleId)),\n  })\n)(ResolutionEditButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\n\nimport './DeleteButton.scss';\n\nclass DeleteButton extends Component {\n  state = {\n    dialogOpen: false,\n  };\n\n  onButtonClicked = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  onDialogClose = (result) => {\n    this.setState({ dialogOpen: false });\n    result && this.props.onDelete();\n  };\n\n  render() {\n    const { dialogOpen } = this.state;\n\n    return (\n      <React.Fragment>\n        <Button\n          onClick={this.onButtonClicked}\n          isDisabled={this.props.isDisabled}\n          variant={this.props.variant}\n        >\n          {this.props.label}\n        </Button>\n        {dialogOpen && (\n          <ConfirmationDialog\n            title={this.props.dialogTitle}\n            confirmText={this.props.dialogConfirmationText}\n            text={this.props.dialogMessage}\n            onClose={this.onDialogClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nDeleteButton.propTypes = {\n  label: PropTypes.string,\n  dialogTitle: PropTypes.string,\n  dialogMessage: PropTypes.string,\n  dialogConfirmationText: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  onDelete: PropTypes.func.isRequired,\n  variant: PropTypes.string,\n};\n\nDeleteButton.defaultProps = {\n  label: 'Delete',\n  variant: 'link',\n};\n\nexport default DeleteButton;\n","import { deleteRemediation, loadRemediationStatus } from '../actions';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { loadRemediations, deleteRemediationIssue } from '../actions';\nimport { isBeta } from '../config';\n\nimport DeleteButton from '../components/DeleteButton';\n\nexport const DeleteRemediationsButton = withRouter(\n  connect(\n    (state, { remediations }) => ({\n      dialogMessage: `You will not be able to recover ${\n        remediations.length > 1 ? 'these remediations' : 'this remediation'\n      }`,\n    }),\n    (dispatch, { remediations }) => ({\n      onDelete: async () => {\n        await Promise.all(\n          remediations.map((r) => dispatch(deleteRemediation(r)))\n        );\n        dispatch(loadRemediations());\n      },\n    })\n  )(DeleteButton)\n);\n\nexport const DeleteActionsButton = withRouter(\n  connect(\n    (state, { issues }) => ({\n      label: `Remove action${issues.length > 1 ? 's' : ''}`,\n      dialogTitle: `Remove action${issues.length > 1 ? 's' : ''}`,\n      dialogConfirmationText: `Remove action${issues.length > 1 ? 's' : ''}`,\n    }),\n    (dispatch, { remediation, issues, afterDelete }) => ({\n      onDelete: async () => {\n        await Promise.all(\n          issues.map((issueId) =>\n            dispatch(deleteRemediationIssue(remediation.id, issueId))\n          )\n        );\n        if (isBeta) {\n          dispatch(loadRemediationStatus(remediation.id));\n        }\n\n        afterDelete();\n      },\n    })\n  )(DeleteButton)\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { getSystemName } from '../Utilities/model';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\n\nfunction RemediationDetailsSystemDropdown({\n  remediation,\n  issue,\n  system,\n  onDelete,\n  setActiveAlert,\n}) {\n  const [open, setOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`This playbook will not address ${\n          issue.description\n        } on ${getSystemName(system)}`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n          setActiveAlert({\n            key: generateUniqueId(),\n            title: `Removed systems from ${remediation.name}`,\n            description: '',\n            variant: 'success',\n          });\n        }}\n      />\n\n      <Dropdown\n        onSelect={(f) => f}\n        toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n        isOpen={open}\n        position={DropdownPosition.right}\n        isPlain\n      >\n        <Button onClick={() => setDeleteDialogOpen(true)} variant=\"link\">\n          Remove system\n        </Button>\n      </Dropdown>\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsSystemDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  issue: PropTypes.object.isRequired,\n  system: PropTypes.object.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nconst connected = withRouter(\n  connect(null, (dispatch) => ({\n    onDelete: (id, issue, system) =>\n      dispatch(deleteRemediationIssueSystem(id, issue, system)),\n  }))(RemediationDetailsSystemDropdown)\n);\n\nexport default connected;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconInline.scss';\n\nexport const IconInline = ({ icon, text }) => {\n  return (\n    <div className=\"rem-c-icon-inline\">\n      {icon}\n      <span className=\"rem-c-icon-inline__text\">{text}</span>\n    </div>\n  );\n};\n\nIconInline.propTypes = {\n  icon: PropTypes.node.isRequired,\n  text: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { CheckIcon, TimesIcon } from '@patternfly/react-icons';\n\nimport PropTypes from 'prop-types';\nimport {\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n  ToolbarGroup,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport {\n  ConditionalFilter,\n  conditionalFilterType,\n} from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { inventoryUrlBuilder } from '../../Utilities/urls';\nimport reducers from '../../store/reducers';\nimport RemediationDetailsSystemDropdown from '../RemediationDetailsSystemDropdown';\nimport ConfirmationDialog from '../ConfirmationDialog';\nimport { getSystemName } from '../../Utilities/model';\nimport { IconInline } from '../Layouts/IconInline';\n\nexport const SystemsStatusModal = ({\n  isOpen,\n  onClose,\n  issue,\n  remediation,\n  onDelete,\n}) => {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [system, setSystem] = useState({});\n  const [systemStatuses, setSystemStatuses] = useState({});\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [filterText, setFilterText] = useState('');\n  const inventory = useRef(null);\n  const { current: urlBuilder } = useRef(inventoryUrlBuilder(issue));\n\n  useEffect(() => {\n    const statuses = {};\n    issue.systems.map((system) => {\n      statuses[system.id] =\n        system.resolved === true ? (\n          <IconInline icon={<CheckIcon />} text=\"Remediated\" />\n        ) : (\n          <IconInline icon={<TimesIcon />} text=\"Not remediated\" />\n        );\n    });\n    setSystemStatuses(statuses);\n  }, []);\n\n  // eslint-disable-next-line react/display-name\n  const detailDropdown = (remediation, issue) => (system) =>\n    (\n      <RemediationDetailsSystemDropdown\n        remediation={remediation}\n        issue={issue}\n        system={system}\n      />\n    );\n\n  const generateStatus = (id) => {\n    return systemStatuses[id];\n  };\n\n  const onRefresh = (options) => {\n    if (inventory && inventory.current) {\n      setPage(options.page);\n      setPageSize(options.per_page);\n      inventory.current.onRefreshData(options);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Modal\n        className=\"remediations\"\n        variant={ModalVariant.large}\n        title={`System${issue.systems.length > 1 ? 's' : ''} for action ${\n          issue.description\n        }`}\n        isOpen={isOpen}\n        onClose={onClose}\n        isFooterLeftAligned\n      >\n        <div className=\"rem-c-toolbar__filter\">\n          <InventoryTable\n            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) =>\n              getRegistry().register({\n                ...mergeWithEntities(\n                  reducers.inventoryEntitiesReducer({\n                    INVENTORY_ACTION_TYPES,\n                    detailDropdown: detailDropdown(remediation, issue),\n                    urlBuilder,\n                    generateStatus,\n                  })()\n                ),\n              })\n            }\n            ref={inventory}\n            items={orderBy(\n              issue.systems.filter((s) =>\n                getSystemName(s).includes(filterText)\n              ),\n              [(s) => getSystemName(s), (s) => s.id]\n            )}\n            onRefresh={onRefresh}\n            page={page}\n            total={issue.systems.length}\n            perPage={pageSize}\n            hasCheckbox={false}\n            actions={[\n              {\n                title: ' Remove system',\n                onClick: (event, rowId, rowData) => {\n                  setSystem(rowData);\n                  setDeleteDialogOpen(true);\n                },\n              },\n            ]}\n          >\n            <TableToolbar>\n              <ToolbarGroup>\n                <ToolbarItem>\n                  <ConditionalFilter\n                    items={[\n                      {\n                        value: 'display_name',\n                        label: 'Name',\n                        filterValues: {\n                          placeholder: 'Search by name',\n                          type: conditionalFilterType.text,\n                          value: filterText,\n                          onChange: (e, selected) => setFilterText(selected),\n                        },\n                      },\n                    ]}\n                  />\n                </ToolbarItem>\n              </ToolbarGroup>\n            </TableToolbar>\n          </InventoryTable>\n        </div>\n      </Modal>\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        text={`Removing the system ${getSystemName(system)} from the action ${\n          issue.description\n        }\n                    will remove this system’s remediation from the playbook.`}\n        onClose={(value) => {\n          setDeleteDialogOpen(false);\n          value && onDelete(remediation.id, issue.id, system.id);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nSystemsStatusModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  issue: PropTypes.object,\n  remediation: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRemediationIssueSystem } from '../actions';\nimport { SystemsStatusModal } from './Modals/SystemsStatusModal';\nimport './SystemForActionButton.scss';\n\nexport const SystemForActionButton = ({ issue, remediation, title }) => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <a onClick={() => setOpen(true)}>{title}</a>\n      <SystemsStatusModal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        issue={issue}\n        remediation={remediation}\n        onDelete={(id, issue, system) =>\n          dispatch(deleteRemediationIssueSystem(id, issue, system))\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nSystemForActionButton.propTypes = {\n  issue: PropTypes.object.isRequired,\n  remediation: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","const debug = localStorage.getItem('remediations:debug') === 'true';\n\nexport const pagination = debug\n  ? {\n      perPageOptions: [1, 2, 3, 4, 5, 10, 15, 20, 25, 50, 100, 200].map(\n        (i) => ({ title: `${i}`, value: i })\n      ),\n    }\n  : {};\n","import React from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { appUrl } from '../../Utilities/urls';\n\nexport const EmptyActions = (filtered) => {\n  return (\n    <Bullseye className=\"pf-u-pt-2xl\">\n      <EmptyState>\n        {filtered.filtered === true ? (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            No actions found\n          </Title>\n        ) : (\n          <Title size=\"lg\" headingLevel=\"h5\">\n            This playbook is empty\n          </Title>\n        )}\n        <EmptyStateBody>\n          To add an action, select issues identified in\n          <br />\n          <a href={appUrl('advisor').toString()}>Recommendations</a>,&nbsp;\n          <a href={appUrl('compliance').toString()}>Compliance</a> or&nbsp;\n          <a href={appUrl('vulnerabilities').toString()}>Vulnerability</a>&nbsp;\n          and select\n          <br />\n          <strong>Remediate with Ansible.</strong>\n        </EmptyStateBody>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyActions.propTypes = {\n  filtered: PropTypes.bool.isRequired,\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport flatMap from 'lodash/flatMap';\nimport orderBy from 'lodash/orderBy';\n\nimport { Pagination } from '@patternfly/react-core';\n\nimport {\n  sortable,\n  TableHeader,\n  Table,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\n\nimport { getIssueApplication, includesIgnoreCase } from '../Utilities/model';\nimport { buildIssueUrl } from '../Utilities/urls';\nimport './RemediationTable.scss';\n\nimport { ConnectResolutionEditButton } from '../containers/ConnectedComponents';\nimport { DeleteActionsButton } from '../containers/DeleteButtons';\nimport { SystemForActionButton } from './SystemForActionButton';\n\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport * as debug from '../Utilities/debug';\n\nimport './RemediationDetailsTable.scss';\nimport { PermissionContext } from '../App';\nimport { EmptyActions } from './EmptyStates/EmptyActions';\n\nfunction resolutionDescriptionCell(remediation, issue) {\n  const url = buildIssueUrl(issue.id);\n\n  if (issue.resolutions_available <= 1) {\n    return url ? (\n      <React.Fragment>\n        <span>\n          <a href={url}>{issue.description}</a>\n          <br />\n          {issue.resolution.description}\n        </span>\n      </React.Fragment>\n    ) : (\n      issue.resolution.description\n    );\n  }\n\n  return url ? (\n    <React.Fragment>\n      <span>\n        <a href={url}>{issue.description}</a>\n        <br />\n        {issue.resolution.description}\n        <br />\n        <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n      </span>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      {issue.resolution.description}\n      <br />\n      <ConnectResolutionEditButton issue={issue} remediation={remediation} />\n    </React.Fragment>\n  );\n}\n\nfunction needsRebootCell(needsReboot) {\n  return <span>{needsReboot ? 'Required' : 'Not required'}</span>;\n}\n\nfunction systemsForAction(issue, remediation, title) {\n  return (\n    <SystemForActionButton\n      key={issue.id}\n      remediation={remediation}\n      issue={issue}\n      title={title}\n    />\n  );\n}\n\nfunction getResolvedSystems(issue) {\n  let count = 0;\n  issue.systems.map((system) => {\n    if (system.resolved) {\n      count++;\n    }\n  });\n  return count;\n}\n\nconst SORTING_ITERATEES = [\n  null, // checkboxes\n  (i) => i.description,\n  null, // resolution steps\n  (i) => i.resolution.needs_reboot,\n  (i) => i.systems.length,\n  (i) => getIssueApplication(i),\n];\n\nconst buildRow = (remediation) => (issue) => {\n  const row = [\n    {\n      isOpen: false,\n      id: issue.id,\n      cells: [\n        {\n          title: resolutionDescriptionCell(remediation, issue),\n        },\n        {\n          title: needsRebootCell(issue.resolution.needs_reboot),\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${issue.systems.length}`\n          ),\n        },\n        {\n          title: getIssueApplication(issue),\n          props: { className: 'rem-m-nowrap' },\n        },\n        {\n          title: systemsForAction(\n            issue,\n            remediation,\n            `${getResolvedSystems(issue)}/${issue.systems.length} remediated`\n          ),\n        },\n      ],\n    },\n  ];\n\n  return row;\n};\n\nfunction RemediationDetailsTable(props) {\n  const pagination = usePagination();\n  const sorter = useSorter(1, 'asc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const { setActiveAlert } = props;\n  const permission = useContext(PermissionContext);\n  const [filterText, setFilterText] = useState('');\n  const [prevRemediationsCount, setPrevRemediationsCount] = useState(0); // eslint-disable-line\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  sorter.onChange(pagination.reset);\n  filter.onChange(pagination.reset);\n\n  const filtered = props.remediation.issues.filter((i) =>\n    includesIgnoreCase(i.description, filter.value.trim())\n  );\n  const sorted = orderBy(\n    filtered,\n    [SORTING_ITERATEES[sorter.sortBy]],\n    [sorter.sortDir]\n  );\n  const paged = sorted.slice(\n    pagination.offset,\n    pagination.offset + pagination.pageSize\n  );\n\n  const rows = flatMap(paged, buildRow(props.remediation));\n\n  selector.register(rows);\n\n  const selectedIds = selector.getSelectedIds();\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Action', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"test\">\n      <PrimaryToolbar\n        filterConfig={{\n          items: [\n            {\n              label: 'Search actions',\n              type: 'text',\n              filterValues: {\n                id: 'filter-by-string',\n                key: 'filter-by-string',\n                placeholder: 'Search',\n                value: filterText,\n                onChange: (_e, value) => {\n                  setFilterText(value);\n                },\n              },\n            },\n          ],\n        }}\n        bulkSelect={{\n          items: [\n            {\n              title: 'Select all',\n              onClick: (e) => selector.props.onSelect(e, true, -1),\n            },\n          ],\n          checked:\n            selectedIds.length && filtered.length > selectedIds.length\n              ? null\n              : selectedIds.length,\n          count: selectedIds.length,\n          onSelect: (isSelected, e) =>\n            selector.props.onSelect(e, isSelected, -1),\n        }}\n        actionsConfig={{\n          actions: [\n            <DeleteActionsButton\n              key={props.remediation.id}\n              variant=\"secondary\"\n              isDisabled={!selectedIds.length}\n              remediation={props.remediation}\n              issues={selectedIds}\n              afterDelete={() => {\n                setActiveAlert({\n                  key: generateUniqueId(),\n                  title: `Removed ${selectedIds.length} actions from ${props.remediation.name}`,\n                  description: '',\n                  variant: 'success',\n                });\n                selector.reset;\n              }}\n            />,\n          ],\n        }}\n        pagination={{ ...pagination.props, itemCount: filtered.length }}\n        activeFiltersConfig={activeFiltersConfig}\n      />\n      {rows.length > 0 ? (\n        <Table\n          variant={TableVariant.compact}\n          aria-label=\"Actions\"\n          canSelectAll={false}\n          className=\"ins-c-remediation-details-table\"\n          cells={[\n            {\n              title: 'Actions',\n              transforms: [sortable],\n            },\n            {\n              title: 'Reboot required',\n              transforms: [sortable],\n            },\n            {\n              title: 'Systems',\n              transforms: [sortable],\n            },\n            {\n              title: 'Type',\n              transforms: [sortable],\n            },\n            {\n              title: 'Status',\n              transforms: [sortable],\n            },\n          ]}\n          rows={rows}\n          {...sorter.props}\n          {...(permission.permissions.write && { ...selector.props })}\n        >\n          <TableHeader />\n          <TableBody {...selector.tbodyProps} />\n        </Table>\n      ) : filter.value ? (\n        <EmptyActions filtered={true} />\n      ) : (\n        <EmptyActions filtered={false} />\n      )}\n      {rows.length > 0 && (\n        <TableToolbar isFooter>\n          <Pagination\n            variant=\"bottom\"\n            dropDirection=\"up\"\n            itemCount={filtered.length}\n            {...pagination.props}\n            {...debug.pagination}\n          />\n        </TableToolbar>\n      )}\n    </div>\n  );\n}\n\nRemediationDetailsTable.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  status: PropTypes.object.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nexport default RemediationDetailsTable;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  expandable,\n} from '@patternfly/react-table';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nimport { StatusSummary, normalizeStatus } from './statusHelper';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationActivityTable.scss';\n\nconst RemediationActivityTable = ({ remediation, playbookRuns }) => {\n  const [rows, setRows] = useState([]);\n  const permission = useContext(PermissionContext);\n\n  const generateRows = (playbookRuns) => {\n    return playbookRuns.reduce(\n      (acc, playbooks, i) => [\n        ...acc,\n        {\n          isOpen: false,\n          cells: [\n            {\n              title: (\n                <Link to={`/${remediation.id}/${playbooks.id}`}>\n                  <DateFormat type=\"exact\" date={playbooks.created_at} />\n                </Link>\n              ),\n              cellFormatters: [expandable],\n            },\n            `${playbooks.created_by.first_name} ${playbooks.created_by.last_name}`,\n            {\n              title: (\n                <StatusSummary\n                  executorStatus={normalizeStatus(playbooks.status)}\n                  counts={playbooks.executors.reduce(\n                    (acc, ex) => ({\n                      pending: acc.pending + ex.counts.pending,\n                      running: acc.running + ex.counts.running,\n                      success: acc.success + ex.counts.success,\n                      failure: acc.failure + ex.counts.failure,\n                      canceled: acc.canceled + ex.counts.canceled,\n                      acked: acc.acked + ex.counts.acked,\n                    }),\n                    {\n                      pending: 0,\n                      running: 0,\n                      success: 0,\n                      failure: 0,\n                      canceled: 0,\n                      acked: 0,\n                    }\n                  )}\n                  hasCancel\n                  remediationName={remediation.name}\n                  remediationId={remediation.id}\n                  playbookId={playbooks.id}\n                  permission={permission}\n                />\n              ),\n            },\n          ],\n        },\n        {\n          parent: 2 * i,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <Table\n                  aria-label=\"Compact expandable table\"\n                  cells={['Connection', 'Systems', 'Playbook run status']}\n                  rows={playbooks.executors.map((e) => ({\n                    cells: [\n                      {\n                        title: (\n                          <Link\n                            to={`/${remediation.id}/${playbooks.id}/${e.executor_id}`}\n                          >\n                            {e.executor_name}\n                          </Link>\n                        ),\n                      },\n                      e.system_count,\n                      {\n                        title: (\n                          <StatusSummary\n                            executorStatus={normalizeStatus(e.status)}\n                            counts={e.counts}\n                            permission={permission}\n                          />\n                        ),\n                      },\n                    ],\n                  }))}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              ),\n            },\n          ],\n        },\n      ],\n      []\n    );\n  };\n\n  useEffect(() => {\n    if (playbookRuns && playbookRuns.length) {\n      setRows(() => generateRows(playbookRuns));\n    }\n  }, [playbookRuns]);\n\n  const handleOnCollapse = (event, rowId, isOpen) => {\n    const collapseRows = [...rows];\n    collapseRows[rowId] = { ...collapseRows[rowId], isOpen };\n    setRows(collapseRows);\n  };\n\n  const columns = ['Run on', 'Run by', 'Status'];\n\n  return (\n    <Table\n      className=\"rem-c-activity-table\"\n      aria-label=\"Collapsible table\"\n      onCollapse={handleOnCollapse}\n      rows={rows}\n      cells={columns}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nRemediationActivityTable.propTypes = {\n  remediation: PropTypes.object,\n  playbookRuns: PropTypes.array,\n};\n\nexport default RemediationActivityTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  FormGroup,\n  Modal,\n  TextInput,\n  ModalVariant,\n} from '@patternfly/react-core';\n\nexport default function TextInputDialog(props) {\n  const [value, setValue] = useState(props.value || '');\n  const [valid, setValid] = useState(true);\n  const { title, onCancel, onSubmit, ariaLabel, className } = props;\n\n  function onChange(value) {\n    setValue(value);\n\n    if (props.pattern) {\n      setValid(props.pattern.test(value));\n    }\n  }\n\n  return (\n    <Modal\n      title={title}\n      isOpen={true}\n      onClose={(event) => onCancel(event)}\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onSubmit(value)}\n          isDisabled={!valid}\n          ouiaId=\"save\"\n        >\n          Save\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"secondary\"\n          onClick={onCancel}\n          ouiaId=\"cancel\"\n        >\n          Cancel\n        </Button>,\n      ]}\n      variant={ModalVariant.small}\n      className={className}\n    >\n      <FormGroup\n        fieldId=\"remediation-name\"\n        helperTextInvalid=\"Playbook name has to contain alphanumeric characters\"\n        isValid={valid}\n      >\n        <TextInput\n          value={value}\n          type=\"text\"\n          onChange={onChange}\n          aria-label={ariaLabel || 'input text'}\n          autoFocus\n          isValid={valid}\n        />\n      </FormGroup>\n    </Modal>\n  );\n}\n\nTextInputDialog.propTypes = {\n  title: PropTypes.string.isRequired,\n  onCancel: PropTypes.func,\n  onSubmit: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n  pattern: PropTypes.instanceOf(RegExp),\n};\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  Button,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport TextInputDialog from './Dialogs/TextInputDialog';\nimport ConfirmationDialog from './ConfirmationDialog';\nimport { generateUniqueId } from './Alerts/PlaybookToastAlerts';\nimport { deleteRemediation, patchRemediation } from '../actions';\n\nimport { PermissionContext } from '../App';\n\nconst playbookNamePattern = /^$|^.*[\\w\\d]+.*$/;\nconst EMPTY_NAME = 'Unnamed Playbook';\n\nfunction RemediationDetailsDropdown({\n  remediation,\n  onRename,\n  onDelete,\n  setActiveAlert,\n}) {\n  const [open, setOpen] = useState(false);\n  const [renameDialogOpen, setRenameDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const permission = useContext(PermissionContext);\n\n  return (\n    <React.Fragment>\n      {renameDialogOpen && (\n        <TextInputDialog\n          title=\"Edit playbook name\"\n          ariaLabel=\"Playbook name\"\n          value={remediation.name}\n          onCancel={() => setRenameDialogOpen(false)}\n          onSubmit={(name) => {\n            setRenameDialogOpen(false);\n            onRename(remediation.id, name);\n            setActiveAlert({\n              key: generateUniqueId(),\n              title: `Updated playbook name to ${name}`,\n              description: '',\n              variant: 'success',\n            });\n          }}\n          pattern={playbookNamePattern}\n        />\n      )}\n\n      <ConfirmationDialog\n        isOpen={deleteDialogOpen}\n        title=\"Remove playbook?\"\n        text=\"You will not be able to recover this Playbook\"\n        confirmText=\"Remove playbook\"\n        onClose={(confirm) => {\n          setDeleteDialogOpen(false);\n          if (confirm) {\n            onDelete(remediation.id);\n            setActiveAlert({\n              key: generateUniqueId(),\n              title: `Deleted playbook ${remediation.name}`,\n              variant: 'success',\n            });\n          }\n        }}\n      />\n\n      {permission.permissions.write && (\n        <Dropdown\n          onSelect={(f) => f}\n          toggle={<KebabToggle onToggle={() => setOpen((value) => !value)} />}\n          isOpen={open}\n          position={DropdownPosition.right}\n          isPlain\n        >\n          <Button onClick={() => setRenameDialogOpen(true)} variant=\"link\">\n            Rename\n          </Button>\n          <Button\n            className=\" rem-c-button__danger-link\"\n            onClick={() => setDeleteDialogOpen(true)}\n            variant=\"link\"\n          >\n            Delete\n          </Button>\n        </Dropdown>\n      )}\n    </React.Fragment>\n  );\n}\n\nRemediationDetailsDropdown.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  onRename: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  setActiveAlert: PropTypes.func,\n};\n\nconst connected = withRouter(\n  connect(null, (dispatch, { history }) => ({\n    onRename: (id, name) => {\n      if (!name) {\n        name = EMPTY_NAME;\n      }\n\n      dispatch(patchRemediation(id, { name }));\n    },\n    onDelete: async (id) => {\n      await dispatch(deleteRemediation(id));\n      history.push('/');\n    },\n  }))(RemediationDetailsDropdown)\n);\n\nexport default connected;\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport './ExecuteButton.scss';\nimport './Status.scss';\n\nconst ExecuteButton = ({\n  isLoading,\n  isDisabled,\n  disabledStateText,\n  data,\n  getConnectionStatus,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  remediationStatus,\n  setEtag,\n  setActiveAlert,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n\n  const isEnabled = () =>\n    true || localStorage.getItem('remediations:fifi:debug') === 'true';\n\n  useEffect(() => {\n    if (remediationStatus === 'changed') {\n      getConnectionStatus(remediationId);\n      setShowRefreshMessage(true);\n    } else if (remediationStatus === 'fulfilled') {\n      setOpen(false);\n    }\n  }, [remediationStatus]);\n\n  const buttonWithTooltip = () => {\n    return isDisabled ? (\n      <Tooltip content={disabledStateText} position=\"auto\">\n        <Button isAriaDisabled>Execute playbook</Button>\n      </Tooltip>\n    ) : (\n      <Button\n        onClick={() => {\n          setOpen(true);\n          getConnectionStatus(remediationId);\n        }}\n      >\n        Execute playbook\n      </Button>\n    );\n  };\n\n  return isEnabled() ? (\n    <React.Fragment>\n      {buttonWithTooltip()}\n      {open && (\n        <ExecuteModal\n          isOpen={open}\n          onClose={() => {\n            setShowRefreshMessage(false);\n            setOpen(false);\n          }}\n          showRefresh={showRefreshMessage}\n          remediationId={remediationId}\n          remediationName={remediationName}\n          data={data}\n          etag={etag}\n          isLoading={isLoading}\n          issueCount={issueCount}\n          runRemediation={runRemediation}\n          setEtag={setEtag}\n          setActiveAlert={setActiveAlert}\n        />\n      )}\n    </React.Fragment>\n  ) : null;\n};\n\nExecuteButton.propTypes = {\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  getConnectionStatus: PropTypes.func,\n  runRemediation: PropTypes.func,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  remediationStatus: PropTypes.string,\n  issueCount: PropTypes.number,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  disabledStateText: PropTypes.string,\n  setActiveAlert: PropTypes.func,\n};\n\nExecuteButton.defaultProps = {\n  data: [],\n  isDisabled: false,\n};\n\nexport default ExecuteButton;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  getEndpoint,\n  checkExecutable,\n} from '../actions';\n\nimport ExecuteButton from '../components/ExecuteButton';\n\nexport const ExecutePlaybookButton = withRouter(\n  connect(\n    ({\n      connectionStatus: { data, status, etag },\n      selectedRemediation,\n      runRemediation,\n      sources,\n      executable,\n    }) => ({\n      data,\n      isLoading: status !== 'fulfilled',\n      issueCount: selectedRemediation.remediation.issues.length,\n      etag,\n      remediationStatus: runRemediation.status,\n      sources,\n      executable,\n    }),\n    (dispatch) => ({\n      getConnectionStatus: (id) => {\n        dispatch(getConnectionStatus(id));\n      },\n      runRemediation: (id, etag, exclude) => {\n        dispatch(runRemediation(id, etag, exclude)).then(() =>\n          dispatch(getPlaybookRuns(id))\n        );\n      },\n      setEtag: (etag) => {\n        dispatch(setEtag(etag));\n      },\n      getEndpoint: (id) => {\n        dispatch(getEndpoint(id));\n      },\n      checkExecutable: (id) => {\n        dispatch(checkExecutable(id));\n      },\n    })\n  )(ExecuteButton)\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst UpsellBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Put Insights into action\"\n      actionClose={<AlertActionCloseButton onClose={onClose} />}\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Enable push-button remediation across your hybrid cloud environment\n          with Red Hat Smart Management.\n        </StackItem>\n        <StackItem>\n          <a href=\"https://www.redhat.com/en/technologies/management/smart-management\">\n            Learn more\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default UpsellBanner;\n\nUpsellBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nUpsellBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React from 'react';\n\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { CloudIcon } from '@patternfly/react-icons';\n\n// TODO: Fill Learn more link\n\nconst ActivityTabUpsell = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={CloudIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        Get more with Find it Fix it capabilities\n      </Title>\n      <EmptyStateBody>\n        Upgrade to Red Hat Smart Management to remediate all your systems,\n        across regions and geographies directly from Red Hat Insights.\n      </EmptyStateBody>\n      <Button\n        variant=\"link\"\n        component=\"a\"\n        ouiaId=\"learn_more\"\n        href=\"https://www.redhat.com/en/technologies/management/smart-management\"\n      >\n        Learn more\n      </Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default ActivityTabUpsell;\n","import React, { Fragment } from 'react';\nimport { Toolbar, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { Button, InputGroup, TextInput } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nconst SkeletonTableToolbar = () => {\n  const items = (\n    <Fragment>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <DropdownToggle\n              isDisabled\n              splitButtonItems={[\n                <DropdownToggleCheckbox\n                  id=\"skeleton-dropdown\"\n                  key=\"skeleton-dropdown\"\n                  aria-label=\"Loading Select all\"\n                />,\n              ]}\n              id=\"skeleton-dropdown-toggle\"\n            />\n          }\n        />\n      </ToolbarItem>\n      <ToolbarItem>\n        <InputGroup>\n          <TextInput\n            value=\"Search\"\n            isDisabled\n            name=\"skeleton-search\"\n            id=\"skeleton-search\"\n            type=\"search\"\n            aria-label=\"search loading\"\n          />\n          <Button\n            isDisabled\n            variant=\"control\"\n            aria-label=\"search button for search input\"\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button isDisabled variant=\"primary\">\n          Remove action\n        </Button>\n      </ToolbarItem>\n    </Fragment>\n  );\n\n  return (\n    <Toolbar id=\"skeleton-toolbar\">\n      <ToolbarContent> {items} </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport default SkeletonTableToolbar;\n","import React from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst SkeletonTabs = () => {\n  return (\n    <Tabs activeKey={0} className=\"ins-s-tabs\">\n      <Tab eventKey={0} title={<TabTitleText>Actions</TabTitleText>} />\n      <Tab eventKey={1} title={<TabTitleText>Systems</TabTitleText>} />\n      <Tab eventKey={2} title={<TabTitleText>Activity</TabTitleText>} />\n    </Tabs>\n  );\n};\n\nexport default SkeletonTabs;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport SkeletonTable from './SkeletonTable';\nimport SkeletonTableToolbar from './SkeletonTableToolbar';\nimport SkeletonTabs from './SkeletonTabs';\n\nimport {\n  Dropdown,\n  KebabToggle,\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Button,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\n\nimport DescriptionList from '../components/Layouts/DescriptionList';\n\nimport './RemediationDetailsSkeleton.scss';\n\nconst RemediationDetailsSkeleton = () => {\n  return (\n    <React.Fragment>\n      <PageHeader className=\"rem-c-page-details__header\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to=\"/\"> Remediations </Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <Skeleton size=\"lg\" />\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Level className=\"rem-l-level\">\n          <LevelItem>\n            <PageHeaderTitle\n              className=\"rem-s-page-header\"\n              title={\n                <React.Fragment>\n                  <Skeleton size=\"md\" />\n                </React.Fragment>\n              }\n            />\n          </LevelItem>\n          <LevelItem>\n            <Split hasGutter>\n              <SplitItem>\n                <Button isDisabled variant=\"link\">\n                  Download playbook\n                </Button>\n              </SplitItem>\n              <SplitItem>\n                <Dropdown\n                  toggle={<KebabToggle isDisabled={true} />}\n                  isOpen={false}\n                  isPlain\n                />\n              </SplitItem>\n            </Split>\n          </LevelItem>\n        </Level>\n        <RemediationSummarySkeleton />\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <StackItem className=\"ins-c-playbookSummary__tabs\">\n            <SkeletonTabs />\n            <SkeletonTableToolbar />\n            <SkeletonTable />\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default RemediationDetailsSkeleton;\n\nconst RemediationSummarySkeleton = () => {\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{ x: 'Resolved', y: 1 }}\n          labels={({ datum }) => (datum.x ? `${datum.x}: ${datum.y}%` : null)}\n          title={'Loading'}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Latest activity\">\n                      <Skeleton size=\"md\" />\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>\n            <Flex>\n              <FlexItem spacer={{ default: 'spacer-lg' }}>\n                <DescriptionList title=\"Autoreboot\">\n                  <Skeleton size=\"md\" />\n                </DescriptionList>\n              </FlexItem>\n            </Flex>\n          </StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n","import React from 'react';\n\nimport { EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\n\nimport './EmptyActivityTable.scss';\n\nconst EmptyActivityTable = () => (\n  <Table\n    aria-label=\"No activity\"\n    cells={['Run on', 'Run by', 'Status']}\n    ouiaId=\"activity-table\"\n    rows={[\n      {\n        cells: [\n          {\n            title: (\n              <EmptyState className=\"rem-c-activity-table__empty\">\n                <Title headingLevel=\"h5\" size=\"lg\">\n                  No activity\n                </Title>\n                <EmptyStateBody>\n                  Execute this playbook to see a history and summary of the\n                  activity.\n                </EmptyStateBody>\n              </EmptyState>\n            ),\n            props: { colSpan: 3 },\n          },\n        ],\n      },\n    ]}\n  >\n    <TableHeader />\n    <TableBody />\n  </Table>\n);\n\nexport default EmptyActivityTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ChartDonutUtilization, ChartLabel } from '@patternfly/react-charts';\nimport {\n  CheckCircleIcon,\n  OffIcon,\n  ExclamationTriangleIcon,\n} from '@patternfly/react-icons';\nimport DescriptionList from '../components/Layouts/DescriptionList';\nimport classnames from 'classnames';\nimport { StatusSummary } from '../components/statusHelper';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport './RemediationSummary.scss';\n\nexport const RemediationSummary = ({\n  remediation,\n  playbookRuns,\n  switchAutoReboot,\n  context,\n}) => {\n  const handleRebootChange = (autoReboot) => {\n    switchAutoReboot(remediation.id, autoReboot);\n  };\n\n  const generateNumIssuesReboot = () => {\n    let count = 0;\n    for (const issue of remediation.issues) {\n      if (issue.resolution.needs_reboot) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  const generateNumRebootString = (num) => {\n    return `${num} issue${num === 1 ? '' : 's'} require${\n      num === 1 ? 's' : ''\n    } reboot to remediate`;\n  };\n\n  const pluralize = (number, str) =>\n    number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\n  const rebootEnabled = () => {\n    return (\n      <div>\n        <CheckCircleIcon className=\"rem-c-success\" />\n        <b className=\"ins-c-remediation-summary__reboot--enabled\"> Enabled </b>\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn off\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const rebootDisabled = (required) => {\n    return (\n      <div>\n        <OffIcon />\n        <b\n          className={`ins-c-remediation-summary__reboot--disabled${\n            required ? '--warning' : ''\n          }`}\n        >\n          Off\n        </b>\n        {required && (\n          <React.Fragment>\n            <ExclamationTriangleIcon className=\"ins-c-remediation-summary__reboot--required--icon\" />\n            <b className=\"ins-c-remediation-summary__reboot--required\">\n              {generateNumRebootString(generateNumIssuesReboot())}\n            </b>\n          </React.Fragment>\n        )}\n        {context.permissions.write && (\n          <Button\n            variant=\"link\"\n            onClick={() => handleRebootChange(!remediation.auto_reboot)}\n          >\n            Turn on\n          </Button>\n        )}\n      </div>\n    );\n  };\n\n  const generateAutoRebootStatus = (status, needsReboot) => {\n    return status ? rebootEnabled() : rebootDisabled(needsReboot);\n  };\n\n  const renderAutoReboot = (remediation) => {\n    return (\n      <DescriptionList\n        className=\"rem-c-playbookSummary__settings\"\n        title=\"Autoreboot\"\n      >\n        <Flex>\n          <FlexItem\n            className={classnames(\n              'ins-c-reboot-status',\n              {\n                'ins-c-reboot-status__enabled':\n                  remediation.auto_reboot && remediation.needs_reboot,\n              },\n              { 'ins-c-reboot-status__disabled': !remediation.auto_reboot }\n            )}\n            spacer={{ default: 'spacer-xl' }}\n          >\n            {generateAutoRebootStatus(\n              remediation.auto_reboot,\n              remediation.needs_reboot\n            )}\n          </FlexItem>\n        </Flex>\n      </DescriptionList>\n    );\n  };\n\n  const renderLatestActivity = (playbookRuns) => {\n    if (playbookRuns.length) {\n      const mostRecent = playbookRuns[0];\n      return (\n        <FlexItem spacer={{ default: 'spacer-xl' }}>\n          <DescriptionList\n            needsPointer\n            className=\"rem-c-description-list-latest-activity\"\n            title=\"Latest activity\"\n          >\n            <StatusSummary\n              executorStatus={mostRecent.status}\n              counts={mostRecent.executors.reduce(\n                (acc, ex) => ({\n                  pending: acc.pending + ex.counts.pending,\n                  running: acc.running + ex.counts.running,\n                  success: acc.success + ex.counts.success,\n                  failure: acc.failure + ex.counts.failure,\n                  canceled: acc.canceled + ex.counts.canceled,\n                  acked: acc.acked + ex.counts.acked,\n                }),\n                {\n                  pending: 0,\n                  running: 0,\n                  success: 0,\n                  failure: 0,\n                  canceled: 0,\n                  acked: 0,\n                }\n              )}\n              permission={{}}\n            />\n            <span className=\"rem-c-description-list-latest-activity__date\">\n              <DateFormat type=\"relative\" date={mostRecent.updated_at} />\n            </span>\n            <Link to={`/${mostRecent.remediation_id}/${mostRecent.id}`}>\n              View\n            </Link>\n          </DescriptionList>\n        </FlexItem>\n      );\n    }\n  };\n\n  const getResolvedCount = (issues) => {\n    let count = 0;\n    issues.map((i) => i.systems.every((s) => s.resolved) && count++);\n    return count;\n  };\n\n  const { stats } = remediation;\n\n  const totalSystems = stats.systemsWithReboot + stats.systemsWithoutReboot;\n\n  const resolvedCount = getResolvedCount(remediation.issues);\n\n  return (\n    <Split>\n      <SplitItem>\n        <ChartDonutUtilization\n          ariaDesc=\"Resolved issues count\"\n          ariaTitle=\"Resolved issues chart\"\n          constrainToVisibleArea={true}\n          data={{\n            x: 'Resolved',\n            y: (resolvedCount / remediation.issues.length) * 100,\n          }}\n          labels={({ data }) => (data.x ? `${data.x}: ${data.y}%` : null)}\n          title={`${resolvedCount}/${remediation.issues.length}`}\n          subTitle=\"Issues resolved\"\n          subTitleComponent={<ChartLabel y={102} />}\n          thresholds={[{ value: 100, color: '#3E8635' }]}\n          height={175}\n          width={175}\n          padding={{\n            bottom: 20,\n            left: 0,\n            right: 20,\n            top: 20,\n          }}\n        />\n      </SplitItem>\n      <SplitItem className=\"ins-c-remediation-summary__body\">\n        <Stack hasGutter>\n          <StackItem>\n            <Split>\n              <SplitItem>\n                <Flex>\n                  <FlexItem spacer={{ default: 'spacer-lg' }}>\n                    <DescriptionList title=\"Total systems\">\n                      {pluralize(totalSystems, 'system')}\n                    </DescriptionList>\n                  </FlexItem>\n                </Flex>\n              </SplitItem>\n              <SplitItem>\n                <Flex>\n                  {playbookRuns && renderLatestActivity(playbookRuns)}\n                </Flex>\n              </SplitItem>\n            </Split>\n          </StackItem>\n          <StackItem>{renderAutoReboot(remediation)}</StackItem>\n        </Stack>\n      </SplitItem>\n    </Split>\n  );\n};\n\nRemediationSummary.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  playbookRuns: PropTypes.array,\n  switchAutoReboot: PropTypes.func.isRequired,\n  context: PropTypes.object.isRequired,\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\nimport RemediationDetailsTable from '../components/RemediationDetailsTable';\nimport SystemsTable from '../components/SystemsTable/SystemsTable';\nimport RemediationActivityTable from '../components/RemediationActivityTable';\nimport RemediationDetailsDropdown from '../components/RemediationDetailsDropdown';\nimport { normalizeStatus } from '../components/statusHelper';\nimport { isBeta } from '../config';\nimport { ExecutePlaybookButton } from '../containers/ExecuteButtons';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport UpsellBanner from '../components/Alerts/UpsellBanner';\nimport ActivityTabUpsell from '../components/EmptyStates/ActivityTabUpsell';\nimport DeniedState from '../components/DeniedState';\nimport SkeletonTable from '../skeletons/SkeletonTable';\nimport PlaybookToastAlerts, {\n  generateUniqueId,\n} from '../components/Alerts/PlaybookToastAlerts';\nimport '../components/Status.scss';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\n\nimport {\n  Stack,\n  StackItem,\n  Level,\n  LevelItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Split,\n  SplitItem,\n  Tabs,\n  Tab,\n} from '@patternfly/react-core';\n\nimport RemediationDetailsSkeleton from '../skeletons/RemediationDetailsSkeleton';\nimport EmptyActivityTable from '../components/EmptyStates/EmptyActivityTable';\n\nimport { PermissionContext } from '../App';\n\nimport './RemediationDetails.scss';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport { RemediationSummary } from '../components/RemediationSummary';\n\nconst tabMapper = ['issues', 'systems', 'activity'];\n\nconst RemediationDetails = ({\n  match,\n  location,\n  selectedRemediation,\n  selectedRemediationStatus,\n  history,\n  loadRemediation,\n  loadRemediationStatus,\n  switchAutoReboot,\n  playbookRuns,\n  getPlaybookRuns,\n  checkExecutable,\n  executable,\n}) => {\n  const id = match.params.id;\n  const [upsellBannerVisible, setUpsellBannerVisible] = useState(\n    localStorage.getItem('remediations:bannerStatus') !== 'dismissed'\n  );\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const [activeTabKey, setActiveTabKey] = useState(0);\n  const [activeToastAlert, setActiveToastAlert] = useState({\n    key: '',\n    title: '',\n    description: '',\n    variant: '',\n  });\n\n  const context = useContext(PermissionContext);\n\n  const { isFedramp } = useChrome();\n  const handleUpsellToggle = () => {\n    setUpsellBannerVisible(false);\n    localStorage.setItem('remediations:bannerStatus', 'dismissed');\n  };\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n    history.push(`?${tabMapper[tabIndex]}`);\n  };\n\n  const getDisabledStateText = () => {\n    if (!context.permissions.execute) {\n      return 'You do not have the required execute permissions to perform this action.';\n    } else if (!executable) {\n      return 'Your account must be entitled to Smart Management to execute playbooks.';\n    }\n    return 'Unable to execute playbook.';\n  };\n\n  useEffect(() => {\n    loadRemediation(id).catch((e) => {\n      if (e && e.response && e.response.status === 404) {\n        history.push('/');\n        return;\n      }\n\n      throw e;\n    });\n\n    const tabIndex = tabMapper.findIndex(\n      (item) => item === location.search.split('?')[1]\n    );\n    setActiveTabKey(tabIndex !== -1 ? tabIndex : 0);\n    history.push(`?${tabMapper[tabIndex !== -1 ? tabIndex : 0]}`);\n\n    if (isBeta) {\n      loadRemediationStatus(id);\n    }\n    checkExecutable(id);\n  }, []);\n\n  useEffect(() => {\n    getPlaybookRuns(id);\n  }, [getPlaybookRuns]);\n\n  useEffect(() => {\n    playbookRuns;\n    if (\n      playbookRuns &&\n      playbookRuns.length &&\n      normalizeStatus(playbookRuns[0].status) === 'running'\n    ) {\n      const interval = setInterval(() => getPlaybookRuns(id), 10000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playbookRuns]);\n\n  const renderActivityState = (isEntitled, playbookRuns, remediation) => {\n    if (!isEntitled) {\n      return <ActivityTabUpsell />;\n    }\n\n    if (Array.isArray(playbookRuns) && playbookRuns.length) {\n      return (\n        <RemediationActivityTable\n          remediation={remediation}\n          playbookRuns={playbookRuns}\n        />\n      );\n    }\n\n    if (Array.isArray(playbookRuns) && !playbookRuns.length) {\n      return <EmptyActivityTable />;\n    }\n\n    return <SkeletonTable />;\n  };\n\n  const { status, remediation } = selectedRemediation;\n\n  if (remediation) {\n    document.title = `${remediation.name} | Remediations | Red Hat Insights`;\n  }\n\n  if (status !== 'fulfilled' && status !== 'rejected') {\n    return <RemediationDetailsSkeleton />;\n  }\n\n  if (status === 'rejected') {\n    return <InvalidObject />;\n  }\n\n  if (status === 'fulfilled') {\n    return context.permissions.read === false ? (\n      <DeniedState />\n    ) : (\n      <div className=\"page__remediation-details\">\n        <PageHeader>\n          {activeToastAlert.title && (\n            <PlaybookToastAlerts\n              key={activeToastAlert.key}\n              title={activeToastAlert.title}\n              description={activeToastAlert.description}\n              variant={activeToastAlert.variant}\n            />\n          )}\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to=\"/\"> Remediations </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive> {remediation.name} </BreadcrumbItem>\n          </Breadcrumb>\n          <Level className=\"rem-l-level\">\n            <LevelItem>\n              <PageHeaderTitle title={remediation.name} />\n            </LevelItem>\n            <LevelItem>\n              <Split hasGutter>\n                <SplitItem>\n                  <ExecutePlaybookButton\n                    isDisabled={\n                      !context.permissions.execute || !executable || isFedramp\n                    }\n                    disabledStateText={getDisabledStateText()}\n                    remediationId={remediation.id}\n                    remediationName={remediation.name}\n                    setActiveAlert={setActiveToastAlert}\n                  ></ExecutePlaybookButton>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    isDisabled={!remediation.issues.length}\n                    variant=\"secondary\"\n                    onClick={() => {\n                      downloadPlaybook(remediation.id);\n                      setActiveToastAlert({\n                        key: generateUniqueId(),\n                        title: 'Preparing playbook for download.',\n                        description:\n                          'Once complete, your download will start automatically.',\n                        variant: 'info',\n                      });\n                    }}\n                  >\n                    Download playbook\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <RemediationDetailsDropdown\n                    remediation={remediation}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </SplitItem>\n              </Split>\n            </LevelItem>\n          </Level>\n          <RemediationSummary\n            remediation={remediation}\n            playbookRuns={playbookRuns}\n            switchAutoReboot={switchAutoReboot}\n            context={context}\n          />\n        </PageHeader>\n        <Main>\n          <Stack hasGutter>\n            {!executable && upsellBannerVisible && (\n              <StackItem>\n                <UpsellBanner onClose={() => handleUpsellToggle()} />\n              </StackItem>\n            )}\n            {executable && noReceptorBannerVisible && (\n              <StackItem>\n                <NoReceptorBanner onClose={() => handleNoReceptorToggle()} />\n              </StackItem>\n            )}\n            <StackItem className=\"ins-c-playbookSummary__tabs\">\n              <Tabs activeKey={activeTabKey} onSelect={handleTabClick}>\n                <Tab eventKey={0} title=\"Actions\">\n                  <RemediationDetailsTable\n                    remediation={remediation}\n                    status={selectedRemediationStatus}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </Tab>\n                <Tab eventKey={1} title=\"Systems\">\n                  <SystemsTable\n                    remediation={remediation}\n                    setActiveAlert={setActiveToastAlert}\n                  />\n                </Tab>\n                <Tab eventKey={2} title=\"Activity\">\n                  {renderActivityState(executable, playbookRuns, remediation)}\n                </Tab>\n              </Tabs>\n            </StackItem>\n          </Stack>\n        </Main>\n      </div>\n    );\n  }\n};\n\nRemediationDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n  location: PropTypes.object,\n  selectedRemediation: PropTypes.object,\n  selectedRemediationStatus: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  loadRemediationStatus: PropTypes.func.isRequired,\n  switchAutoReboot: PropTypes.func.isRequired,\n  deleteRemediation: PropTypes.func.isRequired,\n  executePlaybookBanner: PropTypes.shape({\n    isVisible: PropTypes.bool,\n  }),\n  addNotification: PropTypes.func.isRequired,\n  playbookRuns: PropTypes.array,\n  getPlaybookRuns: PropTypes.func,\n  checkExecutable: PropTypes.func,\n};\n\nexport default withRouter(\n  connect(\n    ({\n      selectedRemediation,\n      selectedRemediationStatus,\n      executePlaybookBanner,\n      playbookRuns,\n      executable,\n    }) => ({\n      selectedRemediation,\n      selectedRemediationStatus,\n      executePlaybookBanner,\n      playbookRuns: playbookRuns.data,\n      remediation: selectedRemediation.remediation,\n      executable,\n    }),\n    (dispatch) => ({\n      loadRemediation: (id) => dispatch(actions.loadRemediation(id)),\n      loadRemediationStatus: (id) =>\n        dispatch(actions.loadRemediationStatus(id)),\n      // eslint-disable-next-line camelcase\n      switchAutoReboot: (id, auto_reboot) =>\n        dispatch(actions.patchRemediation(id, { auto_reboot })),\n      deleteRemediation: (id) => dispatch(actions.deleteRemediation(id)),\n      addNotification: (content) => dispatch(addNotification(content)),\n      getPlaybookRuns: (id) => dispatch(actions.getPlaybookRuns(id)),\n      checkExecutable: (id) => dispatch(actions.checkExecutable(id)),\n    })\n  )(RemediationDetails)\n);\n","import React, { Fragment } from 'react';\nimport { Table, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nimport './SkeletonTable.scss';\n\nclass SkeletonTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: <Skeleton size=\"xs\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n        { title: <Skeleton size=\"md\" /> },\n        { title: <Skeleton size=\"sm\" /> },\n      ],\n      rows: [\n        [\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"xs\" /> },\n          { title: <Skeleton size=\"md\" /> },\n          { title: <Skeleton size=\"md\" /> },\n        ],\n      ],\n    };\n  }\n\n  render() {\n    const { columns, rows } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          cells={columns}\n          rows={rows}\n          aria-label=\"Loading\"\n          variant={TableVariant.compact}\n          {...this.props}\n        >\n          <TableHeader />\n        </Table>\n        <EmptyTable centered>\n          <Spinner />\n        </EmptyTable>\n        <TableToolbar\n          isFooter\n          className=\"rem-c-skeleton-table__footer rem-m-align-right\"\n        >\n          <Skeleton size=\"sm\" />\n        </TableToolbar>\n      </Fragment>\n    );\n  }\n}\n\nexport default SkeletonTable;\n"],"names":["DescriptionList","title","className","children","isBold","hasGutter","needsPointer","props","descriptionListClasses","classnames","mainClasses","propTypes","ResolutionStep","resolution","setState","selected","state","issue","resolutions","this","getResolutions","id","value","resolutionsDisplay","StackItem","Form","map","key","Radio","label","Stack","description","needs_reboot","Reboot","red","name","defaultChecked","onChange","onRadioChange","Skeleton","Split","SplitItem","Label","isFilled","Component","PropTypes","ResolutionEditButton","remediation","onResolutionSelected","useState","isOpen","setIsOpen","resolutionStep","useRef","onClick","Modal","variant","ModalVariant","onClose","actions","Button","result","current","getSelectedResolution","ref","ConnectResolutionEditButton","connect","f","dispatch","patchRemediationIssue","refreshRemediation","ruleId","DeleteButton","dialogOpen","onDelete","onButtonClicked","isDisabled","ConfirmationDialog","dialogTitle","confirmText","dialogConfirmationText","text","dialogMessage","onDialogClose","defaultProps","withRouter","remediations","length","Promise","all","r","deleteRemediation","loadRemediations","DeleteActionsButton","issues","afterDelete","issueId","deleteRemediationIssue","isBeta","loadRemediationStatus","RemediationDetailsSystemDropdown","system","setActiveAlert","open","setOpen","deleteDialogOpen","setDeleteDialogOpen","getSystemName","generateUniqueId","Dropdown","onSelect","toggle","KebabToggle","onToggle","position","DropdownPosition","isPlain","deleteRemediationIssueSystem","IconInline","icon","SystemsStatusModal","setSystem","systemStatuses","setSystemStatuses","page","setPage","pageSize","setPageSize","filterText","setFilterText","inventory","urlBuilder","inventoryUrlBuilder","useEffect","statuses","systems","resolved","CheckIcon","TimesIcon","detailDropdown","generateStatus","isFooterLeftAligned","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","reducers","items","orderBy","filter","s","includes","onRefresh","options","per_page","onRefreshData","total","perPage","hasCheckbox","event","rowId","rowData","TableToolbar","ToolbarGroup","ToolbarItem","ConditionalFilter","filterValues","placeholder","type","conditionalFilterType","e","SystemForActionButton","useDispatch","pagination","localStorage","getItem","perPageOptions","i","EmptyActions","filtered","Bullseye","EmptyState","Title","size","headingLevel","EmptyStateBody","href","appUrl","toString","resolutionDescriptionCell","url","buildIssueUrl","resolutions_available","systemsForAction","getResolvedSystems","count","SORTING_ITERATEES","getIssueApplication","RemediationDetailsTable","usePagination","sorter","useSorter","useFilter","selector","useSelector","permission","useContext","PermissionContext","setValue","reset","includesIgnoreCase","trim","paged","sortBy","sortDir","slice","offset","rows","flatMap","needsReboot","cells","selectedIds","getSelectedIds","activeFiltersConfig","filters","category","chips","PrimaryToolbar","filterConfig","_e","bulkSelect","checked","isSelected","actionsConfig","itemCount","Table","TableVariant","canSelectAll","transforms","sortable","permissions","write","TableHeader","TableBody","tbodyProps","isFooter","Pagination","dropDirection","debug","status","RemediationActivityTable","playbookRuns","setRows","reduce","acc","playbooks","Link","to","DateFormat","date","created_at","cellFormatters","expandable","created_by","first_name","last_name","executorStatus","normalizeStatus","counts","executors","ex","pending","running","success","failure","canceled","acked","hasCancel","remediationName","remediationId","playbookId","parent","fullWidth","executor_id","executor_name","system_count","generateRows","onCollapse","collapseRows","TextInputDialog","valid","setValid","onCancel","onSubmit","ariaLabel","ouiaId","FormGroup","fieldId","helperTextInvalid","isValid","TextInput","pattern","test","autoFocus","RegExp","playbookNamePattern","RemediationDetailsDropdown","onRename","renameDialogOpen","setRenameDialogOpen","confirm","history","patchRemediation","push","ExecuteButton","isLoading","disabledStateText","data","getConnectionStatus","issueCount","runRemediation","etag","remediationStatus","setEtag","showRefreshMessage","setShowRefreshMessage","Tooltip","content","isAriaDisabled","ExecuteModal","showRefresh","ExecutePlaybookButton","connectionStatus","selectedRemediation","sources","executable","exclude","then","getPlaybookRuns","getEndpoint","checkExecutable","UpsellBanner","Alert","isInline","actionClose","AlertActionCloseButton","EmptyStateIcon","CloudIcon","component","Fragment","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","InputGroup","Toolbar","ToolbarContent","Tabs","activeKey","Tab","eventKey","TabTitleText","PageHeader","Breadcrumb","BreadcrumbItem","isActive","Level","LevelItem","PageHeaderTitle","RemediationSummarySkeleton","Main","SkeletonTable","ChartDonutUtilization","ariaDesc","ariaTitle","constrainToVisibleArea","x","y","labels","datum","subTitle","subTitleComponent","ChartLabel","thresholds","color","height","width","padding","bottom","left","right","top","Flex","FlexItem","spacer","default","colSpan","RemediationSummary","number","str","switchAutoReboot","context","handleRebootChange","autoReboot","rebootDisabled","required","OffIcon","ExclamationTriangleIcon","num","generateNumIssuesReboot","auto_reboot","generateAutoRebootStatus","CheckCircleIcon","stats","totalSystems","systemsWithReboot","systemsWithoutReboot","resolvedCount","every","mostRecent","updated_at","remediation_id","renderLatestActivity","renderAutoReboot","tabMapper","RemediationDetails","match","location","selectedRemediationStatus","loadRemediation","params","upsellBannerVisible","setUpsellBannerVisible","noReceptorBannerVisible","setNoReceptorBannerVisible","activeTabKey","setActiveTabKey","activeToastAlert","setActiveToastAlert","isFedramp","useChrome","response","tabIndex","findIndex","item","search","split","interval","setInterval","clearInterval","document","InvalidObject","read","DeniedState","PlaybookToastAlerts","execute","downloadPlaybook","setItem","NoReceptorBanner","SystemsTable","isEntitled","Array","isArray","renderActivityState","isRequired","executePlaybookBanner","isVisible","addNotification","columns","centered","React"],"sourceRoot":""}