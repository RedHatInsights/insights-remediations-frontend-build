{"version":3,"file":"js/460.1674594097989.67d694e5d6a18e7c1916.js","mappings":"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","sources":["webpack:///./src/components/PlaybookCard.js","webpack:///./src/components/EmptyStates/EmptyRemediations.js","webpack:///./src/components/RemediationTable.js","webpack:///./src/components/TestButtons.js","webpack:///./src/routes/Home.js","webpack:///./src/Routes.js","webpack:///./src/skeletons/GlobalSkeleton.js","webpack:///./src/App.js","webpack:///./src/Utilities/dispatcher.js","webpack:///./src/actions.js","webpack:///./src/components/Alerts/NoReceptorBanner.js","webpack:///./src/components/ConfirmationDialog.js","webpack:///./src/components/DeniedState.js","webpack:///./src/components/EmptyExecutePlaybookState.js","webpack:///./src/components/Modals/ExecuteModal.js","webpack:///./src/components/statusHelper.js","webpack:///./src/components/Modals/WarningModal.js","webpack:///./src/containers/CancelButton.js","webpack:///./src/hooks/table.js","webpack:///./src/modules/RemediationsModal/validate/validator.js","webpack:///./src/store/index.js","webpack:///./src/store/reducers.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardActions,\n  CardTitle,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Progress,\n  ProgressMeasureLocation,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Label,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { Link } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\nimport { patchRemediation } from '../actions.js';\nimport { dispatchNotification } from '../Utilities/dispatcher.js';\nimport './PlaybookCard.scss';\n\nfunction buildName(name, id) {\n  return (\n    <Link to={`/${id}`} className=\"rem-c-playbook-card__header--name\">\n      {name}\n    </Link>\n  );\n}\n\nfunction actionWrapper(actionsList, callback, dispatch) {\n  Promise.all(\n    actionsList.map((event) => {\n      dispatch(event);\n      return event.payload;\n    })\n  ).then(callback);\n}\n\nconst PlaybookCardHeader = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isArchived, setIsArchived] = useState(archived);\n  const dispatch = useDispatch();\n  const dropdownItems = [];\n\n  const archiveHandler = () => {\n    actionWrapper(\n      [patchRemediation(remediation.id, { archived: !isArchived })],\n      () => {\n        setIsArchived(!isArchived);\n        update(true);\n      },\n      dispatch\n    );\n  };\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"execute\"\n      id=\"execute\"\n      isDisabled={!permission.isReceptorConfigured || isArchived}\n      className={`${\n        (!permission.hasSmartManagement || !permission.permissions.execute) &&\n        'ins-m-not-entitled'\n      }`}\n      onClick={() => {\n        setExecuteOpen(false);\n        actionWrapper(\n          [\n            loadRemediation(remediation.id),\n            getConnectionStatus(remediation.id),\n          ],\n          () => {\n            setExecuteOpen(true);\n            setIsOpen(false);\n          },\n          dispatch\n        );\n      }}\n    >\n      Execute playbook\n    </DropdownItem>\n  );\n\n  dropdownItems.push(\n    <DropdownItem\n      key=\"download\"\n      onClick={() => {\n        downloadPlaybook(remediation.id);\n        setIsOpen(false);\n        dispatchNotification({\n          title: `Preparing playbook for download`,\n          description: 'Once complete, your download will start automatically.',\n          variant: 'info',\n          dismissable: true,\n          autoDismiss: true,\n        });\n      }}\n    >\n      Download playbook\n    </DropdownItem>\n  );\n\n  isArchived\n    ? dropdownItems.push(\n        <DropdownItem\n          key=\"restore\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Restored playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Restore playbook\n        </DropdownItem>\n      )\n    : dropdownItems.push(\n        <DropdownItem\n          key=\"archive\"\n          onClick={() => {\n            archiveHandler();\n            setIsOpen(false);\n            dispatch(\n              addNotification({\n                variant: 'info',\n                title: `Archived playbook ${remediation.name}`,\n              })\n            );\n          }}\n        >\n          Archive playbook\n        </DropdownItem>\n      );\n\n  return (\n    <CardHeader className=\"rem-c-playbook-card__header\">\n      <CardActions>\n        <Dropdown\n          key=\"dropdown\"\n          id={`${remediation.id}-dropdown`}\n          isOpen={isOpen}\n          isPlain\n          onSelect={(f) => f}\n          toggle={\n            <KebabToggle\n              id={`${remediation.id}-toggle`}\n              onToggle={(isOpen) => setIsOpen(isOpen)}\n            />\n          }\n          dropdownItems={dropdownItems}\n          position={'right'}\n        />\n        <input\n          type=\"checkbox\"\n          name={`${remediation.id}-checkbox`}\n          checked={selector.getSelectedIds().includes(remediation.id)}\n          onChange={(e) => {\n            selector.props.onSelect(e, e.target.checked, remediationIdx);\n          }}\n          aria-label={`${remediation.id}-checkbox`}\n        />\n      </CardActions>\n      <CardTitle>\n        <Stack hasGutter>\n          <StackItem className=\"rem-c-playbook-card__header--title\">\n            <span className=\"pf-u-mr-sm\">\n              {buildName(remediation.name, remediation.id)}\n            </span>\n            {isArchived && <Label>Archived</Label>}\n          </StackItem>\n          <StackItem className=\"rem-c-playbook-card__header--last-modified\">\n            Last modified: <DateFormat date={remediation.updated_at} />\n          </StackItem>\n        </Stack>\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nPlaybookCardHeader.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n};\n\nconst renderActionStatus = (complete, total) => {\n  return complete === total && complete !== 0 ? (\n    <div>\n      <CheckCircleIcon className=\"rem-c-success\" /> {complete} of &nbsp;{total}\n    </div>\n  ) : (\n    `${complete} of ${total}`\n  );\n};\n\nconst renderProgress = (complete, total, archived) => {\n  return archived ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--archived\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : complete === total && complete !== 0 ? (\n    <Progress\n      className=\"rem-c-playbook-card__progress rem-c-playbook-card__progress--success\"\n      value={100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  ) : (\n    <Progress\n      className=\"rem-c-playbook-card__progress\"\n      value={(complete / total) * 100}\n      measureLocation={ProgressMeasureLocation.none}\n    />\n  );\n};\n\nexport const PlaybookCard = ({\n  remediation,\n  remediationIdx,\n  archived,\n  selector,\n  setExecuteOpen,\n  //executeOpen,\n  update,\n  loadRemediation,\n  getConnectionStatus,\n  downloadPlaybook,\n  permission,\n}) => {\n  // const [ poll, setPoll ] = useState(executeOpen => !executeOpen);\n  // const [ curResolved, setCurResolved ] = useState(remediation.resolved_count);\n  // const selected = reduxSelector(state => state.selectedRemediation);\n  // const [ loaded, setLoaded ] = useState(false);\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //     if (poll && !archived) {\n  //         const interval = setInterval(() => {\n  //             if (poll) {\n  //                 actionWrapper([\n  //                     loadRemediation(remediation.id)\n  //                 ], () => { setLoaded(true); }, dispatch);\n  //             }\n  //         }, 15000);\n  //         return () => clearInterval(interval);\n  //     }\n  // }, [ poll ]);\n\n  // useEffect(() => {\n  //     if (loaded) {\n  //         if (curResolved !== selected.remediation.resolved_count) {\n  //             setCurResolved(selected.remediation.resolved_count);\n  //         }\n  //     }\n  // }, [ loaded ]);\n\n  // useEffect(() => {\n  //     if (executeOpen) {\n  //         setPoll(false);\n  //     } else {\n  //         setPoll(true);\n  //     }\n  // }, [ executeOpen ]);\n\n  return (\n    <Card className=\"rem-c-playbook-card\" isCompact>\n      <PlaybookCardHeader\n        remediation={remediation}\n        remediationIdx={remediationIdx}\n        archived={archived}\n        selector={selector}\n        setExecuteOpen={setExecuteOpen}\n        update={update}\n        loadRemediation={loadRemediation}\n        getConnectionStatus={getConnectionStatus}\n        downloadPlaybook={downloadPlaybook}\n        permission={permission}\n      />\n      <CardBody className=\"rem-c-playbook-card__body\">\n        <Split hasGutter className=\"rem-c-playbook-card__body--split\">\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Systems\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {remediation.system_count}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n          <SplitItem>\n            <Stack>\n              <StackItem className=\"rem-c-playbook-card__body--titles\">\n                Complete actions\n              </StackItem>\n              <StackItem className=\"rem-c-playbook-card__body--values\">\n                {renderActionStatus(\n                  remediation.resolved_count,\n                  remediation.issue_count\n                )}\n              </StackItem>\n            </Stack>\n          </SplitItem>\n        </Split>\n      </CardBody>\n      {renderProgress(\n        remediation.resolved_count,\n        remediation.issue_count,\n        archived\n      )}\n    </Card>\n  );\n};\n\nPlaybookCard.propTypes = {\n  remediation: PropTypes.object.isRequired,\n  remediationIdx: PropTypes.number.isRequired,\n  archived: PropTypes.bool.isRequired,\n  selector: PropTypes.object.isRequired,\n  setExecuteOpen: PropTypes.func.isRequired,\n  executeOpen: PropTypes.bool.isRequired,\n  update: PropTypes.func.isRequired,\n  loadRemediation: PropTypes.func.isRequired,\n  getConnectionStatus: PropTypes.func.isRequired,\n  downloadPlaybook: PropTypes.func.isRequired,\n  permission: PropTypes.object.isRequired,\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Title,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { WrenchIcon } from '@patternfly/react-icons';\n\nimport './EmptyRemediations.scss';\n\nexport const EmptyRemediations = ({ archivedCount, setShowArchived }) => {\n  return (\n    <Bullseye className=\"rem-c-no-remediations pf-u-pt-2xl\">\n      <EmptyState>\n        <EmptyStateIcon icon={WrenchIcon} size=\"sm\" />\n        <Title size=\"lg\" headingLevel=\"h5\">\n          No remediation playbooks yet\n        </Title>\n        <EmptyStateBody>\n          Insights uses Ansible Playbooks to remediate or mitigate configuration\n          problems on your systems, and apply patches.\n          <br />\n          <br />\n          To create a remediation playbook, select issues identified in Insights\n          applications, then select\n          <strong> Remediate</strong>.\n        </EmptyStateBody>\n        <br />\n        {archivedCount > 0 && (\n          <Button\n            variant=\"link\"\n            onClick={() => setShowArchived(true)}\n            ouiaId=\"show-archived-playbooks\"\n          >\n            Show {archivedCount} archived playbooks\n          </Button>\n        )}\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nEmptyRemediations.propTypes = {\n  archivedCount: PropTypes.number.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useContext, useState } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { downloadPlaybook } from '../api';\nimport {\n  getConnectionStatus,\n  runRemediation,\n  setEtag,\n  getPlaybookRuns,\n  loadRemediation,\n} from '../actions';\nimport { PermissionContext } from '../App';\nimport { ExecuteModal } from './Modals/ExecuteModal';\nimport { PlaybookCard } from './PlaybookCard';\nimport { EmptyRemediations } from './EmptyStates/EmptyRemediations';\nimport './RemediationTable.scss';\n\nfunction skeleton() {\n  return (\n    <React.Fragment>\n      <Main>\n        <Spinner centered />\n      </Main>\n    </React.Fragment>\n  );\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction RemediationTable({\n  remediations,\n  loadRemediations,\n  sorter,\n  filter,\n  selector,\n  pagination,\n  shouldUpdateGrid,\n  setShouldUpdateGrid,\n  setRemediationCount,\n  showArchived,\n  setShowArchived,\n}) {\n  const { value, status } = remediations;\n  let cards = [];\n\n  const permission = useContext(PermissionContext);\n  const [executeOpen, setExecuteOpen] = useState(false);\n  const [showRefreshMessage, setShowRefreshMessage] = useState(false);\n  const selectedRemediation = reduxSelector(\n    (state) => state.selectedRemediation\n  );\n  const connectionStatus = reduxSelector((state) => state.connectionStatus);\n  const runningRemediation = reduxSelector((state) => state.runRemediation);\n  const dispatch = useDispatch();\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (shouldUpdateGrid === true) {\n      setShouldUpdateGrid(false);\n      load();\n    }\n  }, [shouldUpdateGrid]);\n\n  useEffect(() => {\n    if (runningRemediation.status === 'changed') {\n      getConnectionStatus(selectedRemediation.remediation.id);\n      setShowRefreshMessage(true);\n    } else if (runningRemediation.status === 'fulfilled') {\n      setExecuteOpen(false);\n    }\n  }, [runningRemediation.status]);\n\n  useEffect(() => {\n    if (remediations.value) {\n      setRemediationCount(value.meta.total);\n    }\n  }, [remediations]);\n\n  // Skeleton Loading\n  if (status !== 'fulfilled') {\n    return skeleton();\n  }\n\n  if (!showArchived) {\n    cards = value?.data?.reduce((result, remediation) => {\n      if (remediation.archived !== true) {\n        result.push(remediation);\n      }\n\n      return result;\n    }, []);\n  } else {\n    cards = value?.data?.map((remediation) => remediation);\n  }\n\n  if (cards.length === 0) {\n    return (\n      <EmptyRemediations\n        archivedCount={value.data.length}\n        setShowArchived={setShowArchived}\n      />\n    );\n  }\n\n  selector.register(cards);\n\n  return (\n    <React.Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          {executeOpen && (\n            <ExecuteModal\n              isOpen={executeOpen}\n              onClose={() => {\n                setShowRefreshMessage(false);\n                setExecuteOpen(false);\n              }}\n              showRefresh={showRefreshMessage}\n              remediationId={selectedRemediation.remediation.id}\n              data={connectionStatus.data}\n              etag={connectionStatus.etag}\n              isLoading={connectionStatus.status !== 'fulfilled'}\n              issueCount={selectedRemediation.remediation.issues.length}\n              remediationStatus={runningRemediation.status}\n              runRemediation={(id, etag) => {\n                dispatch(runRemediation(id, etag)).then(() =>\n                  dispatch(getPlaybookRuns(id))\n                );\n              }}\n              setEtag={(etag) => {\n                dispatch(setEtag(etag));\n              }}\n            />\n          )}\n        </StackItem>\n        <StackItem>\n          <Grid sm={12} md={6} lg={4} hasGutter>\n            {cards.map((remediation, idx) => {\n              return (\n                <GridItem key={remediation.id}>\n                  <PlaybookCard\n                    remediation={remediation}\n                    remediationIdx={idx}\n                    archived={remediation.archived}\n                    selector={selector}\n                    setExecuteOpen={setExecuteOpen}\n                    executeOpen={executeOpen}\n                    update={setShouldUpdateGrid}\n                    loadRemediation={loadRemediation}\n                    getConnectionStatus={getConnectionStatus}\n                    downloadPlaybook={downloadPlaybook}\n                    permission={permission}\n                  />\n                </GridItem>\n              );\n            })}\n          </Grid>\n        </StackItem>\n      </Stack>\n    </React.Fragment>\n  );\n}\n\nRemediationTable.propTypes = {\n  remediations: PropTypes.object.isRequired,\n  loadRemediations: PropTypes.func.isRequired,\n  sorter: PropTypes.object.isRequired,\n  filter: PropTypes.object.isRequired,\n  selector: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  shouldUpdateGrid: PropTypes.bool.isRequired,\n  setShouldUpdateGrid: PropTypes.func.isRequired,\n  setRemediationCount: PropTypes.func.isRequired,\n  showArchived: PropTypes.bool.isRequired,\n  setShowArchived: PropTypes.func.isRequired,\n};\n\nexport default RemediationTable;\n","import React from 'react';\n\nimport { Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport RemediationButton from '../modules/RemediationsButton';\n\nimport propTypes from 'prop-types';\n\nimport { getHosts } from '../api';\n\nclass TestButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allHosts: false,\n    };\n  }\n\n  isEnabled = () => localStorage.getItem('remediations:debug') === 'true';\n\n  dataProviderPing = () => ({\n    issues: [\n      {\n        id: 'test:ping',\n        description: 'Ansible ping',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderA2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 5),\n      },\n    ],\n  });\n\n  dataProviderC1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC3 = () => ({\n    issues: [...this.dataProviderC1().issues, ...this.dataProviderC2().issues],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC4 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n      },\n      {\n        id: 'advisor:corosync_enable_rt_schedule|COROSYNC_NOT_ENABLE_RT',\n        description:\n          'Cluster nodes are frequently fenced as realtime is not enabled in corosync',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderC5 = () => ({\n    issues: [\n      {\n        id: 'advisor:unsupported',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'vulnerabilities:CVE-2019-999999',\n        description: 'Unsupported issue',\n      },\n      {\n        id: 'advisor:CVE_2017_6074_kernel|KERNEL_CVE_2017_6074',\n        description:\n          'Kernel vulnerable to local privilege escalation via DCCP module (CVE-2017-6074)',\n      },\n    ],\n    systems: this.state.allHosts.slice(-1),\n  });\n\n  dataProviderD1 = () => ({\n    issues: [\n      {\n        id: 'vulnerabilities:CVE-2019-3815',\n        description: 'CVE-2019-3815',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2018-16865',\n        description: 'CVE-2018-16865',\n        systems:\n          this.state.allHosts.length > 1\n            ? this.state.allHosts.slice(1, 2)\n            : this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'vulnerabilities:CVE-2017-17712',\n        description: 'CVE-2017-17712',\n      },\n    ],\n    systems: this.state.allHosts,\n  });\n\n  dataProviderD2 = () => ({\n    issues: [\n      {\n        id: 'advisor:network_bond_opts_config_issue|NETWORK_BONDING_OPTS_DOUBLE_QUOTES_ISSUE',\n        description:\n          'Bonding will not fail over to the backup link when bonding options are partially read',\n        systems: this.state.allHosts.slice(0, 1),\n      },\n      {\n        id: 'advisor:rhnsd_pid_world_write|RHNSD_PID_WORLD_WRITABLE',\n        description:\n          'Code injection risk or wrong pid altering when rhnsd daemon file rhnsd.pid is world writable, due to a bug in rhnsd',\n        systems: this.state.allHosts.slice(1),\n      },\n    ],\n  });\n\n  async componentDidMount() {\n    if (this.isEnabled()) {\n      await window.insights.chrome.auth.getUser();\n      getHosts().then((hosts) =>\n        this.setState({\n          allHosts: hosts.results.map((result) => result.id),\n        })\n      );\n    }\n  }\n\n  render() {\n    if (!this.isEnabled()) {\n      return null;\n    }\n\n    const { allHosts } = this.state;\n\n    const RemediationBtn = ({ dataProvider, children, ...props }) => (\n      <SplitItem>\n        <RemediationButton\n          dataProvider={dataProvider}\n          isDisabled={!allHosts || !allHosts.length}\n          onRemediationCreated={this.props.onRemediationCreated}\n          {...props}\n        >\n          {children}\n        </RemediationButton>\n      </SplitItem>\n    );\n\n    return (\n      <React.Fragment>\n        <Stack hasGutter>\n          <StackItem>\n            <Split hasGutter>\n              {[\n                'ping',\n                'alwaysFail',\n                'failHalfTheTime',\n                'pause1m',\n                'pause5m',\n                'pause15m',\n                'pauseRandom15m',\n                'pause1h',\n                'pause6h',\n              ].map((name) => (\n                <RemediationBtn\n                  key={name}\n                  dataProvider={() => ({\n                    issues: [\n                      {\n                        id: `test:${name}`,\n                        description: `Ansible ${name} test playbook`,\n                      },\n                    ],\n                    systems: this.state.allHosts,\n                  })}\n                >\n                  {name}\n                </RemediationBtn>\n              ))}\n            </Split>\n          </StackItem>\n\n          <StackItem>\n            <Split hasGutter>\n              <RemediationBtn dataProvider={this.dataProviderA1}>\n                A1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderA2}>\n                A2\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderC1}>\n                C1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC2}>\n                C2\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC3}>\n                C3\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC4}>\n                C4 (multires)\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderC5}>\n                C5 (unsupported)\n              </RemediationBtn>\n\n              <RemediationBtn dataProvider={this.dataProviderD1}>\n                D1\n              </RemediationBtn>\n              <RemediationBtn dataProvider={this.dataProviderD2}>\n                D2\n              </RemediationBtn>\n            </Split>\n          </StackItem>\n        </Stack>\n      </React.Fragment>\n    );\n  }\n}\n\nTestButtons.propTypes = {\n  onRemediationCreated: propTypes.func,\n};\n\nTestButtons.defaultProps = {\n  onRemediationCreated: (f) => f,\n};\n\nexport default TestButtons;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector as reduxSelector } from 'react-redux';\nimport { StackItem, Stack } from '@patternfly/react-core';\n\nimport * as actions from '../actions';\nimport { downloadPlaybook } from '../api';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport RemediationTable from '../components/RemediationTable';\nimport TestButtons from '../components/TestButtons';\n\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nimport './Home.scss';\n\nimport { PermissionContext } from '../App';\nimport DeniedState from '../components/DeniedState';\nimport NoReceptorBanner from '../components/Alerts/NoReceptorBanner';\nimport {\n  useFilter,\n  usePagination,\n  useSelector,\n  useSorter,\n} from '../hooks/table';\nimport ConfirmationDialog from '../components/ConfirmationDialog';\nimport keyBy from 'lodash/keyBy';\n\nfunction verifyDownload(selectedIds, data) {\n  let valid = [];\n  const byId = keyBy(data, (r) => r.id);\n\n  valid = selectedIds.reduce((result, id) => {\n    const remediation = byId[id];\n\n    if (remediation && remediation.issue_count > 0) {\n      result.push(remediation.id);\n    }\n\n    return result;\n  }, []);\n\n  return valid;\n}\n\nfunction download(selectedIds, data, dispatch) {\n  const valid = verifyDownload(selectedIds, data);\n\n  if (valid.length === 0) {\n    dispatch(\n      addNotification({\n        variant: 'danger',\n        title: `No playbooks downloaded.`,\n        description:\n          selectedIds.length > 1\n            ? 'Selected remediations do not contain any issues to remediate.'\n            : 'Selected remediation does not contain any issues to remediate.',\n      })\n    );\n  } else if (valid.length < selectedIds.length) {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n        description:\n          selectedIds.length - valid.length > 1\n            ? `${\n                selectedIds.length - valid.length\n              } remediations with no issues were not downloaded.`\n            : `1 remediation with no issues was not downloaded.`,\n      })\n    );\n  } else {\n    downloadPlaybook(valid);\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title:\n          valid.length > 1 ? `Downloading playbooks` : `Downloading playbook`,\n      })\n    );\n  }\n}\n\nconst SORTING_ITERATEES = [\n  null,\n  'name',\n  'system_count',\n  'issue_count',\n  'updated_at',\n];\n\nfunction Home() {\n  document.title = 'Remediations | Red Hat Insights';\n\n  const [noReceptorBannerVisible, setNoReceptorBannerVisible] = useState(\n    localStorage.getItem('remediations:receptorBannerStatus') !== 'dismissed'\n  );\n  const sorter = useSorter(4, 'desc');\n  const filter = useFilter();\n  const selector = useSelector();\n  const pagination = usePagination();\n  const [remediationCount, setRemediationCount] = useState(0);\n  const [filterText, setFilterText] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [showArchived, setShowArchived] = useState(\n    false || localStorage.getItem('remediations:showArchived') === 'true'\n  );\n  const [shouldUpdateGrid, setShouldUpdateGrid] = useState(false);\n  const remediations = reduxSelector((state) => state.remediations);\n  const dispatch = useDispatch();\n  const loadRemediations = (...args) =>\n    dispatch(actions.loadRemediations(...args));\n  const deleteRemediation = (id) => dispatch(actions.deleteRemediation(id));\n  const itemsCountInPage = remediations?.value?.data.length || 0;\n\n  function load() {\n    const column = SORTING_ITERATEES[sorter.sortBy];\n    if (showArchived) {\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset\n      );\n    } else {\n      const hideArchived = true;\n      loadRemediations(\n        column,\n        sorter.sortDir,\n        filter.value,\n        pagination.pageSize,\n        pagination.offset,\n        undefined,\n        hideArchived\n      );\n    }\n  }\n\n  useEffect(load, []);\n\n  useEffect(() => {\n    if (remediations.status === 'fulfilled' && filter.value === filterText) {\n      setShouldUpdateGrid(true);\n    }\n  }, [\n    sorter.sortBy,\n    sorter.sortDir,\n    filter.value,\n    pagination.pageSize,\n    pagination.pageDebounced,\n    showArchived,\n  ]);\n\n  useEffect(() => {\n    filter.setValue(filterText);\n  }, [filterText]);\n\n  filter.onChange(pagination.reset);\n  sorter.onChange(pagination.reset);\n\n  const selectedIds = selector.getSelectedIds();\n\n  const handleNoReceptorToggle = () => {\n    setNoReceptorBannerVisible(false);\n    localStorage.setItem('remediations:receptorBannerStatus', 'dismissed');\n  };\n\n  const sendNotification = (data) => {\n    dispatch(addNotification(data));\n  };\n\n  const onRemediationCreated = (result) => {\n    sendNotification(result.getNotification());\n    dispatch(actions.loadRemediations());\n  };\n\n  const activeFiltersConfig = {\n    filters: filterText.length\n      ? [{ category: 'Name', chips: [{ name: filterText }] }]\n      : [],\n    onDelete: () => {\n      setFilterText('');\n      filter.setValue('');\n    },\n  };\n\n  return (\n    <div className=\"page__remediations\">\n      <PermissionContext.Consumer>\n        {(permission) =>\n          permission.permissions.read === false ? (\n            <DeniedState />\n          ) : (\n            <React.Fragment>\n              <PageHeader>\n                <PageHeaderTitle title=\"Remediations\" />\n                <TestButtons onRemediationCreated={onRemediationCreated} />\n              </PageHeader>\n              <PrimaryToolbar\n                filterConfig={{\n                  items: [\n                    {\n                      label: 'Search playbooks',\n                      type: 'text',\n                      filterValues: {\n                        id: 'filter-by-string',\n                        key: 'filter-by-string',\n                        placeholder: 'Search playbooks',\n                        value: filterText,\n                        onChange: (_e, value) => {\n                          setFilterText(value);\n                        },\n                      },\n                    },\n                  ],\n                }}\n                bulkSelect={{\n                  items: [\n                    {\n                      title: 'Select none',\n                      onClick: () => selector.props.onSelect('none', true),\n                    },\n                    {\n                      title: `Select page (${itemsCountInPage})`,\n                      onClick: () => selector.props.onSelect('page', true),\n                    },\n                  ],\n                  checked:\n                    selectedIds.length && remediationCount > selectedIds.length\n                      ? null\n                      : selectedIds.length,\n                  count: selectedIds.length,\n                  isDisabled: !itemsCountInPage,\n                  onSelect: (isSelected) =>\n                    selector.props.onSelect(\n                      selectedIds.length ? 'none' : 'page',\n                      isSelected\n                    ),\n                }}\n                actionsConfig={{\n                  actions: [\n                    {\n                      label:\n                        selectedIds.length > 1\n                          ? 'Download playbooks'\n                          : 'Download playbook',\n                      props: {\n                        variant: 'secondary',\n                        isDisabled: !selectedIds.length,\n                      },\n                      onClick: () =>\n                        download(\n                          selectedIds,\n                          remediations.value.data,\n                          dispatch\n                        ), // TODO state for downloads?\n                    },\n                    {\n                      label: 'Delete playbooks',\n                      props: {\n                        isDisabled:\n                          !permission.permissions.write || !selectedIds.length,\n                      },\n                      onClick: () => setDialogOpen(true),\n                    },\n                    {\n                      label: showArchived\n                        ? 'Hide archived playbooks'\n                        : 'Show archived playbooks',\n                      onClick: showArchived\n                        ? () => {\n                            setShowArchived(false);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'false'\n                            );\n                          }\n                        : () => {\n                            setShowArchived(true);\n                            selector.reset();\n                            localStorage.setItem(\n                              'remediations:showArchived',\n                              'true'\n                            );\n                          },\n                    },\n                  ],\n                }}\n                pagination={{\n                  ...pagination.props,\n                  itemCount: remediationCount,\n                }}\n                activeFiltersConfig={activeFiltersConfig}\n              />\n              <Main>\n                <Stack hasGutter>\n                  {permission.hasSmartManagement &&\n                    !permission.isReceptorConfigured &&\n                    noReceptorBannerVisible && (\n                      <StackItem>\n                        <NoReceptorBanner\n                          onClose={() => handleNoReceptorToggle()}\n                        />\n                      </StackItem>\n                    )}\n                  {dialogOpen && (\n                    <ConfirmationDialog\n                      title={\n                        selectedIds.length === 1\n                          ? 'Remove playbook'\n                          : 'Remove playbooks'\n                      }\n                      text={`${selectedIds.length} ${\n                        selectedIds.length > 1 ? 'playbooks' : 'playbook'\n                      } \n                                            will be removed from Remediations. This is permanent and cannot be undone.`}\n                      confirmText={'Remove'}\n                      onClose={async (del) => {\n                        setDialogOpen(false);\n                        if (del) {\n                          await Promise.all(\n                            selectedIds.map((r) => deleteRemediation(r))\n                          );\n                          loadRemediations();\n                          selector.reset();\n                        }\n                      }}\n                    />\n                  )}\n                  <StackItem>\n                    <RemediationTable\n                      remediations={remediations}\n                      loadRemediations={loadRemediations}\n                      sorter={sorter}\n                      filter={filter}\n                      selector={selector}\n                      pagination={pagination}\n                      shouldUpdateGrid={shouldUpdateGrid}\n                      setShouldUpdateGrid={setShouldUpdateGrid}\n                      setRemediationCount={setRemediationCount}\n                      showArchived={showArchived}\n                      setShowArchived={setShowArchived}\n                    />\n                  </StackItem>\n                </Stack>\n              </Main>\n            </React.Fragment>\n          )\n        }\n      </PermissionContext.Consumer>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Switch, Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, lazy, Suspense } from 'react';\nimport Home from './routes/Home';\nconst RemediationDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"RemediationDetails\" */ './routes/RemediationDetails'\n  )\n);\nconst ActivityDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"ActivityDetails\" */ './components/ActivityDetails'\n  )\n);\nconst ExecutorDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"ExecutorDetails\" */ './components/ExecutorDetails/ExecutorDetails'\n  )\n);\n\nexport const routes = {\n  home: '/',\n  details: '/:id',\n  runDetails: '/:id/:run_id',\n  executorDetails: '/:id/:run_id/:executor_id',\n};\n\nexport const Routes = () => (\n  <Suspense fallback={<Fragment />}>\n    <Switch>\n      <Route exact path={routes.home} component={Home} />\n      <Route exact path={routes.details} component={RemediationDetails} />\n      <Route\n        exact\n        path={routes.runDetails}\n        render={(props) => <ActivityDetails remediation={{}} {...props} />}\n      />\n      <Route\n        exact\n        path={routes.executorDetails}\n        render={(props) => <ExecutorDetails {...props} />}\n      />\n      <Redirect path=\"*\" to={routes.home} push />\n    </Switch>\n  </Suspense>\n);\n\nRoutes.propTypes = {\n  childProps: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func,\n    }),\n  }),\n};\n","import React from 'react';\n\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst GlobalSkeleton = () => (\n  <React.Fragment>\n    <PageHeader className=\"ins-remediations__skeleton\">\n      <PageHeaderTitle className=\"rem-s-page-header\" title=\"Remediations\" />\n    </PageHeader>\n    <Main>\n      <Spinner centered />\n    </Main>\n  </React.Fragment>\n);\n\nexport default GlobalSkeleton;\n","import PropTypes from 'prop-types';\nimport React, { createContext, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport GlobalSkeleton from './skeletons/GlobalSkeleton';\n\nimport { getIsReceptorConfigured } from './api';\n\n// Notifications\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nexport const PermissionContext = createContext();\n\nclass App extends Component {\n  unregister;\n  constructor() {\n    super();\n    this.state = {\n      readPermission: undefined,\n      writePermission: undefined,\n      executePermission: undefined,\n      isReceptorConfigured: undefined,\n      arePermissionLoaded: false,\n      hasSmartManagement: undefined,\n    };\n  }\n\n  handlePermissionUpdate = (hasRead, hasWrite, hasExecute) =>\n    this.setState({\n      readPermission: hasRead,\n      writePermission: hasWrite,\n      executePermission: hasExecute,\n      arePermissionLoaded: true,\n    });\n\n  componentWillUnmount() {\n    if (typeof this.unregister === 'function') {\n      this.unregister();\n    }\n  }\n  async componentDidMount() {\n    insights.chrome.init();\n    insights.chrome?.hideGlobalFilter?.();\n    insights.chrome.identifyApp('remediations');\n    // wait for auth first, otherwise the call to RBAC may 401\n    await window.insights.chrome.auth.getUser().then((user) =>\n      this.setState({\n        hasSmartManagement: user.entitlements.smart_management.is_entitled,\n      })\n    );\n    getIsReceptorConfigured().then((isConfigured) =>\n      this.setState({\n        isReceptorConfigured: isConfigured.data.length > 0,\n      })\n    );\n    this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (typeof event?.domEvent?.href === 'string') {\n        this.props.history.push('/');\n      }\n    });\n    window.insights.chrome\n      .getUserPermissions('remediations')\n      .then((remediationsPermissions) => {\n        const permissionList = remediationsPermissions.map(\n          (permissions) => permissions.permission\n        );\n        if (\n          permissionList.includes(\n            'remediations:*:*' || 'remediations:remediation:*'\n          )\n        ) {\n          this.handlePermissionUpdate(true, true, true);\n        } else {\n          this.handlePermissionUpdate(\n            permissionList.includes(\n              'remediations:remediation:read' || 'remediations:*:read'\n            ),\n            permissionList.includes(\n              'remediations:remediation:write' || 'remediations:*:write'\n            ),\n            permissionList.includes(\n              'remediations:remediation:execute' || 'remediations:*:execute'\n            )\n          );\n        }\n      });\n  }\n\n  render() {\n    const {\n      readPermission,\n      writePermission,\n      executePermission,\n      arePermissionLoaded,\n      isReceptorConfigured,\n      hasSmartManagement,\n    } = this.state;\n\n    return arePermissionLoaded ? (\n      <PermissionContext.Provider\n        value={{\n          permissions: {\n            read: readPermission,\n            write: writePermission,\n            execute: executePermission,\n          },\n          isReceptorConfigured,\n          hasSmartManagement,\n        }}\n      >\n        <NotificationsPortal />\n        <Routes childProps={this.props} />\n      </PermissionContext.Provider>\n    ) : (\n      <GlobalSkeleton />\n    );\n  }\n}\n\nApp.propTypes = {\n  history: PropTypes.object,\n};\n\n/**\n * withRouter: https://reacttraining.com/react-router/web/api/withRouter\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter(connect()(App));\n","import { getStore } from '../store';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport function dispatchAction(actionCreator) {\n  const store = getStore();\n  return store.dispatch(actionCreator);\n}\n\nexport const dispatchNotification = (notification) => {\n  dispatchAction(addNotification(notification));\n};\n","import { ACTION_TYPES } from './constants';\nimport {\n  remediations,\n  resolutions,\n  getRemediationStatus,\n  sources,\n  deleteSystemsFromRemediation,\n} from './api';\n\nexport const loadRemediations = (\n  sortBy = 'updated_at',\n  sortDir = 'desc',\n  filter,\n  limit,\n  offset,\n  system,\n  hideArchived\n) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATIONS,\n  payload: remediations.getRemediations(\n    `${sortDir === 'desc' ? '-' : ''}${sortBy}`,\n    filter,\n    limit,\n    offset,\n    system,\n    hideArchived\n  ),\n});\n\nexport const loadRemediation = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const loadRemediationStatus = (id) => ({\n  type: ACTION_TYPES.LOAD_REMEDIATION_STATUS,\n  payload: getRemediationStatus(id), // TODO\n});\n\nexport const refreshRemediation = (id) => ({\n  type: ACTION_TYPES.REFRESH_REMEDIATION,\n  payload: remediations.getRemediation(id),\n});\n\nexport const createRemediation = (data) => ({\n  type: ACTION_TYPES.CREATE_REMEDIATIONS,\n  payload: remediations.createRemediation(data),\n});\n\nexport const patchRemediation = (id, data) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION,\n  payload: remediations.updateRemediation(id, data).then(() => data),\n});\n\nexport const deleteRemediation = (id) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION,\n  payload: remediations.deleteRemediation(id),\n});\n\nexport const deleteRemediationIssue = (id, issueId) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE,\n  payload: remediations\n    .deleteRemediationIssue(id, issueId)\n    .then(() => ({ id, issueId })),\n});\n\nexport const deleteRemediationIssueSystem = (id, issue, system) => ({\n  type: ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM,\n  payload: remediations\n    .deleteRemediationIssueSystem(id, issue, system)\n    .then(() => ({ id, issue, system })),\n});\n\nexport const patchRemediationIssue = (id, issue, resolution) => ({\n  type: ACTION_TYPES.PATCH_REMEDIATION_ISSUE,\n  payload: remediations.updateRemediationIssue(id, issue, { resolution }),\n});\n\nexport const getResolutions = (ruleId) => ({\n  type: ACTION_TYPES.GET_RESOLUTIONS,\n  payload: resolutions.getResolutionsForIssue(ruleId),\n});\n\nexport const getConnectionStatus = (id) => {\n  return {\n    type: ACTION_TYPES.GET_CONNECTION_STATUS,\n    payload: remediations.getRemediationConnectionStatus(id),\n  };\n};\n\nexport const runRemediation = (id, etag, exclude) => {\n  return {\n    type: ACTION_TYPES.RUN_REMEDIATION,\n    payload: remediations.runRemediation(id, {\n      headers: { 'If-Match': etag },\n      data: { exclude },\n    }),\n  };\n};\n\nexport const setEtag = (etag) => ({\n  type: ACTION_TYPES.SET_ETAG,\n  payload: { etag },\n});\n\nexport const getPlaybookRuns = (remediationId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUNS,\n  payload: remediations.listPlaybookRuns(remediationId),\n});\n\nexport const cancelPlaybookRuns = (remediationId, runId) => ({\n  type: ACTION_TYPES.CANCEL_PLAYBOOK_RUNS,\n  payload: remediations.cancelPlaybookRuns(remediationId, runId),\n});\n\nexport const getPlaybookRun = (remediationId, runId) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN,\n  payload: remediations.getPlaybookRunDetails(remediationId, runId),\n});\n\nexport const getPlaybookRunSystems = (\n  remediationId,\n  runId,\n  executorId,\n  limit = 50,\n  offset = 0,\n  ansibleHost\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS,\n  payload: remediations.getPlaybookRunSystems(\n    remediationId,\n    runId,\n    executorId,\n    limit,\n    offset,\n    ansibleHost\n  ),\n});\n\nexport const getPlaybookRunSystemDetails = (\n  remediationId,\n  runId,\n  systemId\n) => ({\n  type: ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS,\n  payload: remediations.getPlaybookRunSystemDetails(\n    remediationId,\n    runId,\n    systemId\n  ),\n});\n\nexport const expandInventoryTable = (id, isOpen) => ({\n  type: ACTION_TYPES.EXPAND_INVENTORY_TABLE,\n  payload: {\n    id,\n    isOpen,\n  },\n});\n\nexport const getEndpoint = (id, options = {}) => ({\n  type: ACTION_TYPES.GET_ENDPOINT,\n  payload: sources.showEndpoint(id, options),\n});\n// payload: sources.listEndpoints(id, options)\n\nexport const selectEntity = (id, selected) => ({\n  type: ACTION_TYPES.SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const deleteSystems = (systems, remediation) => ({\n  type: ACTION_TYPES.DELTE_SYSTEMS,\n  payload: deleteSystemsFromRemediation(systems, remediation),\n});\n\nexport const checkExecutable = (id) => ({\n  type: ACTION_TYPES.CHECK_EXECUTABLE,\n  payload: remediations.checkExecutable(id),\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\n\nconst NoReceptorBanner = ({ onClose, ...props }) => {\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"Do more with your Find it Fix it capabilities\"\n      actionClose={<AlertActionCloseButton onClose={onClose} />}\n      {...props}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          Configure your systems with Cloud Connector to fix systems across all\n          your Satellite instances.\n        </StackItem>\n        <StackItem>\n          {/* eslint-disable-next-line max-len */}\n          <a href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index\">\n            Learn how to configure\n          </a>\n        </StackItem>\n      </Stack>\n    </Alert>\n  );\n};\n\nexport default NoReceptorBanner;\n\nNoReceptorBanner.propTypes = {\n  onClose: propTypes.func,\n};\n\n/* eslint-disable no-console */\nNoReceptorBanner.defaultProps = {\n  onClose: () => undefined,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './ConfirmationDialog.scss';\n\nexport default function ConfirmationDialog({\n  isOpen = true,\n  title = 'Remove system?',\n  text = 'This action cannot be undone',\n  confirmText = 'Remove system',\n  onClose = (f) => f,\n}) {\n  return (\n    <Modal\n      title={\n        <div>\n          <ExclamationTriangleIcon className=\"rem-m-alert rem-c-delete-icon pf-u-mr-xs\" />\n          {title}\n        </div>\n      }\n      className=\"remediations rem-c-dialog\"\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      onClose={() => onClose(false)}\n      isFooterLeftAligned\n      actions={[\n        <Button\n          key=\"confirm\"\n          variant=\"danger\"\n          ouiaId=\"confirm\"\n          onClick={() => onClose(true)}\n        >\n          {confirmText}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          ouiaId=\"cancel\"\n          onClick={() => onClose(false)}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <h2>{text}</h2>\n    </Modal>\n  );\n}\n\nConfirmationDialog.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  text: PropTypes.string,\n  confirmText: PropTypes.string,\n  onClose: PropTypes.func,\n};\n","import React from 'react';\n\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\n\nimport { LockIcon } from '@patternfly/react-icons';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\n\nconst DeniedState = () => {\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Remediations\" />\n      </PageHeader>\n      <Main>\n        <EmptyState\n          variant={EmptyStateVariant.full}\n          className=\"rem-c-denied-state\"\n        >\n          <EmptyStateIcon icon={LockIcon} />\n          <Title headingLevel=\"h5\" size=\"lg\">\n            You do not have access to Remediations\n          </Title>\n          <EmptyStateBody>\n            Contact your organization administrator(s) for more information.\n          </EmptyStateBody>\n          {document.referrer ? (\n            <Button variant=\"primary\" onClick={() => history.back()}>\n              Return to previous page\n            </Button>\n          ) : (\n            <Button variant=\"primary\" component=\"a\" href=\".\">\n              Go to landing page\n            </Button>\n          )}\n        </EmptyState>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default DeniedState;\n","import React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport DesktopIcon from '@patternfly/react-icons/dist/js/icons/desktop-icon';\nimport PropTypes from 'prop-types';\n\nconst EmptyExecutePlaybookState = () => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={DesktopIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        This playbook has no systems associated with it.\n      </Title>\n      <EmptyStateBody>\n        Add at least one system and action to this playbook to use remote\n        execution.\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default EmptyExecutePlaybookState;\n\nEmptyExecutePlaybookState.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","/* eslint-disable camelcase */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n  Alert,\n  Tooltip,\n  ExpandableSection,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { downloadPlaybook } from '../../api';\nimport { styledConnectionStatus } from '../statusHelper';\nimport {\n  TableHeader,\n  Table,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport './ExecuteModal.scss';\nimport EmptyExecutePlaybookState from '../EmptyExecutePlaybookState';\nimport { dispatchNotification } from '../../Utilities/dispatcher';\n\nexport const ExecuteModal = ({\n  isOpen,\n  onClose,\n  showRefresh,\n  isLoading,\n  data,\n  remediationId,\n  remediationName,\n  issueCount,\n  runRemediation,\n  etag,\n  setEtag,\n}) => {\n  const [isUserEntitled, setIsUserEntitled] = useState(false);\n  const [connected, setConnected] = useState([]);\n  const [disconnected, setDisconnected] = useState([]);\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  useEffect(() => {\n    window.insights.chrome.auth\n      .getUser()\n      .then((user) =>\n        setIsUserEntitled(user.entitlements.smart_management.is_entitled)\n      );\n  }, []);\n\n  useEffect(() => {\n    const [con, dis] = data.reduce(\n      ([pass, fail], e) =>\n        e && e.connection_status === 'connected'\n          ? [[...pass, { ...e }], fail]\n          : [pass, [...fail, e]],\n      [[], []]\n    );\n    setConnected(con);\n    setDisconnected(dis);\n  }, [data]);\n\n  const generateRowsStatus = (con) => {\n    return styledConnectionStatus(con.connection_status);\n  };\n\n  const rows = [...connected, ...disconnected].map((con) => ({\n    cells: [\n      {\n        title: con.executor_name ? (\n          <Tooltip content={`${con.executor_name}`}>\n            <span>\n              {con.executor_name.length > 25\n                ? `${con.executor_name.slice(0, 22)}...`\n                : con.executor_name}\n            </span>\n          </Tooltip>\n        ) : (\n          'Direct connection'\n        ),\n      },\n      con.system_count,\n      isUserEntitled && {\n        title: generateRowsStatus(con),\n      },\n    ],\n  }));\n  const connectedCount = connected.reduce((acc, e) => e.system_count + acc, 0);\n  const systemCount = data.reduce((acc, e) => e.system_count + acc, 0);\n\n  const pluralize = (number, str) =>\n    number > 1 ? `${number} ${str}s` : `${number} ${str}`;\n\n  return (\n    <Modal\n      className=\"remediations rem-c-execute-modal\"\n      variant={isDebug() ? ModalVariant.large : ModalVariant.small}\n      title={'Execute playbook'}\n      isOpen={isOpen}\n      onClose={onClose}\n      isFooterLeftAligned\n      actions={\n        systemCount !== 0\n          ? [\n              <Button\n                key=\"confirm\"\n                variant=\"primary\"\n                ouiaId=\"etag\"\n                isDisabled={connected.length === 0}\n                onClick={() => {\n                  runRemediation(\n                    remediationId,\n                    etag,\n                    disconnected.map((e) => e.executor_id).filter((e) => e)\n                  );\n                  dispatchNotification({\n                    title: `Executing playbook ${remediationName}`,\n                    description: (\n                      <span>\n                        View results in the <b>Activity tab</b>\n                      </span>\n                    ),\n                    variant: 'success',\n                    dismissable: true,\n                    autoDismiss: true,\n                  });\n                }}\n              >\n                {isLoading\n                  ? 'Execute playbook'\n                  : `Execute playbook on ${pluralize(\n                      connectedCount,\n                      'system'\n                    )}`}\n              </Button>,\n              <Button\n                key=\"download\"\n                variant=\"secondary\"\n                ouiaId=\"download-playbook\"\n                onClick={() => {\n                  downloadPlaybook(remediationId);\n                  dispatchNotification({\n                    title: 'Preparing playbook for download',\n                    description:\n                      'Once complete, your download will start automatically.',\n                    variant: 'info',\n                    dismissable: true,\n                    autoDismiss: true,\n                  });\n                }}\n              >\n                Download playbook\n              </Button>,\n              isDebug() ? (\n                <Button\n                  key=\"reset-etag\"\n                  onClick={() => setEtag('test')}\n                  ouiaId=\"reset-etag\"\n                >\n                  Reset etag\n                </Button>\n              ) : null,\n            ]\n          : [\n              <Button\n                key=\"close-modal\"\n                onClick={() => onClose()}\n                variant=\"primary\"\n              >\n                Close\n              </Button>,\n            ]\n      }\n    >\n      <div className=\"rem-c-execute-modal__body\">\n        {showRefresh ? (\n          <Alert\n            variant=\"warning\"\n            isInline\n            title=\"The connection status of systems associated with this Playbook has changed. Please review again.\"\n          />\n        ) : null}\n        <TextContent>\n          {isLoading ? (\n            <Skeleton size=\"lg\" />\n          ) : (\n            <Text component={TextVariants.p}>\n              Playbook contains <b>{`${pluralize(issueCount, 'action')}`}</b>\n              &nbsp;affecting\n              <b> {`${pluralize(systemCount, 'system')}.`} </b>\n            </Text>\n          )}\n          <Text>\n            <ExpandableSection toggleText=\"About remote execution with Cloud connector\">\n              Playbooks can be executed on systems which:\n              <List>\n                <ListItem>\n                  Are connected to Insights via a Satellite instance which has\n                  Receptor/Cloud Connector enabled, or <br />\n                  <Button\n                    className=\"pf-u-p-0\"\n                    key=\"download\"\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    // eslint-disable-next-line max-len\n                    href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    How to configure Receptor/Cloud Connector on Red Hat\n                    Satellite &nbsp;\n                    <ExternalLinkAltIcon />\n                  </Button>\n                </ListItem>\n                <ListItem>\n                  Are directly connected to Insights via Red Hat connector, and\n                  Cloud Connector is enabled <br />\n                  <Button\n                    className=\"pf-u-p-0\"\n                    key=\"configure\"\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    // eslint-disable-next-line max-len\n                    href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/red_hat_connector_configuration_guide/index\"\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    How to enable Cloud Connector with Red Hat connect &nbsp;\n                    <ExternalLinkAltIcon />\n                  </Button>\n                </ListItem>\n              </List>\n            </ExpandableSection>\n          </Text>\n          <Text component={TextVariants.p}>\n            Executed Ansible Playbooks run on eligible systems with Cloud\n            Connector. The playbook will be pushed immediately after selecting\n            “Execute playbook”. If the playbook has “Auto reboot” on, systems\n            requiring reboot to complete an action will reboot.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            isInline\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/articles/rhc\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            Learn more about Cloud Connector &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n          {rows.length !== 0 && (\n            <Text component={TextVariants.h4}>\n              Connection status of systems\n            </Text>\n          )}\n        </TextContent>\n        {isLoading && <Skeleton size=\"lg\" />}\n        {!isLoading && systemCount !== 0 && (\n          <Table\n            variant={TableVariant.compact}\n            aria-label=\"Systems\"\n            cells={[\n              {\n                title: 'Connection type',\n                value: 'type',\n              },\n              {\n                title: 'Systems',\n                value: 'count',\n              },\n              isUserEntitled && {\n                title: 'Connection status',\n                value: 'status',\n              },\n            ]}\n            rows={rows}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n        {!isLoading && systemCount === 0 && <EmptyExecutePlaybookState />}\n      </div>\n    </Modal>\n  );\n};\n\nExecuteModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  showRefresh: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  data: PropTypes.array,\n  remediationId: PropTypes.string,\n  remediationName: PropTypes.string,\n  issueCount: PropTypes.number,\n  runRemediation: PropTypes.func,\n  etag: PropTypes.string,\n  setEtag: PropTypes.func,\n};\n","import React from 'react';\n\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExternalLinkAltIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  SyncIcon,\n} from '@patternfly/react-icons';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\n\nimport { CancelButton } from '../containers/CancelButton';\n\nimport { capitalize } from '../Utilities/utils';\n\nconst connectorUrl = () =>\n  insights.chrome.isBeta()\n    ? `${window.location.origin}/beta/settings/connector`\n    : `${window.location.origin}/settings/connector`;\n\nexport const normalizeStatus = (status) =>\n  ({\n    running: 'running',\n    pending: 'running',\n    acked: 'running',\n    failure: 'failure',\n    canceled: 'canceled',\n    success: 'success',\n  }[status]);\n\nexport const renderStatusIcon = (status) =>\n  ({\n    running: (\n      <InProgressIcon\n        className=\"rem-c-running\"\n        aria-label=\"connection status\"\n      />\n    ),\n    success: (\n      <CheckCircleIcon\n        className=\"rem-c-success\"\n        aria-label=\"connection status\"\n      />\n    ),\n    failure: (\n      <TimesCircleIcon\n        className=\"rem-c-failure\"\n        aria-label=\"connection status\"\n      />\n    ),\n    canceled: (\n      <TimesCircleIcon\n        className=\"rem-c-canceled\"\n        aria-label=\"connection status\"\n      />\n    ),\n  }[status]);\n\nexport const renderStatus = (status, text) =>\n  ({\n    running: (\n      <Flex className=\"rem-c-running\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Running'}</b>\n        </FlexItem>\n        <FlexItem>\n          <InProgressIcon aria-label=\"connection status: running\" />\n        </FlexItem>\n      </Flex>\n    ),\n    success: (\n      <Flex className=\"rem-c-success\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Success'}</b>\n        </FlexItem>\n        <FlexItem>\n          <CheckCircleIcon aria-label=\"connection status: success\" />\n        </FlexItem>\n      </Flex>\n    ),\n    failure: (\n      <Flex className=\"rem-c-failure\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Failed'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: failed\" />\n        </FlexItem>\n      </Flex>\n    ),\n    canceled: (\n      <Flex className=\"rem-c-canceled\" spacer={{ default: 'space-items-sm' }}>\n        <FlexItem>\n          <b>{text || 'Canceled'}</b>\n        </FlexItem>\n        <FlexItem>\n          <TimesCircleIcon aria-label=\"connection status: canceled\" />\n        </FlexItem>\n      </Flex>\n    ),\n  }[status]);\n\nconst statusTextClass = 'rem-c-status-text';\nexport const statusText = (executorStatus) =>\n  ({\n    running: <b className={`${statusTextClass} rem-c-running`}>Running</b>,\n    pending: <b className={`${statusTextClass} rem-c-running`}>Pending</b>,\n    acked: <b className={`${statusTextClass} rem-c-running`}> Acked </b>,\n    success: <b className={`${statusTextClass} rem-c-success`}>Succeeded</b>,\n    failure: <b className={`${statusTextClass} rem-c-failure`}>Failed</b>,\n    canceled: <b className={`${statusTextClass} rem-c-canceled`}>Canceled</b>,\n  }[executorStatus]);\n\nexport const pluralize = (number, str) =>\n  number === 1 ? `${number} ${str}` : `${number} ${str}s`;\n\nexport const StatusSummary = ({\n  executorStatus,\n  permission,\n  hasCancel,\n  counts,\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const runningCount =\n    counts.acked && !counts.acked.isNaN()\n      ? counts.running + counts.pending + counts.acked\n      : counts.running + counts.pending;\n  const failCount = counts.failure + counts.canceled;\n  const passCount = counts.success;\n  const isDebug = () => localStorage.getItem('remediations:debug') === 'true';\n\n  const statusBar = (\n    <Flex className=\"rem-c-status-bar\">\n      {executorStatus && <FlexItem>{statusText(executorStatus)}</FlexItem>}\n      <FlexItem>{renderStatus('success', `${passCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('failure', `${failCount}`)}</FlexItem>\n      <FlexItem>{renderStatus('running', `${runningCount}`)}</FlexItem>\n      {isDebug() &&\n        hasCancel &&\n        permission.permissions.execute &&\n        executorStatus &&\n        normalizeStatus(executorStatus) === 'running' && (\n          <FlexItem>\n            <CancelButton\n              remediationName={remediationName}\n              remediationId={remediationId}\n              playbookId={playbookId}\n            />\n          </FlexItem>\n        )}\n    </Flex>\n  );\n\n  if (executorStatus) {\n    return (\n      <Tooltip\n        position=\"right\"\n        className=\"ins-c-status-tooltip\"\n        enableFlip\n        content={\n          <div>\n            Run: {capitalize(executorStatus)} <br />\n            Success: {pluralize(counts.success, 'system')} <br />\n            Failed: {pluralize(counts.failure, 'system')} <br />\n            Canceled: {pluralize(counts.canceled, 'system')} <br />\n            {counts.acked && !counts.acked.isNaN()\n              ? `Pending, Running, Acked: ${pluralize(\n                  counts.pending + counts.running + counts.acked,\n                  'system'\n                )}`\n              : `Pending, Running: ${pluralize(\n                  counts.pending + counts.running,\n                  'system'\n                )}`}\n          </div>\n        }\n      >\n        {statusBar}\n      </Tooltip>\n    );\n  }\n\n  return statusBar;\n};\n\nexport const styledConnectionStatus = (status) =>\n  ({\n    connected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <CheckCircleIcon\n            className=\"rem-c-reboot-check-circle rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Ready\n        </Text>\n      </TextContent>\n    ),\n    disconnected: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Connection issue\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Receptor not responding\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"troubleshoot\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Troubleshoot\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_executor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Direct connection.\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Connect your systems to Satellite to automatically remediate.\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2020-10/html/remediating_issues_across_your_red_hat_satellite_infrastructure_using_red_hat_insights/configuring-your-satellite-infrastructure-to-communicate-with-insights\"\n          >\n            Learn how to connect &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_source: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Satellite not configured\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Satellite not registered for Playbook execution\n          </Text>\n          {/* <Button\n                    style={ { padding: '0px' } }\n                    key=\"configure\"\n                    // eslint-disable-next-line no-console\n                    variant='link' onClick={ () => console.log('TODO: add link') }>\n                    Learn how to register Satellite\n                </Button> */}\n        </Text>\n      </TextContent>\n    ),\n    // eslint-disable-next-line camelcase\n    no_receptor: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <ExclamationCircleIcon\n            className=\"rem-c-failure rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Configure Cloud connector to automatically remediate\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"configure\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html-single/using_cloud_connector_to_remediate_issues_across_your_red_hat_satellite_infrastructure/index#configuring-your-satellite-infrastructure-to-communicate-with-insights\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_rhc: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl()}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/red_hat_connector_configuration_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    no_smart_management: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Not entitled\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights is supported only for systems with Cloud\n            connector, a feature of Smart Management\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"#\"\n          >\n            Learn about Smart Management &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    disabled: (\n      <TextContent>\n        <Text component={TextVariants.p}>\n          Cannot remediate - Cloud connector not defined\n          <Text component={TextVariants.small} style={{ margin: '0px' }}>\n            Remediation from Insights requires Cloud connector. Cloud connector\n            can be enabled via Satelite, or through &nbsp;\n            <Button\n              className=\"pf-u-p-0\"\n              key=\"configure\"\n              variant=\"link\"\n              component=\"a\"\n              // eslint-disable-next-line max-len\n              href={connectorUrl()}\n            >\n              RHC (Red Hat connector)\n            </Button>\n          </Text>\n          <Button\n            className=\"pf-u-p-0\"\n            key=\"download\"\n            variant=\"link\"\n            component=\"a\"\n            // eslint-disable-next-line max-len\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/red_hat_connector_configuration_guide/index\"\n          >\n            Learn how to configure &nbsp;\n            <ExternalLinkAltIcon />\n          </Button>\n        </Text>\n      </TextContent>\n    ),\n    loading: (\n      <TextContent>\n        <Text component={TextVariants.small}>\n          <SyncIcon\n            className=\"rem-c-connection-status\"\n            aria-label=\"connection status\"\n          />\n          Checking\n        </Text>\n      </TextContent>\n    ),\n  }[status]);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalVariant, Button, Title } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport './WarningModal.scss';\n\nexport const WarningModal = ({ isOpen, onModalCancel, onConfirmCancel }) => (\n  <Modal\n    header={\n      <Title\n        headingLevel=\"h1\"\n        size=\"2xl\"\n        className=\"ins-c-modal__cancel-run-warning-header\"\n      >\n        <ExclamationTriangleIcon\n          size=\"md\"\n          className=\"ins-c-modal__cancel-run-warning-header--icon\"\n        />\n        Cancel remediation process\n      </Title>\n    }\n    title=\"Cancel remediation process\"\n    hideTitle\n    variant={ModalVariant.small}\n    className=\"ins-c-modal__cancel-run-warning\"\n    isOpen={isOpen}\n    onClose={onModalCancel}\n    actions={[\n      <Button\n        key=\"confirm\"\n        variant=\"danger\"\n        ouiaId=\"cancel_playbook\"\n        onClick={onConfirmCancel}\n      >\n        Cancel playbook process\n      </Button>,\n      <Button\n        key=\"cancel\"\n        variant=\"link\"\n        ouiaId=\"cancel\"\n        onClick={onModalCancel}\n      >\n        Cancel\n      </Button>,\n    ]}\n    isFooterLeftAligned\n  >\n    <span>\n      Canceling a running playbook process only affects pending and running\n      tasks. It does not affect any previously succeeded or failed tasks that\n      have already run.\n    </span>\n  </Modal>\n);\n\nWarningModal.propTypes = {\n  type: PropTypes.string,\n  isOpen: PropTypes.bool,\n  onModalCancel: PropTypes.func,\n  onConfirmCancel: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@patternfly/react-core';\nimport { WarningModal } from '../components/Modals/WarningModal';\n\nimport { useDispatch } from 'react-redux';\nimport { cancelPlaybookRuns } from '../actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const CancelButton = ({\n  remediationName,\n  remediationId,\n  playbookId,\n}) => {\n  const [cancelWarningVisible, setcancelWarningVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const cancelRun = (remediationName, remediationId, playbookId) => {\n    dispatch(cancelPlaybookRuns(remediationId, playbookId));\n    dispatch(\n      addNotification({\n        variant: 'success',\n        title: `Canceling playbook ${remediationName} successful`,\n        dismissDelay: 8000,\n        dismissable: false,\n      })\n    );\n    setcancelWarningVisible(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"link\" onClick={() => setcancelWarningVisible(true)}>\n        Cancel process\n      </Button>\n      <WarningModal\n        isOpen={cancelWarningVisible}\n        onModalCancel={() => setcancelWarningVisible(false)}\n        onConfirmCancel={() =>\n          cancelRun(remediationName, remediationId, playbookId)\n        }\n      />\n    </React.Fragment>\n  );\n};\n\nCancelButton.propTypes = {\n  remediationName: PropTypes.string,\n  remediationId: PropTypes.string,\n  playbookId: PropTypes.string,\n};\n","import { useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport filter from 'lodash/filter';\nimport pickBy from 'lodash/pickBy';\nimport keys from 'lodash/keys';\nimport keyBy from 'lodash/keyBy';\nimport mapValues from 'lodash/mapValues';\nimport identity from 'lodash/identity';\nimport intersection from 'lodash/intersection';\n\nimport { SEARCH_DEBOUNCE_DELAY } from '../constants';\n\nconst chain =\n  (f1, f2) =>\n  (...args) => {\n    f1(...args);\n    f2(...args);\n  };\n\n/**\n * Returns a function f that, when called, invokes a sequence of callback functions.\n *\n * By default, this sequence only contains the identity function.\n * Additional callback functions can be added to the sequence by calling f.add().\n * When the function is called with parameters, e.g. f(1, 2), these parameters are passed to callback functions.\n * Callback functions may return a promise however these will *not* be awaited.\n * If a callback function throws an exception any following callback functions will *not* be invoked.\n *\n * Usage:\n * const f = callbacks();\n *\n * f.add(value => console.log(value));\n * f.add(value => console.log(value + 1));\n * f.add(value => console.log(value + 2));\n *\n * f(5); // prints 5 6 7\n */\nfunction callbacks() {\n  let cb = identity;\n  const fn = (...args) => cb(...args);\n  fn.add = (f) => (cb = chain(cb, f));\n  return fn;\n}\n\nfunction assertId(id) {\n  if (id === undefined) {\n    throw new Error('row does not define id!');\n  }\n}\n\nexport function useSorter(defaultSortBy = 2, defaultSortDir = 'asc') {\n  const [sortBy, setSortBy] = useState(defaultSortBy);\n  const [sortDir, setSortDir] = useState(defaultSortDir);\n\n  const cb = callbacks();\n\n  return {\n    sortBy,\n    sortDir,\n    onChange: cb.add,\n    props: {\n      sortBy: {\n        index: sortBy,\n        direction: sortDir,\n      },\n      onSort(event, sortBy, sortDir) {\n        cb(sortBy, sortDir);\n        setSortBy(sortBy);\n        setSortDir(sortDir);\n      },\n    },\n  };\n}\n\nexport function useFilter() {\n  const [value, setValue] = useState('');\n\n  const cb = callbacks();\n\n  const onValueChange = debounce((value) => {\n    cb(value);\n    setValue(value);\n  }, SEARCH_DEBOUNCE_DELAY);\n\n  return {\n    value,\n    setValue: onValueChange,\n    onChange: cb.add,\n    props: {\n      onFilterChange: onValueChange,\n    },\n  };\n}\n\nexport function useExpander(rowToId = (row) => row.id) {\n  const [value, setValue] = useState(false);\n  let rows = false;\n\n  return {\n    value,\n    register: (r) => {\n      rows = r;\n      rows.forEach((row) => {\n        if (rowToId(row) === value) {\n          row.isOpen = true;\n        }\n      });\n    },\n    props: {\n      onCollapse(event, index, value) {\n        if (!rows) {\n          throw new Error('register() not called on useExpander()');\n        }\n\n        const id = rowToId(rows[index]);\n        assertId(id);\n\n        setValue(value ? id : false);\n      },\n    },\n  };\n}\n\nexport function usePagination() {\n  const [page, setPage] = useState(1);\n  const [pageDebounced, setPageDebounced] = useState(1);\n  const [pageSize, setPageSize] = useState(20);\n\n  const reset = () => setPage(1);\n  const cb = callbacks();\n\n  return {\n    page,\n    pageDebounced,\n    offset: (page - 1) * pageSize,\n    pageSize,\n    setPage,\n    onChange: cb.add,\n    reset,\n    props: {\n      page,\n      perPage: pageSize,\n      onSetPage(event, value) {\n        setPage(value);\n        event.target.tagName === 'INPUT'\n          ? debounce(setPageDebounced, SEARCH_DEBOUNCE_DELAY)(value)\n          : setPageDebounced(value);\n        cb(value, pageSize);\n      },\n      onPerPageSelect(event, value) {\n        cb(page, value);\n        reset();\n        setPageSize(value);\n      },\n    },\n  };\n}\n\nfunction onSelectOne(selected, isSelected, id) {\n  assertId(id);\n\n  const result = {\n    ...selected,\n    [id]: isSelected,\n  };\n\n  return result;\n}\n\nfunction onSelectPage(rows, value, isSelected, rowToId) {\n  const rowIds = keyBy(\n    filter(rows, (row) => rowToId(row)),\n    rowToId\n  );\n\n  return {\n    ...value,\n    ...mapValues(rowIds, () => isSelected),\n  };\n}\n\nfunction isSelected(value, id) {\n  return Object.prototype.hasOwnProperty.call(value, id) ? value[id] : false;\n}\n\nexport function useSelector(rowToId = (row) => row.id) {\n  const [value, setValue] = useState({});\n  let rows = false;\n\n  return {\n    getSelectedIds(possibleIds) {\n      const selected = keys(pickBy(value, identity));\n      if (possibleIds) {\n        return intersection(selected, possibleIds);\n      }\n\n      return selected;\n    },\n    register: (r) => {\n      rows = r;\n      rows.forEach((row) => (row.selected = value[rowToId(row)] === true));\n    },\n    reset: () => setValue({}),\n    props: {\n      onSelect: (selectionType, isSelected, index) => {\n        if (!rows) {\n          throw new Error('register() not called on useSelector()');\n        }\n\n        switch (selectionType) {\n          case 'none': {\n            setValue({});\n            break;\n          }\n          case 'page': {\n            setValue(onSelectPage(rows, value, isSelected, rowToId));\n            break;\n          }\n          default: {\n            setValue(onSelectOne(value, isSelected, rowToId(rows[index])));\n          }\n        }\n      },\n    },\n    tbodyProps: {\n      onRowClick(event, row) {\n        if (['A', 'BUTTON', 'INPUT'].includes(event.target.tagName)) {\n          return;\n        }\n\n        const id = rowToId(row);\n        assertId(id);\n        setValue((value) => ({\n          ...value,\n          [id]: !isSelected(value, id),\n        }));\n      },\n    },\n  };\n}\n","function assert(test, msg) {\n  if (!test) {\n    throw new TypeError(msg);\n  }\n}\n\nfunction checkAllowedKeys(reference, ...keys) {\n  Object.keys(reference).forEach((key) =>\n    assert(\n      keys.includes(key),\n      `Unexpected key: ${key} Expected one of: ${keys}`\n    )\n  );\n}\n\nfunction checkRequiredKeys(reference, ...keys) {\n  keys.forEach((key) =>\n    assert(\n      Object.prototype.hasOwnProperty.call(reference, key),\n      `Required key missing: ${key}`\n    )\n  );\n}\n\nfunction checkSystems(systems) {\n  assert(Array.isArray(systems), 'Systems must be an array');\n  assert(systems.length, 'Systems array must not be empty');\n  systems.forEach((system) =>\n    assert(typeof system === 'string', 'System must be of type string')\n  );\n}\n\nexport default function validate(data) {\n  assert(typeof data === 'object' && data !== null);\n  checkAllowedKeys(data, 'issues', 'systems', 'onRemediationCreated');\n  checkRequiredKeys(data, 'issues');\n\n  assert(Array.isArray(data.issues), 'Issues must be an array');\n  assert(data.issues.length, 'Issues array must not be empty');\n  data.issues.forEach((issue) => {\n    assert(\n      typeof issue === 'object' && issue !== null,\n      'Issue must be an object'\n    );\n    checkAllowedKeys(issue, 'id', 'description', 'systems');\n    checkRequiredKeys(issue, 'id', 'description');\n    Object.prototype.hasOwnProperty.call(issue, 'systems') &&\n      checkSystems(issue.systems);\n    assert(\n      Object.prototype.hasOwnProperty.call(issue, 'systems') ||\n        Object.prototype.hasOwnProperty.call(data, 'systems'),\n      `No systems defined for ${issue.id}`\n    );\n  });\n\n  Object.prototype.hasOwnProperty.call(data, 'systems') &&\n    checkSystems(data.systems);\n}\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport reducers from './reducers';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorTitleKey: 'message',\n      errorDescriptionKey: 'description',\n    }),\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register(reducers);\n  registry.register({ notifications: notificationsReducer });\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React from 'react';\n\nimport { ACTION_TYPES } from '../constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\n\nfunction issuesToSystemsIds(issues) {\n  return uniq(\n    flatMap(issues, (issue) => issue.systems.map((system) => system.id))\n  );\n}\n\nfunction computeRebootStats(remediation) {\n  const systems = issuesToSystemsIds(remediation.issues);\n  const rebootRequired = issuesToSystemsIds(\n    remediation.issues.filter((issue) => issue.resolution.needs_reboot)\n  );\n\n  return {\n    ...remediation,\n    stats: {\n      systemsWithReboot: rebootRequired.length,\n      systemsWithoutReboot: systems.length - rebootRequired.length,\n    },\n  };\n}\n\nexport const remediationSystems = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [ACTION_TYPES.SELECT_ENTITY]: (state, { payload }) => {\n      const selected = state.selected || new Map();\n      if (payload.selected) {\n        if (payload.id === 0) {\n          state?.rows?.forEach((row) => selected.set(row?.id, row));\n        } else {\n          const selectedRow = state?.rows?.find(\n            ({ id } = {}) => id === payload.id\n          );\n          selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n        }\n      } else {\n        if (payload.id === 0) {\n          state.rows.forEach((row) => selected.delete(row.id));\n        } else if (payload.id === -1) {\n          selected.clear();\n        } else {\n          selected.delete(payload.id);\n        }\n      }\n\n      return {\n        ...state,\n        selected: new Map(selected),\n      };\n    },\n    [`${LOAD_ENTITIES_FULFILLED}`]: (state) => {\n      return {\n        ...state,\n        rows: state.rows.map(({ id, ...row }) => ({\n          id,\n          ...row,\n          selected: !!state.selected?.get(id),\n        })),\n      };\n    },\n  });\n\nconst reducers = {\n  remediations: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATIONS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATIONS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        value: action.payload,\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATIONS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  selectedRemediation: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATION_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        remediation: computeRebootStats(action.payload),\n      }),\n      [ACTION_TYPES.REFRESH_REMEDIATION_FULFILLED]: (state, action) => {\n        if (action.payload.id === state.remediation.id) {\n          return {\n            status: 'fulfilled',\n            remediation: computeRebootStats(action.payload),\n          };\n        }\n\n        return state;\n      },\n      [ACTION_TYPES.LOAD_REMEDIATION_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n      [ACTION_TYPES.PATCH_REMEDIATION_FULFILLED]: (\n        { status, remediation },\n        action\n      ) => {\n        return {\n          status,\n          remediation: {\n            ...remediation,\n            ...action.payload,\n          },\n        };\n      },\n      [ACTION_TYPES.DELETE_REMEDIATION_ISSUE_FULFILLED]: (state, action) => {\n        const issues = state.remediation.issues.filter(\n          (issue) => issue.id !== action.payload.issueId\n        );\n        if (action.payload.id === state.remediation.id) {\n          return {\n            status: 'fulfilled',\n            remediation: computeRebootStats({\n              ...state.remediation,\n              issues,\n              needs_reboot: issues.some(\n                (issue) => issue.resolution.needs_reboot\n              ), // eslint-disable-line camelcase\n            }),\n          };\n        }\n\n        return state;\n      },\n      [ACTION_TYPES.DELETE_REMEDIATION_ISSUE_SYSTEM_FULFILLED]: (\n        state,\n        action\n      ) => {\n        if (action.payload.id !== state.remediation.id) {\n          return state;\n        }\n\n        const issues = state.remediation.issues.filter((issue) => {\n          if (issue.id !== action.payload.issue) {\n            return true;\n          }\n\n          // if the action only had 1 systems, which is now gone, remove the action also\n          issue.systems = issue.systems.filter(\n            (system) => system.id !== action.payload.system\n          );\n          return issue.systems.length > 0;\n        });\n\n        return {\n          status: 'fulfilled',\n          remediation: computeRebootStats({\n            ...state.remediation,\n            issues,\n            needs_reboot: issues.some((issue) => issue.resolution.needs_reboot), // eslint-disable-line camelcase\n          }),\n        };\n      },\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  selectedRemediationStatus: applyReducerHash(\n    {\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload,\n      }),\n      [ACTION_TYPES.LOAD_REMEDIATION_STATUS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  connectionStatus: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_CONNECTION_STATUS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.GET_CONNECTION_STATUS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload.data,\n        etag: action.payload.etag,\n      }),\n      [ACTION_TYPES.GET_CONNECTION_STATUS_REJECTED]: () => ({\n        status: 'rejected',\n        data: [],\n      }),\n      [ACTION_TYPES.SET_ETAG]: (state, action) => ({\n        ...state,\n        etag: action.etag,\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  inventoryEntitiesReducer:\n    (props = { INVENTORY_ACTION_TYPES: {} }) =>\n    () =>\n      applyReducerHash({\n        [props.INVENTORY_ACTION_TYPES.LOAD_ENTITIES_FULFILLED]: (state) => {\n          return {\n            ...state,\n            columns: [\n              {\n                key: 'display_name',\n                title: 'Name',\n                // eslint-disable-next-line\n                renderFunc: (name, id, { display_name }) => <div><a href={props.urlBuilder(id)}>{display_name}</a></div>\n              },\n              {\n                key: 'system_status',\n                title: 'Status',\n                // eslint-disable-next-line\n                        renderFunc: (name, id) => <div>{props.generateStatus(id)}</div>\n              },\n            ],\n          };\n        },\n      }),\n\n  playbookActivityIntentory: () => () =>\n    applyReducerHash({\n      [ACTION_TYPES.EXPAND_INVENTORY_TABLE]: (state, action) => {\n        return {\n          ...state,\n          rows: state.rows.map((row) => ({\n            ...row,\n            isOpen:\n              row.id === action.payload.id ? action.payload.isOpen : false,\n          })),\n        };\n      },\n    }),\n\n  playbookRuns: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUNS_FULFILLED]: (state, action) => ({\n      status: 'fulfilled',\n      data: action.payload.data,\n      meta: action.payload.meta,\n    }),\n  }),\n\n  cancelPlaybookRuns: applyReducerHash(\n    {\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        value: action.payload,\n      }),\n      [ACTION_TYPES.CANCEL_PLAYBOOK_RUNS_REJECTED]: () => ({\n        status: 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  playbookRun: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUN_FULFILLED]: (state, action) => ({\n      data: action.payload,\n    }),\n  }),\n\n  playbookRunSystems: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_FULFILLED]: (state, action) => ({\n        ...action.payload,\n      }),\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_PENDING]: (state) => ({\n        ...state,\n        status: 'pending',\n      }),\n      [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEMS_REJECTED]: (state) => ({\n        ...state,\n        data: [],\n        status: 'rejected',\n      }),\n    },\n    {\n      data: [],\n      meta: {},\n    }\n  ),\n\n  playbookRunSystemDetails: applyReducerHash({\n    [ACTION_TYPES.GET_PLAYBOOK_RUN_SYSTEM_DETAILS_FULFILLED]: (\n      state,\n      action\n    ) => ({\n      ...action.payload,\n    }),\n  }),\n\n  runRemediation: applyReducerHash(\n    {\n      [ACTION_TYPES.RUN_REMEDIATION_PENDING]: () => ({\n        status: 'pending',\n      }),\n      [ACTION_TYPES.RUN_REMEDIATION_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: action.payload.data,\n      }),\n      [ACTION_TYPES.RUN_REMEDIATION_REJECTED]: (state, action) => ({\n        status: action.payload.response.status === 412 ? 'changed' : 'rejected',\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n\n  sources: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_ENDPOINT_FULFILLED]: (state, action) => ({\n        status: 'fulfilled',\n        data: {\n          ...state.data,\n          [action.payload.id]: action.payload,\n        },\n      }),\n    },\n    {\n      status: 'initial',\n    }\n  ),\n  executable: applyReducerHash(\n    {\n      [ACTION_TYPES.CHECK_EXECUTABLE_REJECTED]: () => false,\n      [ACTION_TYPES.CHECK_EXECUTABLE_FULFILLED]: () => true,\n    },\n    false\n  ),\n};\n\nexport default reducers;\n"],"names":["actionWrapper","actionsList","callback","dispatch","Promise","all","map","event","payload","then","PlaybookCardHeader","name","id","remediation","remediationIdx","archived","selector","setExecuteOpen","update","loadRemediation","getConnectionStatus","downloadPlaybook","permission","useState","isOpen","setIsOpen","isArchived","setIsArchived","useDispatch","dropdownItems","archiveHandler","patchRemediation","push","DropdownItem","key","isDisabled","isReceptorConfigured","className","hasSmartManagement","permissions","execute","onClick","dispatchNotification","title","description","variant","dismissable","autoDismiss","addNotification","CardHeader","CardActions","Dropdown","isPlain","onSelect","f","toggle","KebabToggle","onToggle","position","type","checked","getSelectedIds","includes","onChange","e","props","target","CardTitle","Stack","hasGutter","StackItem","Link","to","Label","DateFormat","date","updated_at","propTypes","PropTypes","PlaybookCard","complete","total","Card","isCompact","CardBody","Split","SplitItem","system_count","resolved_count","issue_count","CheckCircleIcon","Progress","value","measureLocation","ProgressMeasureLocation","renderProgress","executeOpen","EmptyRemediations","archivedCount","setShowArchived","Bullseye","EmptyState","EmptyStateIcon","icon","WrenchIcon","size","Title","headingLevel","EmptyStateBody","Button","ouiaId","SORTING_ITERATEES","RemediationTable","remediations","loadRemediations","sorter","filter","pagination","shouldUpdateGrid","setShouldUpdateGrid","setRemediationCount","showArchived","status","cards","useContext","PermissionContext","showRefreshMessage","setShowRefreshMessage","selectedRemediation","reduxSelector","state","connectionStatus","runningRemediation","runRemediation","useEffect","column","sortBy","sortDir","pageSize","offset","undefined","meta","Main","Spinner","centered","data","reduce","result","length","register","ExecuteModal","onClose","showRefresh","remediationId","etag","isLoading","issueCount","issues","remediationStatus","getPlaybookRuns","setEtag","Grid","sm","md","lg","idx","GridItem","TestButtons","localStorage","getItem","systems","allHosts","slice","dataProviderC1","dataProviderC2","this","isEnabled","window","insights","chrome","auth","getUser","getHosts","hosts","setState","results","RemediationBtn","dataProvider","children","onRemediationCreated","dataProviderA1","dataProviderA2","dataProviderC3","dataProviderC4","dataProviderC5","dataProviderD1","dataProviderD2","React","defaultProps","document","noReceptorBannerVisible","setNoReceptorBannerVisible","useSorter","useFilter","useSelector","usePagination","remediationCount","filterText","setFilterText","dialogOpen","setDialogOpen","actions","itemsCountInPage","pageDebounced","setValue","reset","selectedIds","getNotification","activeFiltersConfig","filters","category","chips","onDelete","Consumer","read","DeniedState","PageHeader","PageHeaderTitle","PrimaryToolbar","filterConfig","items","label","filterValues","placeholder","_e","bulkSelect","count","isSelected","actionsConfig","valid","byId","keyBy","r","verifyDownload","download","write","setItem","itemCount","NoReceptorBanner","ConfirmationDialog","text","confirmText","del","deleteRemediation","RemediationDetails","lazy","ActivityDetails","ExecutorDetails","Routes","Suspense","fallback","Fragment","Switch","Route","exact","path","component","Home","render","Redirect","childProps","history","createContext","App","hasRead","hasWrite","hasExecute","readPermission","writePermission","executePermission","arePermissionLoaded","unregister","init","hideGlobalFilter","identifyApp","user","entitlements","smart_management","is_entitled","getIsReceptorConfigured","isConfigured","on","domEvent","href","getUserPermissions","remediationsPermissions","permissionList","handlePermissionUpdate","Provider","Component","withRouter","connect","notification","actionCreator","getStore","limit","system","hideArchived","ACTION_TYPES","loadRemediationStatus","getRemediationStatus","refreshRemediation","createRemediation","deleteRemediationIssue","issueId","deleteRemediationIssueSystem","issue","patchRemediationIssue","resolution","getResolutions","ruleId","resolutions","exclude","headers","cancelPlaybookRuns","runId","getPlaybookRun","getPlaybookRunSystems","executorId","ansibleHost","getPlaybookRunSystemDetails","systemId","expandInventoryTable","getEndpoint","options","sources","selectEntity","selected","deleteSystems","deleteSystemsFromRemediation","checkExecutable","Alert","isInline","actionClose","AlertActionCloseButton","Modal","ExclamationTriangleIcon","ModalVariant","isFooterLeftAligned","EmptyStateVariant","LockIcon","referrer","back","EmptyExecutePlaybookState","DesktopIcon","remediationName","isUserEntitled","setIsUserEntitled","connected","setConnected","disconnected","setDisconnected","isDebug","pass","fail","connection_status","con","dis","generateRowsStatus","styledConnectionStatus","rows","cells","executor_name","Tooltip","content","connectedCount","acc","systemCount","pluralize","number","str","executor_id","TextContent","Skeleton","Text","TextVariants","ExpandableSection","toggleText","List","ListItem","rel","ExternalLinkAltIcon","Table","TableVariant","TableHeader","TableBody","connectorUrl","isBeta","location","origin","normalizeStatus","running","pending","acked","failure","canceled","success","renderStatus","Flex","spacer","default","FlexItem","InProgressIcon","TimesCircleIcon","statusTextClass","StatusSummary","executorStatus","hasCancel","counts","playbookId","runningCount","isNaN","failCount","passCount","statusBar","statusText","enableFlip","capitalize","style","margin","no_executor","no_source","no_receptor","ExclamationCircleIcon","no_rhc","no_smart_management","disabled","loading","SyncIcon","WarningModal","onModalCancel","onConfirmCancel","header","hideTitle","CancelButton","cancelWarningVisible","setcancelWarningVisible","dismissDelay","cancelRun","callbacks","cb","identity","fn","add","f1","f2","assertId","Error","defaultSortBy","defaultSortDir","setSortBy","setSortDir","index","direction","onSort","onValueChange","debounce","SEARCH_DEBOUNCE_DELAY","onFilterChange","page","setPage","setPageDebounced","setPageSize","perPage","onSetPage","tagName","onPerPageSelect","onSelectOne","onSelectPage","rowToId","rowIds","row","mapValues","Object","prototype","hasOwnProperty","call","possibleIds","keys","pickBy","intersection","forEach","selectionType","tbodyProps","onRowClick","assert","test","msg","TypeError","checkAllowedKeys","reference","checkRequiredKeys","checkSystems","Array","isArray","validate","registry","middleware","getRegistry","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","item","reducers","notifications","notificationsReducer","issuesToSystemsIds","uniq","flatMap","computeRebootStats","rebootRequired","needs_reboot","stats","systemsWithReboot","systemsWithoutReboot","remediationSystems","LOAD_ENTITIES_FULFILLED","applyReducerHash","Map","set","selectedRow","find","clear","get","action","some","selectedRemediationStatus","inventoryEntitiesReducer","INVENTORY_ACTION_TYPES","columns","renderFunc","display_name","urlBuilder","generateStatus","playbookActivityIntentory","playbookRuns","playbookRun","playbookRunSystems","playbookRunSystemDetails","response","executable"],"sourceRoot":""}